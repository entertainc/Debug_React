{"ast":null,"code":"/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n */\nimport { requestPostPaintCallback } from './ReactFiberHostConfig';\nlet postPaintCallbackScheduled = false;\nlet callbacks = [];\nexport function schedulePostPaintCallback(callback) {\n  callbacks.push(callback);\n\n  if (!postPaintCallbackScheduled) {\n    postPaintCallbackScheduled = true;\n    requestPostPaintCallback(endTime => {\n      for (let i = 0; i < callbacks.length; i++) {\n        callbacks[i](endTime);\n      }\n\n      postPaintCallbackScheduled = false;\n      callbacks = [];\n    });\n  }\n}","map":{"version":3,"sources":["/Users/bytedance/Desktop/sourceCodeReading/react-code/src/react/packages/react-reconciler/src/ReactPostPaintCallback.js"],"names":["requestPostPaintCallback","postPaintCallbackScheduled","callbacks","schedulePostPaintCallback","callback","push","endTime","i","length"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAQA,wBAAR,QAAuC,wBAAvC;AAEA,IAAIC,0BAA0B,GAAG,KAAjC;AACA,IAAIC,SAAmD,GAAG,EAA1D;AAEA,OAAO,SAASC,yBAAT,CAAmCC,QAAnC,EAAwE;AAC7EF,EAAAA,SAAS,CAACG,IAAV,CAAeD,QAAf;;AACA,MAAI,CAACH,0BAAL,EAAiC;AAC/BA,IAAAA,0BAA0B,GAAG,IAA7B;AACAD,IAAAA,wBAAwB,CAACM,OAAO,IAAI;AAClC,WAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGL,SAAS,CAACM,MAA9B,EAAsCD,CAAC,EAAvC,EAA2C;AACzCL,QAAAA,SAAS,CAACK,CAAD,CAAT,CAAaD,OAAb;AACD;;AACDL,MAAAA,0BAA0B,GAAG,KAA7B;AACAC,MAAAA,SAAS,GAAG,EAAZ;AACD,KANuB,CAAxB;AAOD;AACF","sourcesContent":["/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\nimport {requestPostPaintCallback} from './ReactFiberHostConfig';\n\nlet postPaintCallbackScheduled = false;\nlet callbacks: Array<any | ((endTime: number) => void)> = [];\n\nexport function schedulePostPaintCallback(callback: (endTime: number) => void) {\n  callbacks.push(callback);\n  if (!postPaintCallbackScheduled) {\n    postPaintCallbackScheduled = true;\n    requestPostPaintCallback(endTime => {\n      for (let i = 0; i < callbacks.length; i++) {\n        callbacks[i](endTime);\n      }\n      postPaintCallbackScheduled = false;\n      callbacks = [];\n    });\n  }\n}\n"]},"metadata":{},"sourceType":"module"}