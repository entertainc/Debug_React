{"ast":null,"code":"/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n */\nimport { REACT_PROVIDER_TYPE, REACT_SERVER_CONTEXT_TYPE, REACT_SERVER_CONTEXT_DEFAULT_VALUE_NOT_LOADED } from 'shared/ReactSymbols';\nimport { enableServerContext } from 'shared/ReactFeatureFlags';\nimport ReactSharedInternals from 'shared/ReactSharedInternals';\nconst ContextRegistry = ReactSharedInternals.ContextRegistry;\nexport function createServerContext(globalName, defaultValue) {\n  if (!enableServerContext) {\n    throw new Error('Not implemented.');\n  }\n\n  let wasDefined = true;\n\n  if (!ContextRegistry[globalName]) {\n    wasDefined = false;\n    const context = {\n      $$typeof: REACT_SERVER_CONTEXT_TYPE,\n      // As a workaround to support multiple concurrent renderers, we categorize\n      // some renderers as primary and others as secondary. We only expect\n      // there to be two concurrent renderers at most: React Native (primary) and\n      // Fabric (secondary); React DOM (primary) and React ART (secondary).\n      // Secondary renderers store their context values on separate fields.\n      _currentValue: defaultValue,\n      _currentValue2: defaultValue,\n      _defaultValue: defaultValue,\n      // Used to track how many concurrent renderers this context currently\n      // supports within in a single renderer. Such as parallel server rendering.\n      _threadCount: 0,\n      // These are circular\n      Provider: null,\n      Consumer: null,\n      _globalName: globalName\n    };\n    context.Provider = {\n      $$typeof: REACT_PROVIDER_TYPE,\n      _context: context\n    };\n\n    if (__DEV__) {\n      let hasWarnedAboutUsingConsumer;\n      context._currentRenderer = null;\n      context._currentRenderer2 = null;\n      Object.defineProperties(context, {\n        Consumer: {\n          get() {\n            if (!hasWarnedAboutUsingConsumer) {\n              console.error('Consumer pattern is not supported by ReactServerContext');\n              hasWarnedAboutUsingConsumer = true;\n            }\n\n            return null;\n          }\n\n        }\n      });\n    }\n\n    ContextRegistry[globalName] = context;\n  }\n\n  const context = ContextRegistry[globalName];\n\n  if (context._defaultValue === REACT_SERVER_CONTEXT_DEFAULT_VALUE_NOT_LOADED) {\n    context._defaultValue = defaultValue;\n\n    if (context._currentValue === REACT_SERVER_CONTEXT_DEFAULT_VALUE_NOT_LOADED) {\n      context._currentValue = defaultValue;\n    }\n\n    if (context._currentValue2 === REACT_SERVER_CONTEXT_DEFAULT_VALUE_NOT_LOADED) {\n      context._currentValue2 = defaultValue;\n    }\n  } else if (wasDefined) {\n    throw new Error(`ServerContext: ${globalName} already defined`);\n  }\n\n  return context;\n}","map":{"version":3,"sources":["/Users/bytedance/Desktop/sourceCodeReading/react-code/src/react/packages/react/src/ReactServerContext.js"],"names":["REACT_PROVIDER_TYPE","REACT_SERVER_CONTEXT_TYPE","REACT_SERVER_CONTEXT_DEFAULT_VALUE_NOT_LOADED","enableServerContext","ReactSharedInternals","ContextRegistry","createServerContext","globalName","defaultValue","Error","wasDefined","context","$$typeof","_currentValue","_currentValue2","_defaultValue","_threadCount","Provider","Consumer","_globalName","_context","__DEV__","hasWarnedAboutUsingConsumer","_currentRenderer","_currentRenderer2","Object","defineProperties","get","console","error"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,SACEA,mBADF,EAEEC,yBAFF,EAGEC,6CAHF,QAIO,qBAJP;AAWA,SAAQC,mBAAR,QAAkC,0BAAlC;AACA,OAAOC,oBAAP,MAAiC,6BAAjC;AAEA,MAAMC,eAAe,GAAGD,oBAAoB,CAACC,eAA7C;AAEA,OAAO,SAASC,mBAAT,CACLC,UADK,EAELC,YAFK,EAGkB;AACvB,MAAI,CAACL,mBAAL,EAA0B;AACxB,UAAM,IAAIM,KAAJ,CAAU,kBAAV,CAAN;AACD;;AACD,MAAIC,UAAU,GAAG,IAAjB;;AACA,MAAI,CAACL,eAAe,CAACE,UAAD,CAApB,EAAkC;AAChCG,IAAAA,UAAU,GAAG,KAAb;AACA,UAAMC,OAA8B,GAAG;AACrCC,MAAAA,QAAQ,EAAEX,yBAD2B;AAGrC;AACA;AACA;AACA;AACA;AACAY,MAAAA,aAAa,EAAEL,YARsB;AASrCM,MAAAA,cAAc,EAAEN,YATqB;AAWrCO,MAAAA,aAAa,EAAEP,YAXsB;AAarC;AACA;AACAQ,MAAAA,YAAY,EAAE,CAfuB;AAgBrC;AACAC,MAAAA,QAAQ,EAAG,IAjB0B;AAkBrCC,MAAAA,QAAQ,EAAG,IAlB0B;AAmBrCC,MAAAA,WAAW,EAAEZ;AAnBwB,KAAvC;AAsBAI,IAAAA,OAAO,CAACM,QAAR,GAAmB;AACjBL,MAAAA,QAAQ,EAAEZ,mBADO;AAEjBoB,MAAAA,QAAQ,EAAET;AAFO,KAAnB;;AAKA,QAAIU,OAAJ,EAAa;AACX,UAAIC,2BAAJ;AACAX,MAAAA,OAAO,CAACY,gBAAR,GAA2B,IAA3B;AACAZ,MAAAA,OAAO,CAACa,iBAAR,GAA4B,IAA5B;AACAC,MAAAA,MAAM,CAACC,gBAAP,CACEf,OADF,EAEG;AACCO,QAAAA,QAAQ,EAAE;AACRS,UAAAA,GAAG,GAAG;AACJ,gBAAI,CAACL,2BAAL,EAAkC;AAChCM,cAAAA,OAAO,CAACC,KAAR,CACE,yDADF;AAGAP,cAAAA,2BAA2B,GAAG,IAA9B;AACD;;AACD,mBAAO,IAAP;AACD;;AATO;AADX,OAFH;AAgBD;;AACDjB,IAAAA,eAAe,CAACE,UAAD,CAAf,GAA8BI,OAA9B;AACD;;AAED,QAAMA,OAAO,GAAGN,eAAe,CAACE,UAAD,CAA/B;;AACA,MAAII,OAAO,CAACI,aAAR,KAA0Bb,6CAA9B,EAA6E;AAC3ES,IAAAA,OAAO,CAACI,aAAR,GAAwBP,YAAxB;;AACA,QACEG,OAAO,CAACE,aAAR,KAA0BX,6CAD5B,EAEE;AACAS,MAAAA,OAAO,CAACE,aAAR,GAAwBL,YAAxB;AACD;;AACD,QACEG,OAAO,CAACG,cAAR,KAA2BZ,6CAD7B,EAEE;AACAS,MAAAA,OAAO,CAACG,cAAR,GAAyBN,YAAzB;AACD;AACF,GAZD,MAYO,IAAIE,UAAJ,EAAgB;AACrB,UAAM,IAAID,KAAJ,CAAW,kBAAiBF,UAAW,kBAAvC,CAAN;AACD;;AACD,SAAOI,OAAP;AACD","sourcesContent":["/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nimport {\n  REACT_PROVIDER_TYPE,\n  REACT_SERVER_CONTEXT_TYPE,\n  REACT_SERVER_CONTEXT_DEFAULT_VALUE_NOT_LOADED,\n} from 'shared/ReactSymbols';\n\nimport type {\n  ReactServerContext,\n  ServerContextJSONValue,\n} from 'shared/ReactTypes';\n\nimport {enableServerContext} from 'shared/ReactFeatureFlags';\nimport ReactSharedInternals from 'shared/ReactSharedInternals';\n\nconst ContextRegistry = ReactSharedInternals.ContextRegistry;\n\nexport function createServerContext<T: ServerContextJSONValue>(\n  globalName: string,\n  defaultValue: T,\n): ReactServerContext<T> {\n  if (!enableServerContext) {\n    throw new Error('Not implemented.');\n  }\n  let wasDefined = true;\n  if (!ContextRegistry[globalName]) {\n    wasDefined = false;\n    const context: ReactServerContext<T> = {\n      $$typeof: REACT_SERVER_CONTEXT_TYPE,\n\n      // As a workaround to support multiple concurrent renderers, we categorize\n      // some renderers as primary and others as secondary. We only expect\n      // there to be two concurrent renderers at most: React Native (primary) and\n      // Fabric (secondary); React DOM (primary) and React ART (secondary).\n      // Secondary renderers store their context values on separate fields.\n      _currentValue: defaultValue,\n      _currentValue2: defaultValue,\n\n      _defaultValue: defaultValue,\n\n      // Used to track how many concurrent renderers this context currently\n      // supports within in a single renderer. Such as parallel server rendering.\n      _threadCount: 0,\n      // These are circular\n      Provider: (null: any),\n      Consumer: (null: any),\n      _globalName: globalName,\n    };\n\n    context.Provider = {\n      $$typeof: REACT_PROVIDER_TYPE,\n      _context: context,\n    };\n\n    if (__DEV__) {\n      let hasWarnedAboutUsingConsumer;\n      context._currentRenderer = null;\n      context._currentRenderer2 = null;\n      Object.defineProperties(\n        context,\n        ({\n          Consumer: {\n            get() {\n              if (!hasWarnedAboutUsingConsumer) {\n                console.error(\n                  'Consumer pattern is not supported by ReactServerContext',\n                );\n                hasWarnedAboutUsingConsumer = true;\n              }\n              return null;\n            },\n          },\n        }: any),\n      );\n    }\n    ContextRegistry[globalName] = context;\n  }\n\n  const context = ContextRegistry[globalName];\n  if (context._defaultValue === REACT_SERVER_CONTEXT_DEFAULT_VALUE_NOT_LOADED) {\n    context._defaultValue = defaultValue;\n    if (\n      context._currentValue === REACT_SERVER_CONTEXT_DEFAULT_VALUE_NOT_LOADED\n    ) {\n      context._currentValue = defaultValue;\n    }\n    if (\n      context._currentValue2 === REACT_SERVER_CONTEXT_DEFAULT_VALUE_NOT_LOADED\n    ) {\n      context._currentValue2 = defaultValue;\n    }\n  } else if (wasDefined) {\n    throw new Error(`ServerContext: ${globalName} already defined`);\n  }\n  return context;\n}\n"]},"metadata":{},"sourceType":"module"}