{"ast":null,"code":"/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n */\n// This is imported by the event replaying implementation in React DOM. It's\n// in a separate file to break a circular dependency between the renderer and\n// the reconciler.\nexport function isRootDehydrated(root) {\n  const currentState = root.current.memoizedState;\n  return currentState.isDehydrated;\n}","map":{"version":3,"sources":["/Users/bytedance/Desktop/sourceCodeReading/react-code/src/react/packages/react-reconciler/src/ReactFiberShellHydration.js"],"names":["isRootDehydrated","root","currentState","current","memoizedState","isDehydrated"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAKA;AACA;AACA;AACA,OAAO,SAASA,gBAAT,CAA0BC,IAA1B,EAAoD;AACzD,QAAMC,YAAuB,GAAGD,IAAI,CAACE,OAAL,CAAaC,aAA7C;AACA,SAAOF,YAAY,CAACG,YAApB;AACD","sourcesContent":["/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nimport type {FiberRoot} from './ReactInternalTypes';\nimport type {RootState} from './ReactFiberRoot';\n\n// This is imported by the event replaying implementation in React DOM. It's\n// in a separate file to break a circular dependency between the renderer and\n// the reconciler.\nexport function isRootDehydrated(root: FiberRoot): boolean {\n  const currentState: RootState = root.current.memoizedState;\n  return currentState.isDehydrated;\n}\n"]},"metadata":{},"sourceType":"module"}