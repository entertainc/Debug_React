{"ast":null,"code":"/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n */\nexport function push(heap, node) {\n  const index = heap.length;\n  heap.push(node);\n  siftUp(heap, node, index);\n}\nexport function peek(heap) {\n  return heap.length === 0 ? null : heap[0];\n}\nexport function pop(heap) {\n  if (heap.length === 0) {\n    return null;\n  }\n\n  const first = heap[0];\n  const last = heap.pop();\n\n  if (last !== first) {\n    heap[0] = last;\n    siftDown(heap, last, 0);\n  }\n\n  return first;\n}\n\nfunction siftUp(heap, node, i) {\n  let index = i;\n\n  while (index > 0) {\n    const parentIndex = index - 1 >>> 1;\n    const parent = heap[parentIndex];\n\n    if (compare(parent, node) > 0) {\n      // The parent is larger. Swap positions.\n      heap[parentIndex] = node;\n      heap[index] = parent;\n      index = parentIndex;\n    } else {\n      // The parent is smaller. Exit.\n      return;\n    }\n  }\n}\n\nfunction siftDown(heap, node, i) {\n  let index = i;\n  const length = heap.length;\n  const halfLength = length >>> 1;\n\n  while (index < halfLength) {\n    const leftIndex = (index + 1) * 2 - 1;\n    const left = heap[leftIndex];\n    const rightIndex = leftIndex + 1;\n    const right = heap[rightIndex]; // If the left or right node is smaller, swap with the smaller of those.\n\n    if (compare(left, node) < 0) {\n      if (rightIndex < length && compare(right, left) < 0) {\n        heap[index] = right;\n        heap[rightIndex] = node;\n        index = rightIndex;\n      } else {\n        heap[index] = left;\n        heap[leftIndex] = node;\n        index = leftIndex;\n      }\n    } else if (rightIndex < length && compare(right, node) < 0) {\n      heap[index] = right;\n      heap[rightIndex] = node;\n      index = rightIndex;\n    } else {\n      // Neither child is smaller. Exit.\n      return;\n    }\n  }\n}\n\nfunction compare(a, b) {\n  // Compare sort index first, then task id.\n  const diff = a.sortIndex - b.sortIndex;\n  return diff !== 0 ? diff : a.id - b.id;\n}","map":{"version":3,"sources":["/Users/bytedance/Desktop/sourceCodeReading/react-code/src/react/packages/scheduler/src/SchedulerMinHeap.js"],"names":["push","heap","node","index","length","siftUp","peek","pop","first","last","siftDown","i","parentIndex","parent","compare","halfLength","leftIndex","left","rightIndex","right","a","b","diff","sortIndex","id"],"mappings":"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","sourcesContent":["/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow strict\n */\n\ntype Heap<T: Node> = Array<T>;\ntype Node = {\n  id: number,\n  sortIndex: number,\n  ...\n};\n\nexport function push<T: Node>(heap: Heap<T>, node: T): void {\n  const index = heap.length;\n  heap.push(node);\n  siftUp(heap, node, index);\n}\n\nexport function peek<T: Node>(heap: Heap<T>): T | null {\n  return heap.length === 0 ? null : heap[0];\n}\n\nexport function pop<T: Node>(heap: Heap<T>): T | null {\n  if (heap.length === 0) {\n    return null;\n  }\n  const first = heap[0];\n  const last = heap.pop();\n  if (last !== first) {\n    heap[0] = last;\n    siftDown(heap, last, 0);\n  }\n  return first;\n}\n\nfunction siftUp<T: Node>(heap: Heap<T>, node: T, i: number): void {\n  let index = i;\n  while (index > 0) {\n    const parentIndex = (index - 1) >>> 1;\n    const parent = heap[parentIndex];\n    if (compare(parent, node) > 0) {\n      // The parent is larger. Swap positions.\n      heap[parentIndex] = node;\n      heap[index] = parent;\n      index = parentIndex;\n    } else {\n      // The parent is smaller. Exit.\n      return;\n    }\n  }\n}\n\nfunction siftDown<T: Node>(heap: Heap<T>, node: T, i: number): void {\n  let index = i;\n  const length = heap.length;\n  const halfLength = length >>> 1;\n  while (index < halfLength) {\n    const leftIndex = (index + 1) * 2 - 1;\n    const left = heap[leftIndex];\n    const rightIndex = leftIndex + 1;\n    const right = heap[rightIndex];\n\n    // If the left or right node is smaller, swap with the smaller of those.\n    if (compare(left, node) < 0) {\n      if (rightIndex < length && compare(right, left) < 0) {\n        heap[index] = right;\n        heap[rightIndex] = node;\n        index = rightIndex;\n      } else {\n        heap[index] = left;\n        heap[leftIndex] = node;\n        index = leftIndex;\n      }\n    } else if (rightIndex < length && compare(right, node) < 0) {\n      heap[index] = right;\n      heap[rightIndex] = node;\n      index = rightIndex;\n    } else {\n      // Neither child is smaller. Exit.\n      return;\n    }\n  }\n}\n\nfunction compare(a: Node, b: Node) {\n  // Compare sort index first, then task id.\n  const diff = a.sortIndex - b.sortIndex;\n  return diff !== 0 ? diff : a.id - b.id;\n}\n"]},"metadata":{},"sourceType":"module"}