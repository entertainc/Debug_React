{"ast":null,"code":"import ReactDOMSharedInternals from 'shared/ReactDOMSharedInternals';\nexport function preinit() {\n  const dispatcher = ReactDOMSharedInternals.Dispatcher.current;\n\n  if (dispatcher) {\n    dispatcher.preinit.apply(this, arguments);\n  } // We don't error because preinit needs to be resilient to being called in a variety of scopes\n  // and the runtime may not be capable of responding. The function is optimistic and not critical\n  // so we favor silent bailout over warning or erroring.\n\n}\nexport function preload() {\n  const dispatcher = ReactDOMSharedInternals.Dispatcher.current;\n\n  if (dispatcher) {\n    dispatcher.preload.apply(this, arguments);\n  } // We don't error because preload needs to be resilient to being called in a variety of scopes\n  // and the runtime may not be capable of responding. The function is optimistic and not critical\n  // so we favor silent bailout over warning or erroring.\n\n}","map":{"version":3,"sources":["/Users/bytedance/Desktop/sourceCodeReading/react-code/src/react/packages/react-dom-bindings/src/shared/ReactDOMFloat.js"],"names":["ReactDOMSharedInternals","preinit","dispatcher","Dispatcher","current","apply","arguments","preload"],"mappings":"AAAA,OAAOA,uBAAP,MAAoC,gCAApC;AAEA,OAAO,SAASC,OAAT,GAAmB;AACxB,QAAMC,UAAU,GAAGF,uBAAuB,CAACG,UAAxB,CAAmCC,OAAtD;;AACA,MAAIF,UAAJ,EAAgB;AACdA,IAAAA,UAAU,CAACD,OAAX,CAAmBI,KAAnB,CAAyB,IAAzB,EAA+BC,SAA/B;AACD,GAJuB,CAKxB;AACA;AACA;;AACD;AAED,OAAO,SAASC,OAAT,GAAmB;AACxB,QAAML,UAAU,GAAGF,uBAAuB,CAACG,UAAxB,CAAmCC,OAAtD;;AACA,MAAIF,UAAJ,EAAgB;AACdA,IAAAA,UAAU,CAACK,OAAX,CAAmBF,KAAnB,CAAyB,IAAzB,EAA+BC,SAA/B;AACD,GAJuB,CAKxB;AACA;AACA;;AACD","sourcesContent":["import ReactDOMSharedInternals from 'shared/ReactDOMSharedInternals';\n\nexport function preinit() {\n  const dispatcher = ReactDOMSharedInternals.Dispatcher.current;\n  if (dispatcher) {\n    dispatcher.preinit.apply(this, arguments);\n  }\n  // We don't error because preinit needs to be resilient to being called in a variety of scopes\n  // and the runtime may not be capable of responding. The function is optimistic and not critical\n  // so we favor silent bailout over warning or erroring.\n}\n\nexport function preload() {\n  const dispatcher = ReactDOMSharedInternals.Dispatcher.current;\n  if (dispatcher) {\n    dispatcher.preload.apply(this, arguments);\n  }\n  // We don't error because preload needs to be resilient to being called in a variety of scopes\n  // and the runtime may not be capable of responding. The function is optimistic and not critical\n  // so we favor silent bailout over warning or erroring.\n}\n"]},"metadata":{},"sourceType":"module"}