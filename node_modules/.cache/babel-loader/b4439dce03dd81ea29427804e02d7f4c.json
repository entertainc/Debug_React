{"ast":null,"code":"/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n */\nimport { supportsResources, supportsSingletons, isHostResourceType, isHostSingletonType } from './ReactFiberHostConfig';\nimport { createRootStrictEffectsByDefault, enableCache, enableProfilerTimer, enableScopeAPI, enableLegacyHidden, enableSyncDefaultUpdates, allowConcurrentByDefault, enableTransitionTracing, enableDebugTracing, enableFloat, enableHostSingletons } from 'shared/ReactFeatureFlags';\nimport { NoFlags, Placement, StaticMask } from './ReactFiberFlags';\nimport { ConcurrentRoot } from './ReactRootTags';\nimport { IndeterminateComponent, ClassComponent, HostRoot, HostComponent, HostText, HostPortal, HostResource, HostSingleton, ForwardRef, Fragment, Mode, ContextProvider, ContextConsumer, Profiler, SuspenseComponent, SuspenseListComponent, DehydratedFragment, FunctionComponent, MemoComponent, SimpleMemoComponent, LazyComponent, ScopeComponent, OffscreenComponent, LegacyHiddenComponent, CacheComponent, TracingMarkerComponent } from './ReactWorkTags';\nimport { OffscreenVisible } from './ReactFiberOffscreenComponent';\nimport getComponentNameFromFiber from 'react-reconciler/src/getComponentNameFromFiber';\nimport { isDevToolsPresent } from './ReactFiberDevToolsHook';\nimport { resolveClassForHotReloading, resolveFunctionForHotReloading, resolveForwardRefForHotReloading } from './ReactFiberHotReloading';\nimport { NoLanes } from './ReactFiberLane';\nimport { NoMode, ConcurrentMode, DebugTracingMode, ProfileMode, StrictLegacyMode, StrictEffectsMode, ConcurrentUpdatesByDefaultMode } from './ReactTypeOfMode';\nimport { REACT_FORWARD_REF_TYPE, REACT_FRAGMENT_TYPE, REACT_DEBUG_TRACING_MODE_TYPE, REACT_STRICT_MODE_TYPE, REACT_PROFILER_TYPE, REACT_PROVIDER_TYPE, REACT_CONTEXT_TYPE, REACT_SUSPENSE_TYPE, REACT_SUSPENSE_LIST_TYPE, REACT_MEMO_TYPE, REACT_LAZY_TYPE, REACT_SCOPE_TYPE, REACT_OFFSCREEN_TYPE, REACT_LEGACY_HIDDEN_TYPE, REACT_CACHE_TYPE, REACT_TRACING_MARKER_TYPE } from 'shared/ReactSymbols';\nimport { TransitionTracingMarker } from './ReactFiberTracingMarkerComponent';\nimport { detachOffscreenInstance, attachOffscreenInstance } from './ReactFiberCommitWork';\nimport { getHostContext } from './ReactFiberHostContext';\nlet hasBadMapPolyfill;\n\nif (__DEV__) {\n  hasBadMapPolyfill = false;\n\n  try {\n    const nonExtensibleObject = Object.preventExtensions({});\n    /* eslint-disable no-new */\n\n    new Map([[nonExtensibleObject, null]]);\n    new Set([nonExtensibleObject]);\n    /* eslint-enable no-new */\n  } catch (e) {\n    // TODO: Consider warning about bad polyfills\n    hasBadMapPolyfill = true;\n  }\n}\n\nfunction FiberNode(tag, pendingProps, key, mode) {\n  // Instance\n  this.tag = tag;\n  this.key = key;\n  this.elementType = null;\n  this.type = null;\n  this.stateNode = null; // Fiber\n\n  this.return = null;\n  this.child = null;\n  this.sibling = null;\n  this.index = 0;\n  this.ref = null;\n  this.refCleanup = null;\n  this.pendingProps = pendingProps;\n  this.memoizedProps = null;\n  this.updateQueue = null;\n  this.memoizedState = null;\n  this.dependencies = null;\n  this.mode = mode; // Effects\n\n  this.flags = NoFlags;\n  this.subtreeFlags = NoFlags;\n  this.deletions = null;\n  this.lanes = NoLanes;\n  this.childLanes = NoLanes;\n  this.alternate = null;\n\n  if (enableProfilerTimer) {\n    // Note: The following is done to avoid a v8 performance cliff.\n    //\n    // Initializing the fields below to smis and later updating them with\n    // double values will cause Fibers to end up having separate shapes.\n    // This behavior/bug has something to do with Object.preventExtension().\n    // Fortunately this only impacts DEV builds.\n    // Unfortunately it makes React unusably slow for some applications.\n    // To work around this, initialize the fields below with doubles.\n    //\n    // Learn more about this here:\n    // https://github.com/facebook/react/issues/14365\n    // https://bugs.chromium.org/p/v8/issues/detail?id=8538\n    this.actualDuration = Number.NaN;\n    this.actualStartTime = Number.NaN;\n    this.selfBaseDuration = Number.NaN;\n    this.treeBaseDuration = Number.NaN; // It's okay to replace the initial doubles with smis after initialization.\n    // This won't trigger the performance cliff mentioned above,\n    // and it simplifies other profiler code (including DevTools).\n\n    this.actualDuration = 0;\n    this.actualStartTime = -1;\n    this.selfBaseDuration = 0;\n    this.treeBaseDuration = 0;\n  }\n\n  if (__DEV__) {\n    // This isn't directly used but is handy for debugging internals:\n    this._debugSource = null;\n    this._debugOwner = null;\n    this._debugNeedsRemount = false;\n    this._debugHookTypes = null;\n\n    if (!hasBadMapPolyfill && typeof Object.preventExtensions === 'function') {\n      Object.preventExtensions(this);\n    }\n  }\n} // This is a constructor function, rather than a POJO constructor, still\n// please ensure we do the following:\n// 1) Nobody should add any instance methods on this. Instance methods can be\n//    more difficult to predict when they get optimized and they are almost\n//    never inlined properly in static compilers.\n// 2) Nobody should rely on `instanceof Fiber` for type testing. We should\n//    always know when it is a fiber.\n// 3) We might want to experiment with using numeric keys since they are easier\n//    to optimize in a non-JIT environment.\n// 4) We can easily go from a constructor to a createFiber object literal if that\n//    is faster.\n// 5) It should be easy to port this to a C struct and keep a C implementation\n//    compatible.\n\n\nconst createFiber = function (tag, pendingProps, key, mode) {\n  // $FlowFixMe: the shapes are exact here but Flow doesn't like constructors\n  return new FiberNode(tag, pendingProps, key, mode);\n};\n\nfunction shouldConstruct(Component) {\n  const prototype = Component.prototype;\n  return !!(prototype && prototype.isReactComponent);\n}\n\nexport function isSimpleFunctionComponent(type) {\n  return typeof type === 'function' && !shouldConstruct(type) && type.defaultProps === undefined;\n}\nexport function resolveLazyComponentTag(Component) {\n  if (typeof Component === 'function') {\n    return shouldConstruct(Component) ? ClassComponent : FunctionComponent;\n  } else if (Component !== undefined && Component !== null) {\n    const $$typeof = Component.$$typeof;\n\n    if ($$typeof === REACT_FORWARD_REF_TYPE) {\n      return ForwardRef;\n    }\n\n    if ($$typeof === REACT_MEMO_TYPE) {\n      return MemoComponent;\n    }\n  }\n\n  return IndeterminateComponent;\n} // This is used to create an alternate fiber to do work on.\n\nexport function createWorkInProgress(current, pendingProps) {\n  let workInProgress = current.alternate;\n\n  if (workInProgress === null) {\n    // We use a double buffering pooling technique because we know that we'll\n    // only ever need at most two versions of a tree. We pool the \"other\" unused\n    // node that we're free to reuse. This is lazily created to avoid allocating\n    // extra objects for things that are never updated. It also allow us to\n    // reclaim the extra memory if needed.\n    workInProgress = createFiber(current.tag, pendingProps, current.key, current.mode);\n    workInProgress.elementType = current.elementType;\n    workInProgress.type = current.type;\n    workInProgress.stateNode = current.stateNode;\n\n    if (__DEV__) {\n      // DEV-only fields\n      workInProgress._debugSource = current._debugSource;\n      workInProgress._debugOwner = current._debugOwner;\n      workInProgress._debugHookTypes = current._debugHookTypes;\n    }\n\n    workInProgress.alternate = current;\n    current.alternate = workInProgress;\n  } else {\n    workInProgress.pendingProps = pendingProps; // Needed because Blocks store data on type.\n\n    workInProgress.type = current.type; // We already have an alternate.\n    // Reset the effect tag.\n\n    workInProgress.flags = NoFlags; // The effects are no longer valid.\n\n    workInProgress.subtreeFlags = NoFlags;\n    workInProgress.deletions = null;\n\n    if (enableProfilerTimer) {\n      // We intentionally reset, rather than copy, actualDuration & actualStartTime.\n      // This prevents time from endlessly accumulating in new commits.\n      // This has the downside of resetting values for different priority renders,\n      // But works for yielding (the common case) and should support resuming.\n      workInProgress.actualDuration = 0;\n      workInProgress.actualStartTime = -1;\n    }\n  } // Reset all effects except static ones.\n  // Static effects are not specific to a render.\n\n\n  workInProgress.flags = current.flags & StaticMask;\n  workInProgress.childLanes = current.childLanes;\n  workInProgress.lanes = current.lanes;\n  workInProgress.child = current.child;\n  workInProgress.memoizedProps = current.memoizedProps;\n  workInProgress.memoizedState = current.memoizedState;\n  workInProgress.updateQueue = current.updateQueue; // Clone the dependencies object. This is mutated during the render phase, so\n  // it cannot be shared with the current fiber.\n\n  const currentDependencies = current.dependencies;\n  workInProgress.dependencies = currentDependencies === null ? null : {\n    lanes: currentDependencies.lanes,\n    firstContext: currentDependencies.firstContext\n  }; // These will be overridden during the parent's reconciliation\n\n  workInProgress.sibling = current.sibling;\n  workInProgress.index = current.index;\n  workInProgress.ref = current.ref;\n  workInProgress.refCleanup = current.refCleanup;\n\n  if (enableProfilerTimer) {\n    workInProgress.selfBaseDuration = current.selfBaseDuration;\n    workInProgress.treeBaseDuration = current.treeBaseDuration;\n  }\n\n  if (__DEV__) {\n    workInProgress._debugNeedsRemount = current._debugNeedsRemount;\n\n    switch (workInProgress.tag) {\n      case IndeterminateComponent:\n      case FunctionComponent:\n      case SimpleMemoComponent:\n        workInProgress.type = resolveFunctionForHotReloading(current.type);\n        break;\n\n      case ClassComponent:\n        workInProgress.type = resolveClassForHotReloading(current.type);\n        break;\n\n      case ForwardRef:\n        workInProgress.type = resolveForwardRefForHotReloading(current.type);\n        break;\n\n      default:\n        break;\n    }\n  }\n\n  return workInProgress;\n} // Used to reuse a Fiber for a second pass.\n\nexport function resetWorkInProgress(workInProgress, renderLanes) {\n  // This resets the Fiber to what createFiber or createWorkInProgress would\n  // have set the values to before during the first pass. Ideally this wouldn't\n  // be necessary but unfortunately many code paths reads from the workInProgress\n  // when they should be reading from current and writing to workInProgress.\n  // We assume pendingProps, index, key, ref, return are still untouched to\n  // avoid doing another reconciliation.\n  // Reset the effect flags but keep any Placement tags, since that's something\n  // that child fiber is setting, not the reconciliation.\n  workInProgress.flags &= StaticMask | Placement; // The effects are no longer valid.\n\n  const current = workInProgress.alternate;\n\n  if (current === null) {\n    // Reset to createFiber's initial values.\n    workInProgress.childLanes = NoLanes;\n    workInProgress.lanes = renderLanes;\n    workInProgress.child = null;\n    workInProgress.subtreeFlags = NoFlags;\n    workInProgress.memoizedProps = null;\n    workInProgress.memoizedState = null;\n    workInProgress.updateQueue = null;\n    workInProgress.dependencies = null;\n    workInProgress.stateNode = null;\n\n    if (enableProfilerTimer) {\n      // Note: We don't reset the actualTime counts. It's useful to accumulate\n      // actual time across multiple render passes.\n      workInProgress.selfBaseDuration = 0;\n      workInProgress.treeBaseDuration = 0;\n    }\n  } else {\n    // Reset to the cloned values that createWorkInProgress would've.\n    workInProgress.childLanes = current.childLanes;\n    workInProgress.lanes = current.lanes;\n    workInProgress.child = current.child;\n    workInProgress.subtreeFlags = NoFlags;\n    workInProgress.deletions = null;\n    workInProgress.memoizedProps = current.memoizedProps;\n    workInProgress.memoizedState = current.memoizedState;\n    workInProgress.updateQueue = current.updateQueue; // Needed because Blocks store data on type.\n\n    workInProgress.type = current.type; // Clone the dependencies object. This is mutated during the render phase, so\n    // it cannot be shared with the current fiber.\n\n    const currentDependencies = current.dependencies;\n    workInProgress.dependencies = currentDependencies === null ? null : {\n      lanes: currentDependencies.lanes,\n      firstContext: currentDependencies.firstContext\n    };\n\n    if (enableProfilerTimer) {\n      // Note: We don't reset the actualTime counts. It's useful to accumulate\n      // actual time across multiple render passes.\n      workInProgress.selfBaseDuration = current.selfBaseDuration;\n      workInProgress.treeBaseDuration = current.treeBaseDuration;\n    }\n  }\n\n  return workInProgress;\n}\nexport function createHostRootFiber(tag, isStrictMode, concurrentUpdatesByDefaultOverride) {\n  let mode;\n\n  if (tag === ConcurrentRoot) {\n    mode = ConcurrentMode;\n\n    if (isStrictMode === true || createRootStrictEffectsByDefault) {\n      mode |= StrictLegacyMode | StrictEffectsMode;\n    }\n\n    if ( // We only use this flag for our repo tests to check both behaviors.\n    // TODO: Flip this flag and rename it something like \"forceConcurrentByDefaultForTesting\"\n    !enableSyncDefaultUpdates || allowConcurrentByDefault && concurrentUpdatesByDefaultOverride) {\n      mode |= ConcurrentUpdatesByDefaultMode;\n    }\n  } else {\n    mode = NoMode;\n  }\n\n  if (enableProfilerTimer && isDevToolsPresent) {\n    // Always collect profile timings when DevTools are present.\n    // This enables DevTools to start capturing timing at any point–\n    // Without some nodes in the tree having empty base times.\n    mode |= ProfileMode;\n  }\n\n  return createFiber(HostRoot, null, null, mode);\n}\nexport function createFiberFromTypeAndProps(type, // React$ElementType\nkey, pendingProps, owner, mode, lanes) {\n  let fiberTag = IndeterminateComponent; // The resolved type is set if we know what the final type will be. I.e. it's not lazy.\n\n  let resolvedType = type;\n\n  if (typeof type === 'function') {\n    if (shouldConstruct(type)) {\n      fiberTag = ClassComponent;\n\n      if (__DEV__) {\n        resolvedType = resolveClassForHotReloading(resolvedType);\n      }\n    } else {\n      if (__DEV__) {\n        resolvedType = resolveFunctionForHotReloading(resolvedType);\n      }\n    }\n  } else if (typeof type === 'string') {\n    if (enableFloat && supportsResources && enableHostSingletons && supportsSingletons) {\n      const hostContext = getHostContext();\n      fiberTag = isHostResourceType(type, pendingProps, hostContext) ? HostResource : isHostSingletonType(type) ? HostSingleton : HostComponent;\n    } else if (enableFloat && supportsResources) {\n      const hostContext = getHostContext();\n      fiberTag = isHostResourceType(type, pendingProps, hostContext) ? HostResource : HostComponent;\n    } else if (enableHostSingletons && supportsSingletons) {\n      fiberTag = isHostSingletonType(type) ? HostSingleton : HostComponent;\n    } else {\n      fiberTag = HostComponent;\n    }\n  } else {\n    getTag: switch (type) {\n      case REACT_FRAGMENT_TYPE:\n        return createFiberFromFragment(pendingProps.children, mode, lanes, key);\n\n      case REACT_STRICT_MODE_TYPE:\n        fiberTag = Mode;\n        mode |= StrictLegacyMode;\n\n        if ((mode & ConcurrentMode) !== NoMode) {\n          // Strict effects should never run on legacy roots\n          mode |= StrictEffectsMode;\n        }\n\n        break;\n\n      case REACT_PROFILER_TYPE:\n        return createFiberFromProfiler(pendingProps, mode, lanes, key);\n\n      case REACT_SUSPENSE_TYPE:\n        return createFiberFromSuspense(pendingProps, mode, lanes, key);\n\n      case REACT_SUSPENSE_LIST_TYPE:\n        return createFiberFromSuspenseList(pendingProps, mode, lanes, key);\n\n      case REACT_OFFSCREEN_TYPE:\n        return createFiberFromOffscreen(pendingProps, mode, lanes, key);\n\n      case REACT_LEGACY_HIDDEN_TYPE:\n        if (enableLegacyHidden) {\n          return createFiberFromLegacyHidden(pendingProps, mode, lanes, key);\n        }\n\n      // eslint-disable-next-line no-fallthrough\n\n      case REACT_SCOPE_TYPE:\n        if (enableScopeAPI) {\n          return createFiberFromScope(type, pendingProps, mode, lanes, key);\n        }\n\n      // eslint-disable-next-line no-fallthrough\n\n      case REACT_CACHE_TYPE:\n        if (enableCache) {\n          return createFiberFromCache(pendingProps, mode, lanes, key);\n        }\n\n      // eslint-disable-next-line no-fallthrough\n\n      case REACT_TRACING_MARKER_TYPE:\n        if (enableTransitionTracing) {\n          return createFiberFromTracingMarker(pendingProps, mode, lanes, key);\n        }\n\n      // eslint-disable-next-line no-fallthrough\n\n      case REACT_DEBUG_TRACING_MODE_TYPE:\n        if (enableDebugTracing) {\n          fiberTag = Mode;\n          mode |= DebugTracingMode;\n          break;\n        }\n\n      // eslint-disable-next-line no-fallthrough\n\n      default:\n        {\n          if (typeof type === 'object' && type !== null) {\n            switch (type.$$typeof) {\n              case REACT_PROVIDER_TYPE:\n                fiberTag = ContextProvider;\n                break getTag;\n\n              case REACT_CONTEXT_TYPE:\n                // This is a consumer\n                fiberTag = ContextConsumer;\n                break getTag;\n\n              case REACT_FORWARD_REF_TYPE:\n                fiberTag = ForwardRef;\n\n                if (__DEV__) {\n                  resolvedType = resolveForwardRefForHotReloading(resolvedType);\n                }\n\n                break getTag;\n\n              case REACT_MEMO_TYPE:\n                fiberTag = MemoComponent;\n                break getTag;\n\n              case REACT_LAZY_TYPE:\n                fiberTag = LazyComponent;\n                resolvedType = null;\n                break getTag;\n            }\n          }\n\n          let info = '';\n\n          if (__DEV__) {\n            if (type === undefined || typeof type === 'object' && type !== null && Object.keys(type).length === 0) {\n              info += ' You likely forgot to export your component from the file ' + \"it's defined in, or you might have mixed up default and \" + 'named imports.';\n            }\n\n            const ownerName = owner ? getComponentNameFromFiber(owner) : null;\n\n            if (ownerName) {\n              info += '\\n\\nCheck the render method of `' + ownerName + '`.';\n            }\n          }\n\n          throw new Error('Element type is invalid: expected a string (for built-in ' + 'components) or a class/function (for composite components) ' + `but got: ${type == null ? type : typeof type}.${info}`);\n        }\n    }\n  }\n\n  const fiber = createFiber(fiberTag, pendingProps, key, mode);\n  fiber.elementType = type;\n  fiber.type = resolvedType;\n  fiber.lanes = lanes;\n\n  if (__DEV__) {\n    fiber._debugOwner = owner;\n  }\n\n  return fiber;\n}\nexport function createFiberFromElement(element, mode, lanes) {\n  let owner = null;\n\n  if (__DEV__) {\n    owner = element._owner;\n  }\n\n  const type = element.type;\n  const key = element.key;\n  const pendingProps = element.props;\n  const fiber = createFiberFromTypeAndProps(type, key, pendingProps, owner, mode, lanes);\n\n  if (__DEV__) {\n    fiber._debugSource = element._source;\n    fiber._debugOwner = element._owner;\n  }\n\n  return fiber;\n}\nexport function createFiberFromFragment(elements, mode, lanes, key) {\n  const fiber = createFiber(Fragment, elements, key, mode);\n  fiber.lanes = lanes;\n  return fiber;\n}\n\nfunction createFiberFromScope(scope, pendingProps, mode, lanes, key) {\n  const fiber = createFiber(ScopeComponent, pendingProps, key, mode);\n  fiber.type = scope;\n  fiber.elementType = scope;\n  fiber.lanes = lanes;\n  return fiber;\n}\n\nfunction createFiberFromProfiler(pendingProps, mode, lanes, key) {\n  if (__DEV__) {\n    if (typeof pendingProps.id !== 'string') {\n      console.error('Profiler must specify an \"id\" of type `string` as a prop. Received the type `%s` instead.', typeof pendingProps.id);\n    }\n  }\n\n  const fiber = createFiber(Profiler, pendingProps, key, mode | ProfileMode);\n  fiber.elementType = REACT_PROFILER_TYPE;\n  fiber.lanes = lanes;\n\n  if (enableProfilerTimer) {\n    fiber.stateNode = {\n      effectDuration: 0,\n      passiveEffectDuration: 0\n    };\n  }\n\n  return fiber;\n}\n\nexport function createFiberFromSuspense(pendingProps, mode, lanes, key) {\n  const fiber = createFiber(SuspenseComponent, pendingProps, key, mode);\n  fiber.elementType = REACT_SUSPENSE_TYPE;\n  fiber.lanes = lanes;\n  return fiber;\n}\nexport function createFiberFromSuspenseList(pendingProps, mode, lanes, key) {\n  const fiber = createFiber(SuspenseListComponent, pendingProps, key, mode);\n  fiber.elementType = REACT_SUSPENSE_LIST_TYPE;\n  fiber.lanes = lanes;\n  return fiber;\n}\nexport function createFiberFromOffscreen(pendingProps, mode, lanes, key) {\n  const fiber = createFiber(OffscreenComponent, pendingProps, key, mode);\n  fiber.elementType = REACT_OFFSCREEN_TYPE;\n  fiber.lanes = lanes;\n  const primaryChildInstance = {\n    _visibility: OffscreenVisible,\n    _pendingVisibility: OffscreenVisible,\n    _pendingMarkers: null,\n    _retryCache: null,\n    _transitions: null,\n    _current: null,\n    detach: () => detachOffscreenInstance(primaryChildInstance),\n    attach: () => attachOffscreenInstance(primaryChildInstance)\n  };\n  fiber.stateNode = primaryChildInstance;\n  return fiber;\n}\nexport function createFiberFromLegacyHidden(pendingProps, mode, lanes, key) {\n  const fiber = createFiber(LegacyHiddenComponent, pendingProps, key, mode);\n  fiber.elementType = REACT_LEGACY_HIDDEN_TYPE;\n  fiber.lanes = lanes; // Adding a stateNode for legacy hidden because it's currently using\n  // the offscreen implementation, which depends on a state node\n\n  const instance = {\n    _visibility: OffscreenVisible,\n    _pendingVisibility: OffscreenVisible,\n    _pendingMarkers: null,\n    _transitions: null,\n    _retryCache: null,\n    _current: null,\n    detach: () => detachOffscreenInstance(instance),\n    attach: () => attachOffscreenInstance(instance)\n  };\n  fiber.stateNode = instance;\n  return fiber;\n}\nexport function createFiberFromCache(pendingProps, mode, lanes, key) {\n  const fiber = createFiber(CacheComponent, pendingProps, key, mode);\n  fiber.elementType = REACT_CACHE_TYPE;\n  fiber.lanes = lanes;\n  return fiber;\n}\nexport function createFiberFromTracingMarker(pendingProps, mode, lanes, key) {\n  const fiber = createFiber(TracingMarkerComponent, pendingProps, key, mode);\n  fiber.elementType = REACT_TRACING_MARKER_TYPE;\n  fiber.lanes = lanes;\n  const tracingMarkerInstance = {\n    tag: TransitionTracingMarker,\n    transitions: null,\n    pendingBoundaries: null,\n    aborts: null,\n    name: pendingProps.name\n  };\n  fiber.stateNode = tracingMarkerInstance;\n  return fiber;\n}\nexport function createFiberFromText(content, mode, lanes) {\n  const fiber = createFiber(HostText, content, null, mode);\n  fiber.lanes = lanes;\n  return fiber;\n}\nexport function createFiberFromHostInstanceForDeletion() {\n  const fiber = createFiber(HostComponent, null, null, NoMode);\n  fiber.elementType = 'DELETED';\n  return fiber;\n}\nexport function createFiberFromDehydratedFragment(dehydratedNode) {\n  const fiber = createFiber(DehydratedFragment, null, null, NoMode);\n  fiber.stateNode = dehydratedNode;\n  return fiber;\n}\nexport function createFiberFromPortal(portal, mode, lanes) {\n  const pendingProps = portal.children !== null ? portal.children : [];\n  const fiber = createFiber(HostPortal, pendingProps, portal.key, mode);\n  fiber.lanes = lanes;\n  fiber.stateNode = {\n    containerInfo: portal.containerInfo,\n    pendingChildren: null,\n    // Used by persistent updates\n    implementation: portal.implementation\n  };\n  return fiber;\n} // Used for stashing WIP properties to replay failed work in DEV.\n\nexport function assignFiberPropertiesInDEV(target, source) {\n  if (target === null) {\n    // This Fiber's initial properties will always be overwritten.\n    // We only use a Fiber to ensure the same hidden class so DEV isn't slow.\n    target = createFiber(IndeterminateComponent, null, null, NoMode);\n  } // This is intentionally written as a list of all properties.\n  // We tried to use Object.assign() instead but this is called in\n  // the hottest path, and Object.assign() was too slow:\n  // https://github.com/facebook/react/issues/12502\n  // This code is DEV-only so size is not a concern.\n\n\n  target.tag = source.tag;\n  target.key = source.key;\n  target.elementType = source.elementType;\n  target.type = source.type;\n  target.stateNode = source.stateNode;\n  target.return = source.return;\n  target.child = source.child;\n  target.sibling = source.sibling;\n  target.index = source.index;\n  target.ref = source.ref;\n  target.refCleanup = source.refCleanup;\n  target.pendingProps = source.pendingProps;\n  target.memoizedProps = source.memoizedProps;\n  target.updateQueue = source.updateQueue;\n  target.memoizedState = source.memoizedState;\n  target.dependencies = source.dependencies;\n  target.mode = source.mode;\n  target.flags = source.flags;\n  target.subtreeFlags = source.subtreeFlags;\n  target.deletions = source.deletions;\n  target.lanes = source.lanes;\n  target.childLanes = source.childLanes;\n  target.alternate = source.alternate;\n\n  if (enableProfilerTimer) {\n    target.actualDuration = source.actualDuration;\n    target.actualStartTime = source.actualStartTime;\n    target.selfBaseDuration = source.selfBaseDuration;\n    target.treeBaseDuration = source.treeBaseDuration;\n  }\n\n  target._debugSource = source._debugSource;\n  target._debugOwner = source._debugOwner;\n  target._debugNeedsRemount = source._debugNeedsRemount;\n  target._debugHookTypes = source._debugHookTypes;\n  return target;\n}","map":{"version":3,"sources":["/Users/bytedance/Desktop/sourceCodeReading/react-code/src/react/packages/react-reconciler/src/ReactFiber.js"],"names":["supportsResources","supportsSingletons","isHostResourceType","isHostSingletonType","createRootStrictEffectsByDefault","enableCache","enableProfilerTimer","enableScopeAPI","enableLegacyHidden","enableSyncDefaultUpdates","allowConcurrentByDefault","enableTransitionTracing","enableDebugTracing","enableFloat","enableHostSingletons","NoFlags","Placement","StaticMask","ConcurrentRoot","IndeterminateComponent","ClassComponent","HostRoot","HostComponent","HostText","HostPortal","HostResource","HostSingleton","ForwardRef","Fragment","Mode","ContextProvider","ContextConsumer","Profiler","SuspenseComponent","SuspenseListComponent","DehydratedFragment","FunctionComponent","MemoComponent","SimpleMemoComponent","LazyComponent","ScopeComponent","OffscreenComponent","LegacyHiddenComponent","CacheComponent","TracingMarkerComponent","OffscreenVisible","getComponentNameFromFiber","isDevToolsPresent","resolveClassForHotReloading","resolveFunctionForHotReloading","resolveForwardRefForHotReloading","NoLanes","NoMode","ConcurrentMode","DebugTracingMode","ProfileMode","StrictLegacyMode","StrictEffectsMode","ConcurrentUpdatesByDefaultMode","REACT_FORWARD_REF_TYPE","REACT_FRAGMENT_TYPE","REACT_DEBUG_TRACING_MODE_TYPE","REACT_STRICT_MODE_TYPE","REACT_PROFILER_TYPE","REACT_PROVIDER_TYPE","REACT_CONTEXT_TYPE","REACT_SUSPENSE_TYPE","REACT_SUSPENSE_LIST_TYPE","REACT_MEMO_TYPE","REACT_LAZY_TYPE","REACT_SCOPE_TYPE","REACT_OFFSCREEN_TYPE","REACT_LEGACY_HIDDEN_TYPE","REACT_CACHE_TYPE","REACT_TRACING_MARKER_TYPE","TransitionTracingMarker","detachOffscreenInstance","attachOffscreenInstance","getHostContext","hasBadMapPolyfill","__DEV__","nonExtensibleObject","Object","preventExtensions","Map","Set","e","FiberNode","tag","pendingProps","key","mode","elementType","type","stateNode","return","child","sibling","index","ref","refCleanup","memoizedProps","updateQueue","memoizedState","dependencies","flags","subtreeFlags","deletions","lanes","childLanes","alternate","actualDuration","Number","NaN","actualStartTime","selfBaseDuration","treeBaseDuration","_debugSource","_debugOwner","_debugNeedsRemount","_debugHookTypes","createFiber","shouldConstruct","Component","prototype","isReactComponent","isSimpleFunctionComponent","defaultProps","undefined","resolveLazyComponentTag","$$typeof","createWorkInProgress","current","workInProgress","currentDependencies","firstContext","resetWorkInProgress","renderLanes","createHostRootFiber","isStrictMode","concurrentUpdatesByDefaultOverride","createFiberFromTypeAndProps","owner","fiberTag","resolvedType","hostContext","getTag","createFiberFromFragment","children","createFiberFromProfiler","createFiberFromSuspense","createFiberFromSuspenseList","createFiberFromOffscreen","createFiberFromLegacyHidden","createFiberFromScope","createFiberFromCache","createFiberFromTracingMarker","info","keys","length","ownerName","Error","fiber","createFiberFromElement","element","_owner","props","_source","elements","scope","id","console","error","effectDuration","passiveEffectDuration","primaryChildInstance","_visibility","_pendingVisibility","_pendingMarkers","_retryCache","_transitions","_current","detach","attach","instance","tracingMarkerInstance","transitions","pendingBoundaries","aborts","name","createFiberFromText","content","createFiberFromHostInstanceForDeletion","createFiberFromDehydratedFragment","dehydratedNode","createFiberFromPortal","portal","containerInfo","pendingChildren","implementation","assignFiberPropertiesInDEV","target","source"],"mappings":"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","sourcesContent":["/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nimport type {ReactElement} from 'shared/ReactElementType';\nimport type {ReactFragment, ReactPortal, ReactScope} from 'shared/ReactTypes';\nimport type {Fiber} from './ReactInternalTypes';\nimport type {RootTag} from './ReactRootTags';\nimport type {WorkTag} from './ReactWorkTags';\nimport type {TypeOfMode} from './ReactTypeOfMode';\nimport type {Lanes} from './ReactFiberLane';\nimport type {SuspenseInstance} from './ReactFiberHostConfig';\nimport type {\n  OffscreenProps,\n  OffscreenInstance,\n} from './ReactFiberOffscreenComponent';\nimport type {TracingMarkerInstance} from './ReactFiberTracingMarkerComponent';\n\nimport {\n  supportsResources,\n  supportsSingletons,\n  isHostResourceType,\n  isHostSingletonType,\n} from './ReactFiberHostConfig';\nimport {\n  createRootStrictEffectsByDefault,\n  enableCache,\n  enableProfilerTimer,\n  enableScopeAPI,\n  enableLegacyHidden,\n  enableSyncDefaultUpdates,\n  allowConcurrentByDefault,\n  enableTransitionTracing,\n  enableDebugTracing,\n  enableFloat,\n  enableHostSingletons,\n} from 'shared/ReactFeatureFlags';\nimport {NoFlags, Placement, StaticMask} from './ReactFiberFlags';\nimport {ConcurrentRoot} from './ReactRootTags';\nimport {\n  IndeterminateComponent,\n  ClassComponent,\n  HostRoot,\n  HostComponent,\n  HostText,\n  HostPortal,\n  HostResource,\n  HostSingleton,\n  ForwardRef,\n  Fragment,\n  Mode,\n  ContextProvider,\n  ContextConsumer,\n  Profiler,\n  SuspenseComponent,\n  SuspenseListComponent,\n  DehydratedFragment,\n  FunctionComponent,\n  MemoComponent,\n  SimpleMemoComponent,\n  LazyComponent,\n  ScopeComponent,\n  OffscreenComponent,\n  LegacyHiddenComponent,\n  CacheComponent,\n  TracingMarkerComponent,\n} from './ReactWorkTags';\nimport {OffscreenVisible} from './ReactFiberOffscreenComponent';\nimport getComponentNameFromFiber from 'react-reconciler/src/getComponentNameFromFiber';\nimport {isDevToolsPresent} from './ReactFiberDevToolsHook';\nimport {\n  resolveClassForHotReloading,\n  resolveFunctionForHotReloading,\n  resolveForwardRefForHotReloading,\n} from './ReactFiberHotReloading';\nimport {NoLanes} from './ReactFiberLane';\nimport {\n  NoMode,\n  ConcurrentMode,\n  DebugTracingMode,\n  ProfileMode,\n  StrictLegacyMode,\n  StrictEffectsMode,\n  ConcurrentUpdatesByDefaultMode,\n} from './ReactTypeOfMode';\nimport {\n  REACT_FORWARD_REF_TYPE,\n  REACT_FRAGMENT_TYPE,\n  REACT_DEBUG_TRACING_MODE_TYPE,\n  REACT_STRICT_MODE_TYPE,\n  REACT_PROFILER_TYPE,\n  REACT_PROVIDER_TYPE,\n  REACT_CONTEXT_TYPE,\n  REACT_SUSPENSE_TYPE,\n  REACT_SUSPENSE_LIST_TYPE,\n  REACT_MEMO_TYPE,\n  REACT_LAZY_TYPE,\n  REACT_SCOPE_TYPE,\n  REACT_OFFSCREEN_TYPE,\n  REACT_LEGACY_HIDDEN_TYPE,\n  REACT_CACHE_TYPE,\n  REACT_TRACING_MARKER_TYPE,\n} from 'shared/ReactSymbols';\nimport {TransitionTracingMarker} from './ReactFiberTracingMarkerComponent';\nimport {\n  detachOffscreenInstance,\n  attachOffscreenInstance,\n} from './ReactFiberCommitWork';\nimport {getHostContext} from './ReactFiberHostContext';\n\nexport type {Fiber};\n\nlet hasBadMapPolyfill;\n\nif (__DEV__) {\n  hasBadMapPolyfill = false;\n  try {\n    const nonExtensibleObject = Object.preventExtensions({});\n    /* eslint-disable no-new */\n    new Map([[nonExtensibleObject, null]]);\n    new Set([nonExtensibleObject]);\n    /* eslint-enable no-new */\n  } catch (e) {\n    // TODO: Consider warning about bad polyfills\n    hasBadMapPolyfill = true;\n  }\n}\n\nfunction FiberNode(\n  tag: WorkTag,\n  pendingProps: mixed,\n  key: null | string,\n  mode: TypeOfMode,\n) {\n  // Instance\n  this.tag = tag;\n  this.key = key;\n  this.elementType = null;\n  this.type = null;\n  this.stateNode = null;\n\n  // Fiber\n  this.return = null;\n  this.child = null;\n  this.sibling = null;\n  this.index = 0;\n\n  this.ref = null;\n  this.refCleanup = null;\n\n  this.pendingProps = pendingProps;\n  this.memoizedProps = null;\n  this.updateQueue = null;\n  this.memoizedState = null;\n  this.dependencies = null;\n\n  this.mode = mode;\n\n  // Effects\n  this.flags = NoFlags;\n  this.subtreeFlags = NoFlags;\n  this.deletions = null;\n\n  this.lanes = NoLanes;\n  this.childLanes = NoLanes;\n\n  this.alternate = null;\n\n  if (enableProfilerTimer) {\n    // Note: The following is done to avoid a v8 performance cliff.\n    //\n    // Initializing the fields below to smis and later updating them with\n    // double values will cause Fibers to end up having separate shapes.\n    // This behavior/bug has something to do with Object.preventExtension().\n    // Fortunately this only impacts DEV builds.\n    // Unfortunately it makes React unusably slow for some applications.\n    // To work around this, initialize the fields below with doubles.\n    //\n    // Learn more about this here:\n    // https://github.com/facebook/react/issues/14365\n    // https://bugs.chromium.org/p/v8/issues/detail?id=8538\n    this.actualDuration = Number.NaN;\n    this.actualStartTime = Number.NaN;\n    this.selfBaseDuration = Number.NaN;\n    this.treeBaseDuration = Number.NaN;\n\n    // It's okay to replace the initial doubles with smis after initialization.\n    // This won't trigger the performance cliff mentioned above,\n    // and it simplifies other profiler code (including DevTools).\n    this.actualDuration = 0;\n    this.actualStartTime = -1;\n    this.selfBaseDuration = 0;\n    this.treeBaseDuration = 0;\n  }\n\n  if (__DEV__) {\n    // This isn't directly used but is handy for debugging internals:\n\n    this._debugSource = null;\n    this._debugOwner = null;\n    this._debugNeedsRemount = false;\n    this._debugHookTypes = null;\n    if (!hasBadMapPolyfill && typeof Object.preventExtensions === 'function') {\n      Object.preventExtensions(this);\n    }\n  }\n}\n\n// This is a constructor function, rather than a POJO constructor, still\n// please ensure we do the following:\n// 1) Nobody should add any instance methods on this. Instance methods can be\n//    more difficult to predict when they get optimized and they are almost\n//    never inlined properly in static compilers.\n// 2) Nobody should rely on `instanceof Fiber` for type testing. We should\n//    always know when it is a fiber.\n// 3) We might want to experiment with using numeric keys since they are easier\n//    to optimize in a non-JIT environment.\n// 4) We can easily go from a constructor to a createFiber object literal if that\n//    is faster.\n// 5) It should be easy to port this to a C struct and keep a C implementation\n//    compatible.\nconst createFiber = function(\n  tag: WorkTag,\n  pendingProps: mixed,\n  key: null | string,\n  mode: TypeOfMode,\n): Fiber {\n  // $FlowFixMe: the shapes are exact here but Flow doesn't like constructors\n  return new FiberNode(tag, pendingProps, key, mode);\n};\n\nfunction shouldConstruct(Component: Function) {\n  const prototype = Component.prototype;\n  return !!(prototype && prototype.isReactComponent);\n}\n\nexport function isSimpleFunctionComponent(type: any): boolean {\n  return (\n    typeof type === 'function' &&\n    !shouldConstruct(type) &&\n    type.defaultProps === undefined\n  );\n}\n\nexport function resolveLazyComponentTag(Component: Function): WorkTag {\n  if (typeof Component === 'function') {\n    return shouldConstruct(Component) ? ClassComponent : FunctionComponent;\n  } else if (Component !== undefined && Component !== null) {\n    const $$typeof = Component.$$typeof;\n    if ($$typeof === REACT_FORWARD_REF_TYPE) {\n      return ForwardRef;\n    }\n    if ($$typeof === REACT_MEMO_TYPE) {\n      return MemoComponent;\n    }\n  }\n  return IndeterminateComponent;\n}\n\n// This is used to create an alternate fiber to do work on.\nexport function createWorkInProgress(current: Fiber, pendingProps: any): Fiber {\n  let workInProgress = current.alternate;\n  if (workInProgress === null) {\n    // We use a double buffering pooling technique because we know that we'll\n    // only ever need at most two versions of a tree. We pool the \"other\" unused\n    // node that we're free to reuse. This is lazily created to avoid allocating\n    // extra objects for things that are never updated. It also allow us to\n    // reclaim the extra memory if needed.\n    workInProgress = createFiber(\n      current.tag,\n      pendingProps,\n      current.key,\n      current.mode,\n    );\n    workInProgress.elementType = current.elementType;\n    workInProgress.type = current.type;\n    workInProgress.stateNode = current.stateNode;\n\n    if (__DEV__) {\n      // DEV-only fields\n\n      workInProgress._debugSource = current._debugSource;\n      workInProgress._debugOwner = current._debugOwner;\n      workInProgress._debugHookTypes = current._debugHookTypes;\n    }\n\n    workInProgress.alternate = current;\n    current.alternate = workInProgress;\n  } else {\n    workInProgress.pendingProps = pendingProps;\n    // Needed because Blocks store data on type.\n    workInProgress.type = current.type;\n\n    // We already have an alternate.\n    // Reset the effect tag.\n    workInProgress.flags = NoFlags;\n\n    // The effects are no longer valid.\n    workInProgress.subtreeFlags = NoFlags;\n    workInProgress.deletions = null;\n\n    if (enableProfilerTimer) {\n      // We intentionally reset, rather than copy, actualDuration & actualStartTime.\n      // This prevents time from endlessly accumulating in new commits.\n      // This has the downside of resetting values for different priority renders,\n      // But works for yielding (the common case) and should support resuming.\n      workInProgress.actualDuration = 0;\n      workInProgress.actualStartTime = -1;\n    }\n  }\n\n  // Reset all effects except static ones.\n  // Static effects are not specific to a render.\n  workInProgress.flags = current.flags & StaticMask;\n  workInProgress.childLanes = current.childLanes;\n  workInProgress.lanes = current.lanes;\n\n  workInProgress.child = current.child;\n  workInProgress.memoizedProps = current.memoizedProps;\n  workInProgress.memoizedState = current.memoizedState;\n  workInProgress.updateQueue = current.updateQueue;\n\n  // Clone the dependencies object. This is mutated during the render phase, so\n  // it cannot be shared with the current fiber.\n  const currentDependencies = current.dependencies;\n  workInProgress.dependencies =\n    currentDependencies === null\n      ? null\n      : {\n          lanes: currentDependencies.lanes,\n          firstContext: currentDependencies.firstContext,\n        };\n\n  // These will be overridden during the parent's reconciliation\n  workInProgress.sibling = current.sibling;\n  workInProgress.index = current.index;\n  workInProgress.ref = current.ref;\n  workInProgress.refCleanup = current.refCleanup;\n\n  if (enableProfilerTimer) {\n    workInProgress.selfBaseDuration = current.selfBaseDuration;\n    workInProgress.treeBaseDuration = current.treeBaseDuration;\n  }\n\n  if (__DEV__) {\n    workInProgress._debugNeedsRemount = current._debugNeedsRemount;\n    switch (workInProgress.tag) {\n      case IndeterminateComponent:\n      case FunctionComponent:\n      case SimpleMemoComponent:\n        workInProgress.type = resolveFunctionForHotReloading(current.type);\n        break;\n      case ClassComponent:\n        workInProgress.type = resolveClassForHotReloading(current.type);\n        break;\n      case ForwardRef:\n        workInProgress.type = resolveForwardRefForHotReloading(current.type);\n        break;\n      default:\n        break;\n    }\n  }\n\n  return workInProgress;\n}\n\n// Used to reuse a Fiber for a second pass.\nexport function resetWorkInProgress(\n  workInProgress: Fiber,\n  renderLanes: Lanes,\n): Fiber {\n  // This resets the Fiber to what createFiber or createWorkInProgress would\n  // have set the values to before during the first pass. Ideally this wouldn't\n  // be necessary but unfortunately many code paths reads from the workInProgress\n  // when they should be reading from current and writing to workInProgress.\n\n  // We assume pendingProps, index, key, ref, return are still untouched to\n  // avoid doing another reconciliation.\n\n  // Reset the effect flags but keep any Placement tags, since that's something\n  // that child fiber is setting, not the reconciliation.\n  workInProgress.flags &= StaticMask | Placement;\n\n  // The effects are no longer valid.\n\n  const current = workInProgress.alternate;\n  if (current === null) {\n    // Reset to createFiber's initial values.\n    workInProgress.childLanes = NoLanes;\n    workInProgress.lanes = renderLanes;\n\n    workInProgress.child = null;\n    workInProgress.subtreeFlags = NoFlags;\n    workInProgress.memoizedProps = null;\n    workInProgress.memoizedState = null;\n    workInProgress.updateQueue = null;\n\n    workInProgress.dependencies = null;\n\n    workInProgress.stateNode = null;\n\n    if (enableProfilerTimer) {\n      // Note: We don't reset the actualTime counts. It's useful to accumulate\n      // actual time across multiple render passes.\n      workInProgress.selfBaseDuration = 0;\n      workInProgress.treeBaseDuration = 0;\n    }\n  } else {\n    // Reset to the cloned values that createWorkInProgress would've.\n    workInProgress.childLanes = current.childLanes;\n    workInProgress.lanes = current.lanes;\n\n    workInProgress.child = current.child;\n    workInProgress.subtreeFlags = NoFlags;\n    workInProgress.deletions = null;\n    workInProgress.memoizedProps = current.memoizedProps;\n    workInProgress.memoizedState = current.memoizedState;\n    workInProgress.updateQueue = current.updateQueue;\n    // Needed because Blocks store data on type.\n    workInProgress.type = current.type;\n\n    // Clone the dependencies object. This is mutated during the render phase, so\n    // it cannot be shared with the current fiber.\n    const currentDependencies = current.dependencies;\n    workInProgress.dependencies =\n      currentDependencies === null\n        ? null\n        : {\n            lanes: currentDependencies.lanes,\n            firstContext: currentDependencies.firstContext,\n          };\n\n    if (enableProfilerTimer) {\n      // Note: We don't reset the actualTime counts. It's useful to accumulate\n      // actual time across multiple render passes.\n      workInProgress.selfBaseDuration = current.selfBaseDuration;\n      workInProgress.treeBaseDuration = current.treeBaseDuration;\n    }\n  }\n\n  return workInProgress;\n}\n\nexport function createHostRootFiber(\n  tag: RootTag,\n  isStrictMode: boolean,\n  concurrentUpdatesByDefaultOverride: null | boolean,\n): Fiber {\n  let mode;\n  if (tag === ConcurrentRoot) {\n    mode = ConcurrentMode;\n    if (isStrictMode === true || createRootStrictEffectsByDefault) {\n      mode |= StrictLegacyMode | StrictEffectsMode;\n    }\n    if (\n      // We only use this flag for our repo tests to check both behaviors.\n      // TODO: Flip this flag and rename it something like \"forceConcurrentByDefaultForTesting\"\n      !enableSyncDefaultUpdates ||\n      // Only for internal experiments.\n      (allowConcurrentByDefault && concurrentUpdatesByDefaultOverride)\n    ) {\n      mode |= ConcurrentUpdatesByDefaultMode;\n    }\n  } else {\n    mode = NoMode;\n  }\n\n  if (enableProfilerTimer && isDevToolsPresent) {\n    // Always collect profile timings when DevTools are present.\n    // This enables DevTools to start capturing timing at any point–\n    // Without some nodes in the tree having empty base times.\n    mode |= ProfileMode;\n  }\n\n  return createFiber(HostRoot, null, null, mode);\n}\n\nexport function createFiberFromTypeAndProps(\n  type: any, // React$ElementType\n  key: null | string,\n  pendingProps: any,\n  owner: null | Fiber,\n  mode: TypeOfMode,\n  lanes: Lanes,\n): Fiber {\n  let fiberTag = IndeterminateComponent;\n  // The resolved type is set if we know what the final type will be. I.e. it's not lazy.\n  let resolvedType = type;\n  if (typeof type === 'function') {\n    if (shouldConstruct(type)) {\n      fiberTag = ClassComponent;\n      if (__DEV__) {\n        resolvedType = resolveClassForHotReloading(resolvedType);\n      }\n    } else {\n      if (__DEV__) {\n        resolvedType = resolveFunctionForHotReloading(resolvedType);\n      }\n    }\n  } else if (typeof type === 'string') {\n    if (\n      enableFloat &&\n      supportsResources &&\n      enableHostSingletons &&\n      supportsSingletons\n    ) {\n      const hostContext = getHostContext();\n      fiberTag = isHostResourceType(type, pendingProps, hostContext)\n        ? HostResource\n        : isHostSingletonType(type)\n        ? HostSingleton\n        : HostComponent;\n    } else if (enableFloat && supportsResources) {\n      const hostContext = getHostContext();\n      fiberTag = isHostResourceType(type, pendingProps, hostContext)\n        ? HostResource\n        : HostComponent;\n    } else if (enableHostSingletons && supportsSingletons) {\n      fiberTag = isHostSingletonType(type) ? HostSingleton : HostComponent;\n    } else {\n      fiberTag = HostComponent;\n    }\n  } else {\n    getTag: switch (type) {\n      case REACT_FRAGMENT_TYPE:\n        return createFiberFromFragment(pendingProps.children, mode, lanes, key);\n      case REACT_STRICT_MODE_TYPE:\n        fiberTag = Mode;\n        mode |= StrictLegacyMode;\n        if ((mode & ConcurrentMode) !== NoMode) {\n          // Strict effects should never run on legacy roots\n          mode |= StrictEffectsMode;\n        }\n        break;\n      case REACT_PROFILER_TYPE:\n        return createFiberFromProfiler(pendingProps, mode, lanes, key);\n      case REACT_SUSPENSE_TYPE:\n        return createFiberFromSuspense(pendingProps, mode, lanes, key);\n      case REACT_SUSPENSE_LIST_TYPE:\n        return createFiberFromSuspenseList(pendingProps, mode, lanes, key);\n      case REACT_OFFSCREEN_TYPE:\n        return createFiberFromOffscreen(pendingProps, mode, lanes, key);\n      case REACT_LEGACY_HIDDEN_TYPE:\n        if (enableLegacyHidden) {\n          return createFiberFromLegacyHidden(pendingProps, mode, lanes, key);\n        }\n      // eslint-disable-next-line no-fallthrough\n      case REACT_SCOPE_TYPE:\n        if (enableScopeAPI) {\n          return createFiberFromScope(type, pendingProps, mode, lanes, key);\n        }\n      // eslint-disable-next-line no-fallthrough\n      case REACT_CACHE_TYPE:\n        if (enableCache) {\n          return createFiberFromCache(pendingProps, mode, lanes, key);\n        }\n      // eslint-disable-next-line no-fallthrough\n      case REACT_TRACING_MARKER_TYPE:\n        if (enableTransitionTracing) {\n          return createFiberFromTracingMarker(pendingProps, mode, lanes, key);\n        }\n      // eslint-disable-next-line no-fallthrough\n      case REACT_DEBUG_TRACING_MODE_TYPE:\n        if (enableDebugTracing) {\n          fiberTag = Mode;\n          mode |= DebugTracingMode;\n          break;\n        }\n      // eslint-disable-next-line no-fallthrough\n      default: {\n        if (typeof type === 'object' && type !== null) {\n          switch (type.$$typeof) {\n            case REACT_PROVIDER_TYPE:\n              fiberTag = ContextProvider;\n              break getTag;\n            case REACT_CONTEXT_TYPE:\n              // This is a consumer\n              fiberTag = ContextConsumer;\n              break getTag;\n            case REACT_FORWARD_REF_TYPE:\n              fiberTag = ForwardRef;\n              if (__DEV__) {\n                resolvedType = resolveForwardRefForHotReloading(resolvedType);\n              }\n              break getTag;\n            case REACT_MEMO_TYPE:\n              fiberTag = MemoComponent;\n              break getTag;\n            case REACT_LAZY_TYPE:\n              fiberTag = LazyComponent;\n              resolvedType = null;\n              break getTag;\n          }\n        }\n        let info = '';\n        if (__DEV__) {\n          if (\n            type === undefined ||\n            (typeof type === 'object' &&\n              type !== null &&\n              Object.keys(type).length === 0)\n          ) {\n            info +=\n              ' You likely forgot to export your component from the file ' +\n              \"it's defined in, or you might have mixed up default and \" +\n              'named imports.';\n          }\n          const ownerName = owner ? getComponentNameFromFiber(owner) : null;\n          if (ownerName) {\n            info += '\\n\\nCheck the render method of `' + ownerName + '`.';\n          }\n        }\n\n        throw new Error(\n          'Element type is invalid: expected a string (for built-in ' +\n            'components) or a class/function (for composite components) ' +\n            `but got: ${type == null ? type : typeof type}.${info}`,\n        );\n      }\n    }\n  }\n\n  const fiber = createFiber(fiberTag, pendingProps, key, mode);\n  fiber.elementType = type;\n  fiber.type = resolvedType;\n  fiber.lanes = lanes;\n\n  if (__DEV__) {\n    fiber._debugOwner = owner;\n  }\n\n  return fiber;\n}\n\nexport function createFiberFromElement(\n  element: ReactElement,\n  mode: TypeOfMode,\n  lanes: Lanes,\n): Fiber {\n  let owner = null;\n  if (__DEV__) {\n    owner = element._owner;\n  }\n  const type = element.type;\n  const key = element.key;\n  const pendingProps = element.props;\n  const fiber = createFiberFromTypeAndProps(\n    type,\n    key,\n    pendingProps,\n    owner,\n    mode,\n    lanes,\n  );\n  if (__DEV__) {\n    fiber._debugSource = element._source;\n    fiber._debugOwner = element._owner;\n  }\n  return fiber;\n}\n\nexport function createFiberFromFragment(\n  elements: ReactFragment,\n  mode: TypeOfMode,\n  lanes: Lanes,\n  key: null | string,\n): Fiber {\n  const fiber = createFiber(Fragment, elements, key, mode);\n  fiber.lanes = lanes;\n  return fiber;\n}\n\nfunction createFiberFromScope(\n  scope: ReactScope,\n  pendingProps: any,\n  mode: TypeOfMode,\n  lanes: Lanes,\n  key: null | string,\n) {\n  const fiber = createFiber(ScopeComponent, pendingProps, key, mode);\n  fiber.type = scope;\n  fiber.elementType = scope;\n  fiber.lanes = lanes;\n  return fiber;\n}\n\nfunction createFiberFromProfiler(\n  pendingProps: any,\n  mode: TypeOfMode,\n  lanes: Lanes,\n  key: null | string,\n): Fiber {\n  if (__DEV__) {\n    if (typeof pendingProps.id !== 'string') {\n      console.error(\n        'Profiler must specify an \"id\" of type `string` as a prop. Received the type `%s` instead.',\n        typeof pendingProps.id,\n      );\n    }\n  }\n\n  const fiber = createFiber(Profiler, pendingProps, key, mode | ProfileMode);\n  fiber.elementType = REACT_PROFILER_TYPE;\n  fiber.lanes = lanes;\n\n  if (enableProfilerTimer) {\n    fiber.stateNode = {\n      effectDuration: 0,\n      passiveEffectDuration: 0,\n    };\n  }\n\n  return fiber;\n}\n\nexport function createFiberFromSuspense(\n  pendingProps: any,\n  mode: TypeOfMode,\n  lanes: Lanes,\n  key: null | string,\n): Fiber {\n  const fiber = createFiber(SuspenseComponent, pendingProps, key, mode);\n  fiber.elementType = REACT_SUSPENSE_TYPE;\n  fiber.lanes = lanes;\n  return fiber;\n}\n\nexport function createFiberFromSuspenseList(\n  pendingProps: any,\n  mode: TypeOfMode,\n  lanes: Lanes,\n  key: null | string,\n): Fiber {\n  const fiber = createFiber(SuspenseListComponent, pendingProps, key, mode);\n  fiber.elementType = REACT_SUSPENSE_LIST_TYPE;\n  fiber.lanes = lanes;\n  return fiber;\n}\n\nexport function createFiberFromOffscreen(\n  pendingProps: OffscreenProps,\n  mode: TypeOfMode,\n  lanes: Lanes,\n  key: null | string,\n): Fiber {\n  const fiber = createFiber(OffscreenComponent, pendingProps, key, mode);\n  fiber.elementType = REACT_OFFSCREEN_TYPE;\n  fiber.lanes = lanes;\n  const primaryChildInstance: OffscreenInstance = {\n    _visibility: OffscreenVisible,\n    _pendingVisibility: OffscreenVisible,\n    _pendingMarkers: null,\n    _retryCache: null,\n    _transitions: null,\n    _current: null,\n    detach: () => detachOffscreenInstance(primaryChildInstance),\n    attach: () => attachOffscreenInstance(primaryChildInstance),\n  };\n  fiber.stateNode = primaryChildInstance;\n  return fiber;\n}\n\nexport function createFiberFromLegacyHidden(\n  pendingProps: OffscreenProps,\n  mode: TypeOfMode,\n  lanes: Lanes,\n  key: null | string,\n): Fiber {\n  const fiber = createFiber(LegacyHiddenComponent, pendingProps, key, mode);\n  fiber.elementType = REACT_LEGACY_HIDDEN_TYPE;\n  fiber.lanes = lanes;\n  // Adding a stateNode for legacy hidden because it's currently using\n  // the offscreen implementation, which depends on a state node\n  const instance: OffscreenInstance = {\n    _visibility: OffscreenVisible,\n    _pendingVisibility: OffscreenVisible,\n    _pendingMarkers: null,\n    _transitions: null,\n    _retryCache: null,\n    _current: null,\n    detach: () => detachOffscreenInstance(instance),\n    attach: () => attachOffscreenInstance(instance),\n  };\n  fiber.stateNode = instance;\n  return fiber;\n}\n\nexport function createFiberFromCache(\n  pendingProps: any,\n  mode: TypeOfMode,\n  lanes: Lanes,\n  key: null | string,\n): Fiber {\n  const fiber = createFiber(CacheComponent, pendingProps, key, mode);\n  fiber.elementType = REACT_CACHE_TYPE;\n  fiber.lanes = lanes;\n  return fiber;\n}\n\nexport function createFiberFromTracingMarker(\n  pendingProps: any,\n  mode: TypeOfMode,\n  lanes: Lanes,\n  key: null | string,\n): Fiber {\n  const fiber = createFiber(TracingMarkerComponent, pendingProps, key, mode);\n  fiber.elementType = REACT_TRACING_MARKER_TYPE;\n  fiber.lanes = lanes;\n  const tracingMarkerInstance: TracingMarkerInstance = {\n    tag: TransitionTracingMarker,\n    transitions: null,\n    pendingBoundaries: null,\n    aborts: null,\n    name: pendingProps.name,\n  };\n  fiber.stateNode = tracingMarkerInstance;\n  return fiber;\n}\n\nexport function createFiberFromText(\n  content: string,\n  mode: TypeOfMode,\n  lanes: Lanes,\n): Fiber {\n  const fiber = createFiber(HostText, content, null, mode);\n  fiber.lanes = lanes;\n  return fiber;\n}\n\nexport function createFiberFromHostInstanceForDeletion(): Fiber {\n  const fiber = createFiber(HostComponent, null, null, NoMode);\n  fiber.elementType = 'DELETED';\n  return fiber;\n}\n\nexport function createFiberFromDehydratedFragment(\n  dehydratedNode: SuspenseInstance,\n): Fiber {\n  const fiber = createFiber(DehydratedFragment, null, null, NoMode);\n  fiber.stateNode = dehydratedNode;\n  return fiber;\n}\n\nexport function createFiberFromPortal(\n  portal: ReactPortal,\n  mode: TypeOfMode,\n  lanes: Lanes,\n): Fiber {\n  const pendingProps = portal.children !== null ? portal.children : [];\n  const fiber = createFiber(HostPortal, pendingProps, portal.key, mode);\n  fiber.lanes = lanes;\n  fiber.stateNode = {\n    containerInfo: portal.containerInfo,\n    pendingChildren: null, // Used by persistent updates\n    implementation: portal.implementation,\n  };\n  return fiber;\n}\n\n// Used for stashing WIP properties to replay failed work in DEV.\nexport function assignFiberPropertiesInDEV(\n  target: Fiber | null,\n  source: Fiber,\n): Fiber {\n  if (target === null) {\n    // This Fiber's initial properties will always be overwritten.\n    // We only use a Fiber to ensure the same hidden class so DEV isn't slow.\n    target = createFiber(IndeterminateComponent, null, null, NoMode);\n  }\n\n  // This is intentionally written as a list of all properties.\n  // We tried to use Object.assign() instead but this is called in\n  // the hottest path, and Object.assign() was too slow:\n  // https://github.com/facebook/react/issues/12502\n  // This code is DEV-only so size is not a concern.\n\n  target.tag = source.tag;\n  target.key = source.key;\n  target.elementType = source.elementType;\n  target.type = source.type;\n  target.stateNode = source.stateNode;\n  target.return = source.return;\n  target.child = source.child;\n  target.sibling = source.sibling;\n  target.index = source.index;\n  target.ref = source.ref;\n  target.refCleanup = source.refCleanup;\n  target.pendingProps = source.pendingProps;\n  target.memoizedProps = source.memoizedProps;\n  target.updateQueue = source.updateQueue;\n  target.memoizedState = source.memoizedState;\n  target.dependencies = source.dependencies;\n  target.mode = source.mode;\n  target.flags = source.flags;\n  target.subtreeFlags = source.subtreeFlags;\n  target.deletions = source.deletions;\n  target.lanes = source.lanes;\n  target.childLanes = source.childLanes;\n  target.alternate = source.alternate;\n  if (enableProfilerTimer) {\n    target.actualDuration = source.actualDuration;\n    target.actualStartTime = source.actualStartTime;\n    target.selfBaseDuration = source.selfBaseDuration;\n    target.treeBaseDuration = source.treeBaseDuration;\n  }\n\n  target._debugSource = source._debugSource;\n  target._debugOwner = source._debugOwner;\n  target._debugNeedsRemount = source._debugNeedsRemount;\n  target._debugHookTypes = source._debugHookTypes;\n  return target;\n}\n"]},"metadata":{},"sourceType":"module"}