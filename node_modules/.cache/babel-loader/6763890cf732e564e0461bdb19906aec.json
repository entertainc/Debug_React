{"ast":null,"code":"/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n */\n// This exists to avoid circular dependency between ReactDOMEventReplaying\n// and DOMPluginEventSystem.\nlet currentReplayingEvent = null;\nexport function setReplayingEvent(event) {\n  if (__DEV__) {\n    if (currentReplayingEvent !== null) {\n      console.error('Expected currently replaying event to be null. This error ' + 'is likely caused by a bug in React. Please file an issue.');\n    }\n  }\n\n  currentReplayingEvent = event;\n}\nexport function resetReplayingEvent() {\n  if (__DEV__) {\n    if (currentReplayingEvent === null) {\n      console.error('Expected currently replaying event to not be null. This error ' + 'is likely caused by a bug in React. Please file an issue.');\n    }\n  }\n\n  currentReplayingEvent = null;\n}\nexport function isReplayingEvent(event) {\n  return event === currentReplayingEvent;\n}","map":{"version":3,"sources":["/Users/bytedance/Desktop/sourceCodeReading/react-code/src/react/packages/react-dom-bindings/src/events/CurrentReplayingEvent.js"],"names":["currentReplayingEvent","setReplayingEvent","event","__DEV__","console","error","resetReplayingEvent","isReplayingEvent"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AAEA,IAAIA,qBAAqB,GAAG,IAA5B;AAEA,OAAO,SAASC,iBAAT,CAA2BC,KAA3B,EAAwD;AAC7D,MAAIC,OAAJ,EAAa;AACX,QAAIH,qBAAqB,KAAK,IAA9B,EAAoC;AAClCI,MAAAA,OAAO,CAACC,KAAR,CACE,+DACE,2DAFJ;AAID;AACF;;AACDL,EAAAA,qBAAqB,GAAGE,KAAxB;AACD;AAED,OAAO,SAASI,mBAAT,GAAqC;AAC1C,MAAIH,OAAJ,EAAa;AACX,QAAIH,qBAAqB,KAAK,IAA9B,EAAoC;AAClCI,MAAAA,OAAO,CAACC,KAAR,CACE,mEACE,2DAFJ;AAID;AACF;;AACDL,EAAAA,qBAAqB,GAAG,IAAxB;AACD;AAED,OAAO,SAASO,gBAAT,CAA0BL,KAA1B,EAA0D;AAC/D,SAAOA,KAAK,KAAKF,qBAAjB;AACD","sourcesContent":["/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\nimport type {AnyNativeEvent} from '../events/PluginModuleType';\n\n// This exists to avoid circular dependency between ReactDOMEventReplaying\n// and DOMPluginEventSystem.\n\nlet currentReplayingEvent = null;\n\nexport function setReplayingEvent(event: AnyNativeEvent): void {\n  if (__DEV__) {\n    if (currentReplayingEvent !== null) {\n      console.error(\n        'Expected currently replaying event to be null. This error ' +\n          'is likely caused by a bug in React. Please file an issue.',\n      );\n    }\n  }\n  currentReplayingEvent = event;\n}\n\nexport function resetReplayingEvent(): void {\n  if (__DEV__) {\n    if (currentReplayingEvent === null) {\n      console.error(\n        'Expected currently replaying event to not be null. This error ' +\n          'is likely caused by a bug in React. Please file an issue.',\n      );\n    }\n  }\n  currentReplayingEvent = null;\n}\n\nexport function isReplayingEvent(event: AnyNativeEvent): boolean {\n  return event === currentReplayingEvent;\n}\n"]},"metadata":{},"sourceType":"module"}