{"ast":null,"code":"/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n */\nimport { isPrimaryRenderer } from './ReactFiberHostConfig';\nimport { createCursor, push, pop } from './ReactFiberStack';\nimport { ContextProvider, ClassComponent, DehydratedFragment } from './ReactWorkTags';\nimport { NoLanes, NoTimestamp, isSubsetOfLanes, includesSomeLane, mergeLanes, pickArbitraryLane } from './ReactFiberLane';\nimport { NoFlags, DidPropagateContext, NeedsPropagation } from './ReactFiberFlags';\nimport is from 'shared/objectIs';\nimport { createUpdate, ForceUpdate } from './ReactFiberClassUpdateQueue';\nimport { markWorkInProgressReceivedUpdate } from './ReactFiberBeginWork';\nimport { enableLazyContextPropagation, enableServerContext } from 'shared/ReactFeatureFlags';\nimport { REACT_SERVER_CONTEXT_DEFAULT_VALUE_NOT_LOADED } from 'shared/ReactSymbols';\nconst valueCursor = createCursor(null);\nlet rendererSigil;\n\nif (__DEV__) {\n  // Use this to detect multiple renderers using the same context\n  rendererSigil = {};\n}\n\nlet currentlyRenderingFiber = null;\nlet lastContextDependency = null;\nlet lastFullyObservedContext = null;\nlet isDisallowedContextReadInDEV = false;\nexport function resetContextDependencies() {\n  // This is called right before React yields execution, to ensure `readContext`\n  // cannot be called outside the render phase.\n  currentlyRenderingFiber = null;\n  lastContextDependency = null;\n  lastFullyObservedContext = null;\n\n  if (__DEV__) {\n    isDisallowedContextReadInDEV = false;\n  }\n}\nexport function enterDisallowedContextReadInDEV() {\n  if (__DEV__) {\n    isDisallowedContextReadInDEV = true;\n  }\n}\nexport function exitDisallowedContextReadInDEV() {\n  if (__DEV__) {\n    isDisallowedContextReadInDEV = false;\n  }\n}\nexport function pushProvider(providerFiber, context, nextValue) {\n  if (isPrimaryRenderer) {\n    push(valueCursor, context._currentValue, providerFiber);\n    context._currentValue = nextValue;\n\n    if (__DEV__) {\n      if (context._currentRenderer !== undefined && context._currentRenderer !== null && context._currentRenderer !== rendererSigil) {\n        console.error('Detected multiple renderers concurrently rendering the ' + 'same context provider. This is currently unsupported.');\n      }\n\n      context._currentRenderer = rendererSigil;\n    }\n  } else {\n    push(valueCursor, context._currentValue2, providerFiber);\n    context._currentValue2 = nextValue;\n\n    if (__DEV__) {\n      if (context._currentRenderer2 !== undefined && context._currentRenderer2 !== null && context._currentRenderer2 !== rendererSigil) {\n        console.error('Detected multiple renderers concurrently rendering the ' + 'same context provider. This is currently unsupported.');\n      }\n\n      context._currentRenderer2 = rendererSigil;\n    }\n  }\n}\nexport function popProvider(context, providerFiber) {\n  const currentValue = valueCursor.current;\n  pop(valueCursor, providerFiber);\n\n  if (isPrimaryRenderer) {\n    if (enableServerContext && currentValue === REACT_SERVER_CONTEXT_DEFAULT_VALUE_NOT_LOADED) {\n      context._currentValue = context._defaultValue;\n    } else {\n      context._currentValue = currentValue;\n    }\n  } else {\n    if (enableServerContext && currentValue === REACT_SERVER_CONTEXT_DEFAULT_VALUE_NOT_LOADED) {\n      context._currentValue2 = context._defaultValue;\n    } else {\n      context._currentValue2 = currentValue;\n    }\n  }\n}\nexport function scheduleContextWorkOnParentPath(parent, renderLanes, propagationRoot) {\n  // Update the child lanes of all the ancestors, including the alternates.\n  let node = parent;\n\n  while (node !== null) {\n    const alternate = node.alternate;\n\n    if (!isSubsetOfLanes(node.childLanes, renderLanes)) {\n      node.childLanes = mergeLanes(node.childLanes, renderLanes);\n\n      if (alternate !== null) {\n        alternate.childLanes = mergeLanes(alternate.childLanes, renderLanes);\n      }\n    } else if (alternate !== null && !isSubsetOfLanes(alternate.childLanes, renderLanes)) {\n      alternate.childLanes = mergeLanes(alternate.childLanes, renderLanes);\n    } else {// Neither alternate was updated.\n      // Normally, this would mean that the rest of the\n      // ancestor path already has sufficient priority.\n      // However, this is not necessarily true inside offscreen\n      // or fallback trees because childLanes may be inconsistent\n      // with the surroundings. This is why we continue the loop.\n    }\n\n    if (node === propagationRoot) {\n      break;\n    }\n\n    node = node.return;\n  }\n\n  if (__DEV__) {\n    if (node !== propagationRoot) {\n      console.error('Expected to find the propagation root when scheduling context work. ' + 'This error is likely caused by a bug in React. Please file an issue.');\n    }\n  }\n}\nexport function propagateContextChange(workInProgress, context, renderLanes) {\n  if (enableLazyContextPropagation) {\n    // TODO: This path is only used by Cache components. Update\n    // lazilyPropagateParentContextChanges to look for Cache components so they\n    // can take advantage of lazy propagation.\n    const forcePropagateEntireTree = true;\n    propagateContextChanges(workInProgress, [context], renderLanes, forcePropagateEntireTree);\n  } else {\n    propagateContextChange_eager(workInProgress, context, renderLanes);\n  }\n}\n\nfunction propagateContextChange_eager(workInProgress, context, renderLanes) {\n  // Only used by eager implementation\n  if (enableLazyContextPropagation) {\n    return;\n  }\n\n  let fiber = workInProgress.child;\n\n  if (fiber !== null) {\n    // Set the return pointer of the child to the work-in-progress fiber.\n    fiber.return = workInProgress;\n  }\n\n  while (fiber !== null) {\n    let nextFiber; // Visit this fiber.\n\n    const list = fiber.dependencies;\n\n    if (list !== null) {\n      nextFiber = fiber.child;\n      let dependency = list.firstContext;\n\n      while (dependency !== null) {\n        // Check if the context matches.\n        if (dependency.context === context) {\n          // Match! Schedule an update on this fiber.\n          if (fiber.tag === ClassComponent) {\n            // Schedule a force update on the work-in-progress.\n            const lane = pickArbitraryLane(renderLanes);\n            const update = createUpdate(NoTimestamp, lane);\n            update.tag = ForceUpdate; // TODO: Because we don't have a work-in-progress, this will add the\n            // update to the current fiber, too, which means it will persist even if\n            // this render is thrown away. Since it's a race condition, not sure it's\n            // worth fixing.\n            // Inlined `enqueueUpdate` to remove interleaved update check\n\n            const updateQueue = fiber.updateQueue;\n\n            if (updateQueue === null) {// Only occurs if the fiber has been unmounted.\n            } else {\n              const sharedQueue = updateQueue.shared;\n              const pending = sharedQueue.pending;\n\n              if (pending === null) {\n                // This is the first update. Create a circular list.\n                update.next = update;\n              } else {\n                update.next = pending.next;\n                pending.next = update;\n              }\n\n              sharedQueue.pending = update;\n            }\n          }\n\n          fiber.lanes = mergeLanes(fiber.lanes, renderLanes);\n          const alternate = fiber.alternate;\n\n          if (alternate !== null) {\n            alternate.lanes = mergeLanes(alternate.lanes, renderLanes);\n          }\n\n          scheduleContextWorkOnParentPath(fiber.return, renderLanes, workInProgress); // Mark the updated lanes on the list, too.\n\n          list.lanes = mergeLanes(list.lanes, renderLanes); // Since we already found a match, we can stop traversing the\n          // dependency list.\n\n          break;\n        }\n\n        dependency = dependency.next;\n      }\n    } else if (fiber.tag === ContextProvider) {\n      // Don't scan deeper if this is a matching provider\n      nextFiber = fiber.type === workInProgress.type ? null : fiber.child;\n    } else if (fiber.tag === DehydratedFragment) {\n      // If a dehydrated suspense boundary is in this subtree, we don't know\n      // if it will have any context consumers in it. The best we can do is\n      // mark it as having updates.\n      const parentSuspense = fiber.return;\n\n      if (parentSuspense === null) {\n        throw new Error('We just came from a parent so we must have had a parent. This is a bug in React.');\n      }\n\n      parentSuspense.lanes = mergeLanes(parentSuspense.lanes, renderLanes);\n      const alternate = parentSuspense.alternate;\n\n      if (alternate !== null) {\n        alternate.lanes = mergeLanes(alternate.lanes, renderLanes);\n      } // This is intentionally passing this fiber as the parent\n      // because we want to schedule this fiber as having work\n      // on its children. We'll use the childLanes on\n      // this fiber to indicate that a context has changed.\n\n\n      scheduleContextWorkOnParentPath(parentSuspense, renderLanes, workInProgress);\n      nextFiber = fiber.sibling;\n    } else {\n      // Traverse down.\n      nextFiber = fiber.child;\n    }\n\n    if (nextFiber !== null) {\n      // Set the return pointer of the child to the work-in-progress fiber.\n      nextFiber.return = fiber;\n    } else {\n      // No child. Traverse to next sibling.\n      nextFiber = fiber;\n\n      while (nextFiber !== null) {\n        if (nextFiber === workInProgress) {\n          // We're back to the root of this subtree. Exit.\n          nextFiber = null;\n          break;\n        }\n\n        const sibling = nextFiber.sibling;\n\n        if (sibling !== null) {\n          // Set the return pointer of the sibling to the work-in-progress fiber.\n          sibling.return = nextFiber.return;\n          nextFiber = sibling;\n          break;\n        } // No more siblings. Traverse up.\n\n\n        nextFiber = nextFiber.return;\n      }\n    }\n\n    fiber = nextFiber;\n  }\n}\n\nfunction propagateContextChanges(workInProgress, contexts, renderLanes, forcePropagateEntireTree) {\n  // Only used by lazy implementation\n  if (!enableLazyContextPropagation) {\n    return;\n  }\n\n  let fiber = workInProgress.child;\n\n  if (fiber !== null) {\n    // Set the return pointer of the child to the work-in-progress fiber.\n    fiber.return = workInProgress;\n  }\n\n  while (fiber !== null) {\n    let nextFiber; // Visit this fiber.\n\n    const list = fiber.dependencies;\n\n    if (list !== null) {\n      nextFiber = fiber.child;\n      let dep = list.firstContext;\n\n      findChangedDep: while (dep !== null) {\n        // Assigning these to constants to help Flow\n        const dependency = dep;\n        const consumer = fiber;\n\n        findContext: for (let i = 0; i < contexts.length; i++) {\n          const context = contexts[i]; // Check if the context matches.\n          // TODO: Compare selected values to bail out early.\n\n          if (dependency.context === context) {\n            // Match! Schedule an update on this fiber.\n            // In the lazy implementation, don't mark a dirty flag on the\n            // dependency itself. Not all changes are propagated, so we can't\n            // rely on the propagation function alone to determine whether\n            // something has changed; the consumer will check. In the future, we\n            // could add back a dirty flag as an optimization to avoid double\n            // checking, but until we have selectors it's not really worth\n            // the trouble.\n            consumer.lanes = mergeLanes(consumer.lanes, renderLanes);\n            const alternate = consumer.alternate;\n\n            if (alternate !== null) {\n              alternate.lanes = mergeLanes(alternate.lanes, renderLanes);\n            }\n\n            scheduleContextWorkOnParentPath(consumer.return, renderLanes, workInProgress);\n\n            if (!forcePropagateEntireTree) {\n              // During lazy propagation, when we find a match, we can defer\n              // propagating changes to the children, because we're going to\n              // visit them during render. We should continue propagating the\n              // siblings, though\n              nextFiber = null;\n            } // Since we already found a match, we can stop traversing the\n            // dependency list.\n\n\n            break findChangedDep;\n          }\n        }\n\n        dep = dependency.next;\n      }\n    } else if (fiber.tag === DehydratedFragment) {\n      // If a dehydrated suspense boundary is in this subtree, we don't know\n      // if it will have any context consumers in it. The best we can do is\n      // mark it as having updates.\n      const parentSuspense = fiber.return;\n\n      if (parentSuspense === null) {\n        throw new Error('We just came from a parent so we must have had a parent. This is a bug in React.');\n      }\n\n      parentSuspense.lanes = mergeLanes(parentSuspense.lanes, renderLanes);\n      const alternate = parentSuspense.alternate;\n\n      if (alternate !== null) {\n        alternate.lanes = mergeLanes(alternate.lanes, renderLanes);\n      } // This is intentionally passing this fiber as the parent\n      // because we want to schedule this fiber as having work\n      // on its children. We'll use the childLanes on\n      // this fiber to indicate that a context has changed.\n\n\n      scheduleContextWorkOnParentPath(parentSuspense, renderLanes, workInProgress);\n      nextFiber = null;\n    } else {\n      // Traverse down.\n      nextFiber = fiber.child;\n    }\n\n    if (nextFiber !== null) {\n      // Set the return pointer of the child to the work-in-progress fiber.\n      nextFiber.return = fiber;\n    } else {\n      // No child. Traverse to next sibling.\n      nextFiber = fiber;\n\n      while (nextFiber !== null) {\n        if (nextFiber === workInProgress) {\n          // We're back to the root of this subtree. Exit.\n          nextFiber = null;\n          break;\n        }\n\n        const sibling = nextFiber.sibling;\n\n        if (sibling !== null) {\n          // Set the return pointer of the sibling to the work-in-progress fiber.\n          sibling.return = nextFiber.return;\n          nextFiber = sibling;\n          break;\n        } // No more siblings. Traverse up.\n\n\n        nextFiber = nextFiber.return;\n      }\n    }\n\n    fiber = nextFiber;\n  }\n}\n\nexport function lazilyPropagateParentContextChanges(current, workInProgress, renderLanes) {\n  const forcePropagateEntireTree = false;\n  propagateParentContextChanges(current, workInProgress, renderLanes, forcePropagateEntireTree);\n} // Used for propagating a deferred tree (Suspense, Offscreen). We must propagate\n// to the entire subtree, because we won't revisit it until after the current\n// render has completed, at which point we'll have lost track of which providers\n// have changed.\n\nexport function propagateParentContextChangesToDeferredTree(current, workInProgress, renderLanes) {\n  const forcePropagateEntireTree = true;\n  propagateParentContextChanges(current, workInProgress, renderLanes, forcePropagateEntireTree);\n}\n\nfunction propagateParentContextChanges(current, workInProgress, renderLanes, forcePropagateEntireTree) {\n  if (!enableLazyContextPropagation) {\n    return;\n  } // Collect all the parent providers that changed. Since this is usually small\n  // number, we use an Array instead of Set.\n\n\n  let contexts = null;\n  let parent = workInProgress;\n  let isInsidePropagationBailout = false;\n\n  while (parent !== null) {\n    if (!isInsidePropagationBailout) {\n      if ((parent.flags & NeedsPropagation) !== NoFlags) {\n        isInsidePropagationBailout = true;\n      } else if ((parent.flags & DidPropagateContext) !== NoFlags) {\n        break;\n      }\n    }\n\n    if (parent.tag === ContextProvider) {\n      const currentParent = parent.alternate;\n\n      if (currentParent === null) {\n        throw new Error('Should have a current fiber. This is a bug in React.');\n      }\n\n      const oldProps = currentParent.memoizedProps;\n\n      if (oldProps !== null) {\n        const providerType = parent.type;\n        const context = providerType._context;\n        const newProps = parent.pendingProps;\n        const newValue = newProps.value;\n        const oldValue = oldProps.value;\n\n        if (!is(newValue, oldValue)) {\n          if (contexts !== null) {\n            contexts.push(context);\n          } else {\n            contexts = [context];\n          }\n        }\n      }\n    }\n\n    parent = parent.return;\n  }\n\n  if (contexts !== null) {\n    // If there were any changed providers, search through the children and\n    // propagate their changes.\n    propagateContextChanges(workInProgress, contexts, renderLanes, forcePropagateEntireTree);\n  } // This is an optimization so that we only propagate once per subtree. If a\n  // deeply nested child bails out, and it calls this propagation function, it\n  // uses this flag to know that the remaining ancestor providers have already\n  // been propagated.\n  //\n  // NOTE: This optimization is only necessary because we sometimes enter the\n  // begin phase of nodes that don't have any work scheduled on them —\n  // specifically, the siblings of a node that _does_ have scheduled work. The\n  // siblings will bail out and call this function again, even though we already\n  // propagated content changes to it and its subtree. So we use this flag to\n  // mark that the parent providers already propagated.\n  //\n  // Unfortunately, though, we need to ignore this flag when we're inside a\n  // tree whose context propagation was deferred — that's what the\n  // `NeedsPropagation` flag is for.\n  //\n  // If we could instead bail out before entering the siblings' begin phase,\n  // then we could remove both `DidPropagateContext` and `NeedsPropagation`.\n  // Consider this as part of the next refactor to the fiber tree structure.\n\n\n  workInProgress.flags |= DidPropagateContext;\n}\n\nexport function checkIfContextChanged(currentDependencies) {\n  if (!enableLazyContextPropagation) {\n    return false;\n  } // Iterate over the current dependencies to see if something changed. This\n  // only gets called if props and state has already bailed out, so it's a\n  // relatively uncommon path, except at the root of a changed subtree.\n  // Alternatively, we could move these comparisons into `readContext`, but\n  // that's a much hotter path, so I think this is an appropriate trade off.\n\n\n  let dependency = currentDependencies.firstContext;\n\n  while (dependency !== null) {\n    const context = dependency.context;\n    const newValue = isPrimaryRenderer ? context._currentValue : context._currentValue2;\n    const oldValue = dependency.memoizedValue;\n\n    if (!is(newValue, oldValue)) {\n      return true;\n    }\n\n    dependency = dependency.next;\n  }\n\n  return false;\n}\nexport function prepareToReadContext(workInProgress, renderLanes) {\n  currentlyRenderingFiber = workInProgress;\n  lastContextDependency = null;\n  lastFullyObservedContext = null;\n  const dependencies = workInProgress.dependencies;\n\n  if (dependencies !== null) {\n    if (enableLazyContextPropagation) {\n      // Reset the work-in-progress list\n      dependencies.firstContext = null;\n    } else {\n      const firstContext = dependencies.firstContext;\n\n      if (firstContext !== null) {\n        if (includesSomeLane(dependencies.lanes, renderLanes)) {\n          // Context list has a pending update. Mark that this fiber performed work.\n          markWorkInProgressReceivedUpdate();\n        } // Reset the work-in-progress list\n\n\n        dependencies.firstContext = null;\n      }\n    }\n  }\n}\nexport function readContext(context) {\n  if (__DEV__) {\n    // This warning would fire if you read context inside a Hook like useMemo.\n    // Unlike the class check below, it's not enforced in production for perf.\n    if (isDisallowedContextReadInDEV) {\n      console.error('Context can only be read while React is rendering. ' + 'In classes, you can read it in the render method or getDerivedStateFromProps. ' + 'In function components, you can read it directly in the function body, but not ' + 'inside Hooks like useReducer() or useMemo().');\n    }\n  }\n\n  const value = isPrimaryRenderer ? context._currentValue : context._currentValue2;\n\n  if (lastFullyObservedContext === context) {// Nothing to do. We already observe everything in this context.\n  } else {\n    const contextItem = {\n      context: context,\n      memoizedValue: value,\n      next: null\n    };\n\n    if (lastContextDependency === null) {\n      if (currentlyRenderingFiber === null) {\n        throw new Error('Context can only be read while React is rendering. ' + 'In classes, you can read it in the render method or getDerivedStateFromProps. ' + 'In function components, you can read it directly in the function body, but not ' + 'inside Hooks like useReducer() or useMemo().');\n      } // This is the first dependency for this component. Create a new list.\n\n\n      lastContextDependency = contextItem;\n      currentlyRenderingFiber.dependencies = {\n        lanes: NoLanes,\n        firstContext: contextItem\n      };\n\n      if (enableLazyContextPropagation) {\n        currentlyRenderingFiber.flags |= NeedsPropagation;\n      }\n    } else {\n      // Append a new context item.\n      lastContextDependency = lastContextDependency.next = contextItem;\n    }\n  }\n\n  return value;\n}","map":{"version":3,"sources":["/Users/bytedance/Desktop/sourceCodeReading/react-code/src/react/packages/react-reconciler/src/ReactFiberNewContext.js"],"names":["isPrimaryRenderer","createCursor","push","pop","ContextProvider","ClassComponent","DehydratedFragment","NoLanes","NoTimestamp","isSubsetOfLanes","includesSomeLane","mergeLanes","pickArbitraryLane","NoFlags","DidPropagateContext","NeedsPropagation","is","createUpdate","ForceUpdate","markWorkInProgressReceivedUpdate","enableLazyContextPropagation","enableServerContext","REACT_SERVER_CONTEXT_DEFAULT_VALUE_NOT_LOADED","valueCursor","rendererSigil","__DEV__","currentlyRenderingFiber","lastContextDependency","lastFullyObservedContext","isDisallowedContextReadInDEV","resetContextDependencies","enterDisallowedContextReadInDEV","exitDisallowedContextReadInDEV","pushProvider","providerFiber","context","nextValue","_currentValue","_currentRenderer","undefined","console","error","_currentValue2","_currentRenderer2","popProvider","currentValue","current","_defaultValue","scheduleContextWorkOnParentPath","parent","renderLanes","propagationRoot","node","alternate","childLanes","return","propagateContextChange","workInProgress","forcePropagateEntireTree","propagateContextChanges","propagateContextChange_eager","fiber","child","nextFiber","list","dependencies","dependency","firstContext","tag","lane","update","updateQueue","sharedQueue","shared","pending","next","lanes","type","parentSuspense","Error","sibling","contexts","dep","findChangedDep","consumer","findContext","i","length","lazilyPropagateParentContextChanges","propagateParentContextChanges","propagateParentContextChangesToDeferredTree","isInsidePropagationBailout","flags","currentParent","oldProps","memoizedProps","providerType","_context","newProps","pendingProps","newValue","value","oldValue","checkIfContextChanged","currentDependencies","memoizedValue","prepareToReadContext","readContext","contextItem"],"mappings":"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","sourcesContent":["/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nimport type {ReactContext, ReactProviderType} from 'shared/ReactTypes';\nimport type {\n  Fiber,\n  ContextDependency,\n  Dependencies,\n} from './ReactInternalTypes';\nimport type {StackCursor} from './ReactFiberStack';\nimport type {Lanes} from './ReactFiberLane';\nimport type {SharedQueue} from './ReactFiberClassUpdateQueue';\n\nimport {isPrimaryRenderer} from './ReactFiberHostConfig';\nimport {createCursor, push, pop} from './ReactFiberStack';\nimport {\n  ContextProvider,\n  ClassComponent,\n  DehydratedFragment,\n} from './ReactWorkTags';\nimport {\n  NoLanes,\n  NoTimestamp,\n  isSubsetOfLanes,\n  includesSomeLane,\n  mergeLanes,\n  pickArbitraryLane,\n} from './ReactFiberLane';\nimport {\n  NoFlags,\n  DidPropagateContext,\n  NeedsPropagation,\n} from './ReactFiberFlags';\n\nimport is from 'shared/objectIs';\nimport {createUpdate, ForceUpdate} from './ReactFiberClassUpdateQueue';\nimport {markWorkInProgressReceivedUpdate} from './ReactFiberBeginWork';\nimport {\n  enableLazyContextPropagation,\n  enableServerContext,\n} from 'shared/ReactFeatureFlags';\nimport {REACT_SERVER_CONTEXT_DEFAULT_VALUE_NOT_LOADED} from 'shared/ReactSymbols';\n\nconst valueCursor: StackCursor<mixed> = createCursor(null);\n\nlet rendererSigil;\nif (__DEV__) {\n  // Use this to detect multiple renderers using the same context\n  rendererSigil = {};\n}\n\nlet currentlyRenderingFiber: Fiber | null = null;\nlet lastContextDependency: ContextDependency<mixed> | null = null;\nlet lastFullyObservedContext: ReactContext<any> | null = null;\n\nlet isDisallowedContextReadInDEV: boolean = false;\n\nexport function resetContextDependencies(): void {\n  // This is called right before React yields execution, to ensure `readContext`\n  // cannot be called outside the render phase.\n  currentlyRenderingFiber = null;\n  lastContextDependency = null;\n  lastFullyObservedContext = null;\n  if (__DEV__) {\n    isDisallowedContextReadInDEV = false;\n  }\n}\n\nexport function enterDisallowedContextReadInDEV(): void {\n  if (__DEV__) {\n    isDisallowedContextReadInDEV = true;\n  }\n}\n\nexport function exitDisallowedContextReadInDEV(): void {\n  if (__DEV__) {\n    isDisallowedContextReadInDEV = false;\n  }\n}\n\nexport function pushProvider<T>(\n  providerFiber: Fiber,\n  context: ReactContext<T>,\n  nextValue: T,\n): void {\n  if (isPrimaryRenderer) {\n    push(valueCursor, context._currentValue, providerFiber);\n\n    context._currentValue = nextValue;\n    if (__DEV__) {\n      if (\n        context._currentRenderer !== undefined &&\n        context._currentRenderer !== null &&\n        context._currentRenderer !== rendererSigil\n      ) {\n        console.error(\n          'Detected multiple renderers concurrently rendering the ' +\n            'same context provider. This is currently unsupported.',\n        );\n      }\n      context._currentRenderer = rendererSigil;\n    }\n  } else {\n    push(valueCursor, context._currentValue2, providerFiber);\n\n    context._currentValue2 = nextValue;\n    if (__DEV__) {\n      if (\n        context._currentRenderer2 !== undefined &&\n        context._currentRenderer2 !== null &&\n        context._currentRenderer2 !== rendererSigil\n      ) {\n        console.error(\n          'Detected multiple renderers concurrently rendering the ' +\n            'same context provider. This is currently unsupported.',\n        );\n      }\n      context._currentRenderer2 = rendererSigil;\n    }\n  }\n}\n\nexport function popProvider(\n  context: ReactContext<any>,\n  providerFiber: Fiber,\n): void {\n  const currentValue = valueCursor.current;\n  pop(valueCursor, providerFiber);\n  if (isPrimaryRenderer) {\n    if (\n      enableServerContext &&\n      currentValue === REACT_SERVER_CONTEXT_DEFAULT_VALUE_NOT_LOADED\n    ) {\n      context._currentValue = context._defaultValue;\n    } else {\n      context._currentValue = currentValue;\n    }\n  } else {\n    if (\n      enableServerContext &&\n      currentValue === REACT_SERVER_CONTEXT_DEFAULT_VALUE_NOT_LOADED\n    ) {\n      context._currentValue2 = context._defaultValue;\n    } else {\n      context._currentValue2 = currentValue;\n    }\n  }\n}\n\nexport function scheduleContextWorkOnParentPath(\n  parent: Fiber | null,\n  renderLanes: Lanes,\n  propagationRoot: Fiber,\n) {\n  // Update the child lanes of all the ancestors, including the alternates.\n  let node = parent;\n  while (node !== null) {\n    const alternate = node.alternate;\n    if (!isSubsetOfLanes(node.childLanes, renderLanes)) {\n      node.childLanes = mergeLanes(node.childLanes, renderLanes);\n      if (alternate !== null) {\n        alternate.childLanes = mergeLanes(alternate.childLanes, renderLanes);\n      }\n    } else if (\n      alternate !== null &&\n      !isSubsetOfLanes(alternate.childLanes, renderLanes)\n    ) {\n      alternate.childLanes = mergeLanes(alternate.childLanes, renderLanes);\n    } else {\n      // Neither alternate was updated.\n      // Normally, this would mean that the rest of the\n      // ancestor path already has sufficient priority.\n      // However, this is not necessarily true inside offscreen\n      // or fallback trees because childLanes may be inconsistent\n      // with the surroundings. This is why we continue the loop.\n    }\n    if (node === propagationRoot) {\n      break;\n    }\n    node = node.return;\n  }\n  if (__DEV__) {\n    if (node !== propagationRoot) {\n      console.error(\n        'Expected to find the propagation root when scheduling context work. ' +\n          'This error is likely caused by a bug in React. Please file an issue.',\n      );\n    }\n  }\n}\n\nexport function propagateContextChange<T>(\n  workInProgress: Fiber,\n  context: ReactContext<T>,\n  renderLanes: Lanes,\n): void {\n  if (enableLazyContextPropagation) {\n    // TODO: This path is only used by Cache components. Update\n    // lazilyPropagateParentContextChanges to look for Cache components so they\n    // can take advantage of lazy propagation.\n    const forcePropagateEntireTree = true;\n    propagateContextChanges(\n      workInProgress,\n      [context],\n      renderLanes,\n      forcePropagateEntireTree,\n    );\n  } else {\n    propagateContextChange_eager(workInProgress, context, renderLanes);\n  }\n}\n\nfunction propagateContextChange_eager<T>(\n  workInProgress: Fiber,\n  context: ReactContext<T>,\n  renderLanes: Lanes,\n): void {\n  // Only used by eager implementation\n  if (enableLazyContextPropagation) {\n    return;\n  }\n  let fiber = workInProgress.child;\n  if (fiber !== null) {\n    // Set the return pointer of the child to the work-in-progress fiber.\n    fiber.return = workInProgress;\n  }\n  while (fiber !== null) {\n    let nextFiber;\n\n    // Visit this fiber.\n    const list = fiber.dependencies;\n    if (list !== null) {\n      nextFiber = fiber.child;\n\n      let dependency = list.firstContext;\n      while (dependency !== null) {\n        // Check if the context matches.\n        if (dependency.context === context) {\n          // Match! Schedule an update on this fiber.\n          if (fiber.tag === ClassComponent) {\n            // Schedule a force update on the work-in-progress.\n            const lane = pickArbitraryLane(renderLanes);\n            const update = createUpdate(NoTimestamp, lane);\n            update.tag = ForceUpdate;\n            // TODO: Because we don't have a work-in-progress, this will add the\n            // update to the current fiber, too, which means it will persist even if\n            // this render is thrown away. Since it's a race condition, not sure it's\n            // worth fixing.\n\n            // Inlined `enqueueUpdate` to remove interleaved update check\n            const updateQueue = fiber.updateQueue;\n            if (updateQueue === null) {\n              // Only occurs if the fiber has been unmounted.\n            } else {\n              const sharedQueue: SharedQueue<any> = (updateQueue: any).shared;\n              const pending = sharedQueue.pending;\n              if (pending === null) {\n                // This is the first update. Create a circular list.\n                update.next = update;\n              } else {\n                update.next = pending.next;\n                pending.next = update;\n              }\n              sharedQueue.pending = update;\n            }\n          }\n\n          fiber.lanes = mergeLanes(fiber.lanes, renderLanes);\n          const alternate = fiber.alternate;\n          if (alternate !== null) {\n            alternate.lanes = mergeLanes(alternate.lanes, renderLanes);\n          }\n          scheduleContextWorkOnParentPath(\n            fiber.return,\n            renderLanes,\n            workInProgress,\n          );\n\n          // Mark the updated lanes on the list, too.\n          list.lanes = mergeLanes(list.lanes, renderLanes);\n\n          // Since we already found a match, we can stop traversing the\n          // dependency list.\n          break;\n        }\n        dependency = dependency.next;\n      }\n    } else if (fiber.tag === ContextProvider) {\n      // Don't scan deeper if this is a matching provider\n      nextFiber = fiber.type === workInProgress.type ? null : fiber.child;\n    } else if (fiber.tag === DehydratedFragment) {\n      // If a dehydrated suspense boundary is in this subtree, we don't know\n      // if it will have any context consumers in it. The best we can do is\n      // mark it as having updates.\n      const parentSuspense = fiber.return;\n\n      if (parentSuspense === null) {\n        throw new Error(\n          'We just came from a parent so we must have had a parent. This is a bug in React.',\n        );\n      }\n\n      parentSuspense.lanes = mergeLanes(parentSuspense.lanes, renderLanes);\n      const alternate = parentSuspense.alternate;\n      if (alternate !== null) {\n        alternate.lanes = mergeLanes(alternate.lanes, renderLanes);\n      }\n      // This is intentionally passing this fiber as the parent\n      // because we want to schedule this fiber as having work\n      // on its children. We'll use the childLanes on\n      // this fiber to indicate that a context has changed.\n      scheduleContextWorkOnParentPath(\n        parentSuspense,\n        renderLanes,\n        workInProgress,\n      );\n      nextFiber = fiber.sibling;\n    } else {\n      // Traverse down.\n      nextFiber = fiber.child;\n    }\n\n    if (nextFiber !== null) {\n      // Set the return pointer of the child to the work-in-progress fiber.\n      nextFiber.return = fiber;\n    } else {\n      // No child. Traverse to next sibling.\n      nextFiber = fiber;\n      while (nextFiber !== null) {\n        if (nextFiber === workInProgress) {\n          // We're back to the root of this subtree. Exit.\n          nextFiber = null;\n          break;\n        }\n        const sibling = nextFiber.sibling;\n        if (sibling !== null) {\n          // Set the return pointer of the sibling to the work-in-progress fiber.\n          sibling.return = nextFiber.return;\n          nextFiber = sibling;\n          break;\n        }\n        // No more siblings. Traverse up.\n        nextFiber = nextFiber.return;\n      }\n    }\n    fiber = nextFiber;\n  }\n}\n\nfunction propagateContextChanges<T>(\n  workInProgress: Fiber,\n  contexts: Array<any>,\n  renderLanes: Lanes,\n  forcePropagateEntireTree: boolean,\n): void {\n  // Only used by lazy implementation\n  if (!enableLazyContextPropagation) {\n    return;\n  }\n  let fiber = workInProgress.child;\n  if (fiber !== null) {\n    // Set the return pointer of the child to the work-in-progress fiber.\n    fiber.return = workInProgress;\n  }\n  while (fiber !== null) {\n    let nextFiber;\n\n    // Visit this fiber.\n    const list = fiber.dependencies;\n    if (list !== null) {\n      nextFiber = fiber.child;\n\n      let dep = list.firstContext;\n      findChangedDep: while (dep !== null) {\n        // Assigning these to constants to help Flow\n        const dependency = dep;\n        const consumer = fiber;\n        findContext: for (let i = 0; i < contexts.length; i++) {\n          const context: ReactContext<T> = contexts[i];\n          // Check if the context matches.\n          // TODO: Compare selected values to bail out early.\n          if (dependency.context === context) {\n            // Match! Schedule an update on this fiber.\n\n            // In the lazy implementation, don't mark a dirty flag on the\n            // dependency itself. Not all changes are propagated, so we can't\n            // rely on the propagation function alone to determine whether\n            // something has changed; the consumer will check. In the future, we\n            // could add back a dirty flag as an optimization to avoid double\n            // checking, but until we have selectors it's not really worth\n            // the trouble.\n            consumer.lanes = mergeLanes(consumer.lanes, renderLanes);\n            const alternate = consumer.alternate;\n            if (alternate !== null) {\n              alternate.lanes = mergeLanes(alternate.lanes, renderLanes);\n            }\n            scheduleContextWorkOnParentPath(\n              consumer.return,\n              renderLanes,\n              workInProgress,\n            );\n\n            if (!forcePropagateEntireTree) {\n              // During lazy propagation, when we find a match, we can defer\n              // propagating changes to the children, because we're going to\n              // visit them during render. We should continue propagating the\n              // siblings, though\n              nextFiber = null;\n            }\n\n            // Since we already found a match, we can stop traversing the\n            // dependency list.\n            break findChangedDep;\n          }\n        }\n        dep = dependency.next;\n      }\n    } else if (fiber.tag === DehydratedFragment) {\n      // If a dehydrated suspense boundary is in this subtree, we don't know\n      // if it will have any context consumers in it. The best we can do is\n      // mark it as having updates.\n      const parentSuspense = fiber.return;\n\n      if (parentSuspense === null) {\n        throw new Error(\n          'We just came from a parent so we must have had a parent. This is a bug in React.',\n        );\n      }\n\n      parentSuspense.lanes = mergeLanes(parentSuspense.lanes, renderLanes);\n      const alternate = parentSuspense.alternate;\n      if (alternate !== null) {\n        alternate.lanes = mergeLanes(alternate.lanes, renderLanes);\n      }\n      // This is intentionally passing this fiber as the parent\n      // because we want to schedule this fiber as having work\n      // on its children. We'll use the childLanes on\n      // this fiber to indicate that a context has changed.\n      scheduleContextWorkOnParentPath(\n        parentSuspense,\n        renderLanes,\n        workInProgress,\n      );\n      nextFiber = null;\n    } else {\n      // Traverse down.\n      nextFiber = fiber.child;\n    }\n\n    if (nextFiber !== null) {\n      // Set the return pointer of the child to the work-in-progress fiber.\n      nextFiber.return = fiber;\n    } else {\n      // No child. Traverse to next sibling.\n      nextFiber = fiber;\n      while (nextFiber !== null) {\n        if (nextFiber === workInProgress) {\n          // We're back to the root of this subtree. Exit.\n          nextFiber = null;\n          break;\n        }\n        const sibling = nextFiber.sibling;\n        if (sibling !== null) {\n          // Set the return pointer of the sibling to the work-in-progress fiber.\n          sibling.return = nextFiber.return;\n          nextFiber = sibling;\n          break;\n        }\n        // No more siblings. Traverse up.\n        nextFiber = nextFiber.return;\n      }\n    }\n    fiber = nextFiber;\n  }\n}\n\nexport function lazilyPropagateParentContextChanges(\n  current: Fiber,\n  workInProgress: Fiber,\n  renderLanes: Lanes,\n) {\n  const forcePropagateEntireTree = false;\n  propagateParentContextChanges(\n    current,\n    workInProgress,\n    renderLanes,\n    forcePropagateEntireTree,\n  );\n}\n\n// Used for propagating a deferred tree (Suspense, Offscreen). We must propagate\n// to the entire subtree, because we won't revisit it until after the current\n// render has completed, at which point we'll have lost track of which providers\n// have changed.\nexport function propagateParentContextChangesToDeferredTree(\n  current: Fiber,\n  workInProgress: Fiber,\n  renderLanes: Lanes,\n) {\n  const forcePropagateEntireTree = true;\n  propagateParentContextChanges(\n    current,\n    workInProgress,\n    renderLanes,\n    forcePropagateEntireTree,\n  );\n}\n\nfunction propagateParentContextChanges(\n  current: Fiber,\n  workInProgress: Fiber,\n  renderLanes: Lanes,\n  forcePropagateEntireTree: boolean,\n) {\n  if (!enableLazyContextPropagation) {\n    return;\n  }\n\n  // Collect all the parent providers that changed. Since this is usually small\n  // number, we use an Array instead of Set.\n  let contexts = null;\n  let parent: null | Fiber = workInProgress;\n  let isInsidePropagationBailout = false;\n  while (parent !== null) {\n    if (!isInsidePropagationBailout) {\n      if ((parent.flags & NeedsPropagation) !== NoFlags) {\n        isInsidePropagationBailout = true;\n      } else if ((parent.flags & DidPropagateContext) !== NoFlags) {\n        break;\n      }\n    }\n\n    if (parent.tag === ContextProvider) {\n      const currentParent = parent.alternate;\n\n      if (currentParent === null) {\n        throw new Error('Should have a current fiber. This is a bug in React.');\n      }\n\n      const oldProps = currentParent.memoizedProps;\n      if (oldProps !== null) {\n        const providerType: ReactProviderType<any> = parent.type;\n        const context: ReactContext<any> = providerType._context;\n\n        const newProps = parent.pendingProps;\n        const newValue = newProps.value;\n\n        const oldValue = oldProps.value;\n\n        if (!is(newValue, oldValue)) {\n          if (contexts !== null) {\n            contexts.push(context);\n          } else {\n            contexts = [context];\n          }\n        }\n      }\n    }\n    parent = parent.return;\n  }\n\n  if (contexts !== null) {\n    // If there were any changed providers, search through the children and\n    // propagate their changes.\n    propagateContextChanges(\n      workInProgress,\n      contexts,\n      renderLanes,\n      forcePropagateEntireTree,\n    );\n  }\n\n  // This is an optimization so that we only propagate once per subtree. If a\n  // deeply nested child bails out, and it calls this propagation function, it\n  // uses this flag to know that the remaining ancestor providers have already\n  // been propagated.\n  //\n  // NOTE: This optimization is only necessary because we sometimes enter the\n  // begin phase of nodes that don't have any work scheduled on them —\n  // specifically, the siblings of a node that _does_ have scheduled work. The\n  // siblings will bail out and call this function again, even though we already\n  // propagated content changes to it and its subtree. So we use this flag to\n  // mark that the parent providers already propagated.\n  //\n  // Unfortunately, though, we need to ignore this flag when we're inside a\n  // tree whose context propagation was deferred — that's what the\n  // `NeedsPropagation` flag is for.\n  //\n  // If we could instead bail out before entering the siblings' begin phase,\n  // then we could remove both `DidPropagateContext` and `NeedsPropagation`.\n  // Consider this as part of the next refactor to the fiber tree structure.\n  workInProgress.flags |= DidPropagateContext;\n}\n\nexport function checkIfContextChanged(\n  currentDependencies: Dependencies,\n): boolean {\n  if (!enableLazyContextPropagation) {\n    return false;\n  }\n  // Iterate over the current dependencies to see if something changed. This\n  // only gets called if props and state has already bailed out, so it's a\n  // relatively uncommon path, except at the root of a changed subtree.\n  // Alternatively, we could move these comparisons into `readContext`, but\n  // that's a much hotter path, so I think this is an appropriate trade off.\n  let dependency = currentDependencies.firstContext;\n  while (dependency !== null) {\n    const context = dependency.context;\n    const newValue = isPrimaryRenderer\n      ? context._currentValue\n      : context._currentValue2;\n    const oldValue = dependency.memoizedValue;\n    if (!is(newValue, oldValue)) {\n      return true;\n    }\n    dependency = dependency.next;\n  }\n  return false;\n}\n\nexport function prepareToReadContext(\n  workInProgress: Fiber,\n  renderLanes: Lanes,\n): void {\n  currentlyRenderingFiber = workInProgress;\n  lastContextDependency = null;\n  lastFullyObservedContext = null;\n\n  const dependencies = workInProgress.dependencies;\n  if (dependencies !== null) {\n    if (enableLazyContextPropagation) {\n      // Reset the work-in-progress list\n      dependencies.firstContext = null;\n    } else {\n      const firstContext = dependencies.firstContext;\n      if (firstContext !== null) {\n        if (includesSomeLane(dependencies.lanes, renderLanes)) {\n          // Context list has a pending update. Mark that this fiber performed work.\n          markWorkInProgressReceivedUpdate();\n        }\n        // Reset the work-in-progress list\n        dependencies.firstContext = null;\n      }\n    }\n  }\n}\n\nexport function readContext<T>(context: ReactContext<T>): T {\n  if (__DEV__) {\n    // This warning would fire if you read context inside a Hook like useMemo.\n    // Unlike the class check below, it's not enforced in production for perf.\n    if (isDisallowedContextReadInDEV) {\n      console.error(\n        'Context can only be read while React is rendering. ' +\n          'In classes, you can read it in the render method or getDerivedStateFromProps. ' +\n          'In function components, you can read it directly in the function body, but not ' +\n          'inside Hooks like useReducer() or useMemo().',\n      );\n    }\n  }\n\n  const value = isPrimaryRenderer\n    ? context._currentValue\n    : context._currentValue2;\n\n  if (lastFullyObservedContext === context) {\n    // Nothing to do. We already observe everything in this context.\n  } else {\n    const contextItem = {\n      context: ((context: any): ReactContext<mixed>),\n      memoizedValue: value,\n      next: null,\n    };\n\n    if (lastContextDependency === null) {\n      if (currentlyRenderingFiber === null) {\n        throw new Error(\n          'Context can only be read while React is rendering. ' +\n            'In classes, you can read it in the render method or getDerivedStateFromProps. ' +\n            'In function components, you can read it directly in the function body, but not ' +\n            'inside Hooks like useReducer() or useMemo().',\n        );\n      }\n\n      // This is the first dependency for this component. Create a new list.\n      lastContextDependency = contextItem;\n      currentlyRenderingFiber.dependencies = {\n        lanes: NoLanes,\n        firstContext: contextItem,\n      };\n      if (enableLazyContextPropagation) {\n        currentlyRenderingFiber.flags |= NeedsPropagation;\n      }\n    } else {\n      // Append a new context item.\n      lastContextDependency = lastContextDependency.next = contextItem;\n    }\n  }\n  return value;\n}\n"]},"metadata":{},"sourceType":"module"}