{"ast":null,"code":"/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n */\n\n/* eslint-disable no-var */\nimport { enableSchedulerDebugging, enableProfiling, enableIsInputPending, enableIsInputPendingContinuous, frameYieldMs, continuousYieldMs, maxYieldMs } from '../SchedulerFeatureFlags';\nimport { push, pop, peek } from '../SchedulerMinHeap'; // TODO: Use symbols?\n\nimport { ImmediatePriority, UserBlockingPriority, NormalPriority, LowPriority, IdlePriority } from '../SchedulerPriorities';\nimport { markTaskRun, markTaskYield, markTaskCompleted, markTaskCanceled, markTaskErrored, markSchedulerSuspended, markSchedulerUnsuspended, markTaskStart, stopLoggingProfilingEvents, startLoggingProfilingEvents } from '../SchedulerProfiling';\nlet getCurrentTime;\nconst hasPerformanceNow = // $FlowFixMe[method-unbinding]\ntypeof performance === 'object' && typeof performance.now === 'function';\n\nif (hasPerformanceNow) {\n  const localPerformance = performance;\n\n  getCurrentTime = () => localPerformance.now();\n} else {\n  const localDate = Date;\n  const initialTime = localDate.now();\n\n  getCurrentTime = () => localDate.now() - initialTime;\n} // Max 31 bit integer. The max integer size in V8 for 32-bit systems.\n// Math.pow(2, 30) - 1\n// 0b111111111111111111111111111111\n\n\nvar maxSigned31BitInt = 1073741823; // Times out immediately\n\nvar IMMEDIATE_PRIORITY_TIMEOUT = -1; // Eventually times out\n\nvar USER_BLOCKING_PRIORITY_TIMEOUT = 250;\nvar NORMAL_PRIORITY_TIMEOUT = 5000;\nvar LOW_PRIORITY_TIMEOUT = 10000; // Never times out\n\nvar IDLE_PRIORITY_TIMEOUT = maxSigned31BitInt; // Tasks are stored on a min heap\n\nvar taskQueue = [];\nvar timerQueue = []; // Incrementing id counter. Used to maintain insertion order.\n\nvar taskIdCounter = 1; // Pausing the scheduler is useful for debugging.\n\nvar isSchedulerPaused = false;\nvar currentTask = null;\nvar currentPriorityLevel = NormalPriority; // This is set while performing work, to prevent re-entrance.\n\nvar isPerformingWork = false;\nvar isHostCallbackScheduled = false;\nvar isHostTimeoutScheduled = false; // Capture local references to native APIs, in case a polyfill overrides them.\n\nconst localSetTimeout = typeof setTimeout === 'function' ? setTimeout : null;\nconst localClearTimeout = typeof clearTimeout === 'function' ? clearTimeout : null;\nconst localSetImmediate = typeof setImmediate !== 'undefined' ? setImmediate : null; // IE and Node.js + jsdom\n\nconst isInputPending = typeof navigator !== 'undefined' && // $FlowFixMe[prop-missing]\nnavigator.scheduling !== undefined && // $FlowFixMe[incompatible-type]\nnavigator.scheduling.isInputPending !== undefined ? navigator.scheduling.isInputPending.bind(navigator.scheduling) : null;\nconst continuousOptions = {\n  includeContinuous: enableIsInputPendingContinuous\n};\n\nfunction advanceTimers(currentTime) {\n  // Check for tasks that are no longer delayed and add them to the queue.\n  let timer = peek(timerQueue);\n\n  while (timer !== null) {\n    if (timer.callback === null) {\n      // Timer was cancelled.\n      pop(timerQueue);\n    } else if (timer.startTime <= currentTime) {\n      // Timer fired. Transfer to the task queue.\n      pop(timerQueue);\n      timer.sortIndex = timer.expirationTime;\n      push(taskQueue, timer);\n\n      if (enableProfiling) {\n        markTaskStart(timer, currentTime);\n        timer.isQueued = true;\n      }\n    } else {\n      // Remaining timers are pending.\n      return;\n    }\n\n    timer = peek(timerQueue);\n  }\n}\n\nfunction handleTimeout(currentTime) {\n  isHostTimeoutScheduled = false;\n  advanceTimers(currentTime);\n\n  if (!isHostCallbackScheduled) {\n    if (peek(taskQueue) !== null) {\n      isHostCallbackScheduled = true;\n      requestHostCallback(flushWork);\n    } else {\n      const firstTimer = peek(timerQueue);\n\n      if (firstTimer !== null) {\n        requestHostTimeout(handleTimeout, firstTimer.startTime - currentTime);\n      }\n    }\n  }\n}\n\nfunction flushWork(hasTimeRemaining, initialTime) {\n  if (enableProfiling) {\n    markSchedulerUnsuspended(initialTime);\n  } // We'll need a host callback the next time work is scheduled.\n\n\n  isHostCallbackScheduled = false;\n\n  if (isHostTimeoutScheduled) {\n    // We scheduled a timeout but it's no longer needed. Cancel it.\n    isHostTimeoutScheduled = false;\n    cancelHostTimeout();\n  }\n\n  isPerformingWork = true;\n  const previousPriorityLevel = currentPriorityLevel;\n\n  try {\n    if (enableProfiling) {\n      try {\n        return workLoop(hasTimeRemaining, initialTime);\n      } catch (error) {\n        if (currentTask !== null) {\n          const currentTime = getCurrentTime(); // $FlowFixMe[incompatible-call] found when upgrading Flow\n\n          markTaskErrored(currentTask, currentTime); // $FlowFixMe[incompatible-use] found when upgrading Flow\n\n          currentTask.isQueued = false;\n        }\n\n        throw error;\n      }\n    } else {\n      // No catch in prod code path.\n      return workLoop(hasTimeRemaining, initialTime);\n    }\n  } finally {\n    currentTask = null;\n    currentPriorityLevel = previousPriorityLevel;\n    isPerformingWork = false;\n\n    if (enableProfiling) {\n      const currentTime = getCurrentTime();\n      markSchedulerSuspended(currentTime);\n    }\n  }\n}\n\nfunction workLoop(hasTimeRemaining, initialTime) {\n  let currentTime = initialTime;\n  advanceTimers(currentTime);\n  currentTask = peek(taskQueue);\n\n  while (currentTask !== null && !(enableSchedulerDebugging && isSchedulerPaused)) {\n    if (currentTask.expirationTime > currentTime && (!hasTimeRemaining || shouldYieldToHost())) {\n      // This currentTask hasn't expired, and we've reached the deadline.\n      break;\n    } // $FlowFixMe[incompatible-use] found when upgrading Flow\n\n\n    const callback = currentTask.callback;\n\n    if (typeof callback === 'function') {\n      // $FlowFixMe[incompatible-use] found when upgrading Flow\n      currentTask.callback = null; // $FlowFixMe[incompatible-use] found when upgrading Flow\n\n      currentPriorityLevel = currentTask.priorityLevel; // $FlowFixMe[incompatible-use] found when upgrading Flow\n\n      const didUserCallbackTimeout = currentTask.expirationTime <= currentTime;\n\n      if (enableProfiling) {\n        // $FlowFixMe[incompatible-call] found when upgrading Flow\n        markTaskRun(currentTask, currentTime);\n      }\n\n      const continuationCallback = callback(didUserCallbackTimeout);\n      currentTime = getCurrentTime();\n\n      if (typeof continuationCallback === 'function') {\n        // If a continuation is returned, immediately yield to the main thread\n        // regardless of how much time is left in the current time slice.\n        // $FlowFixMe[incompatible-use] found when upgrading Flow\n        currentTask.callback = continuationCallback;\n\n        if (enableProfiling) {\n          // $FlowFixMe[incompatible-call] found when upgrading Flow\n          markTaskYield(currentTask, currentTime);\n        }\n\n        advanceTimers(currentTime);\n        return true;\n      } else {\n        if (enableProfiling) {\n          // $FlowFixMe[incompatible-call] found when upgrading Flow\n          markTaskCompleted(currentTask, currentTime); // $FlowFixMe[incompatible-use] found when upgrading Flow\n\n          currentTask.isQueued = false;\n        }\n\n        if (currentTask === peek(taskQueue)) {\n          pop(taskQueue);\n        }\n\n        advanceTimers(currentTime);\n      }\n    } else {\n      pop(taskQueue);\n    }\n\n    currentTask = peek(taskQueue);\n  } // Return whether there's additional work\n\n\n  if (currentTask !== null) {\n    return true;\n  } else {\n    const firstTimer = peek(timerQueue);\n\n    if (firstTimer !== null) {\n      requestHostTimeout(handleTimeout, firstTimer.startTime - currentTime);\n    }\n\n    return false;\n  }\n}\n\nfunction unstable_runWithPriority(priorityLevel, eventHandler) {\n  switch (priorityLevel) {\n    case ImmediatePriority:\n    case UserBlockingPriority:\n    case NormalPriority:\n    case LowPriority:\n    case IdlePriority:\n      break;\n\n    default:\n      priorityLevel = NormalPriority;\n  }\n\n  var previousPriorityLevel = currentPriorityLevel;\n  currentPriorityLevel = priorityLevel;\n\n  try {\n    return eventHandler();\n  } finally {\n    currentPriorityLevel = previousPriorityLevel;\n  }\n}\n\nfunction unstable_next(eventHandler) {\n  var priorityLevel;\n\n  switch (currentPriorityLevel) {\n    case ImmediatePriority:\n    case UserBlockingPriority:\n    case NormalPriority:\n      // Shift down to normal priority\n      priorityLevel = NormalPriority;\n      break;\n\n    default:\n      // Anything lower than normal priority should remain at the current level.\n      priorityLevel = currentPriorityLevel;\n      break;\n  }\n\n  var previousPriorityLevel = currentPriorityLevel;\n  currentPriorityLevel = priorityLevel;\n\n  try {\n    return eventHandler();\n  } finally {\n    currentPriorityLevel = previousPriorityLevel;\n  }\n}\n\nfunction unstable_wrapCallback(callback) {\n  var parentPriorityLevel = currentPriorityLevel; // $FlowFixMe[incompatible-return]\n\n  return function () {\n    // This is a fork of runWithPriority, inlined for performance.\n    var previousPriorityLevel = currentPriorityLevel;\n    currentPriorityLevel = parentPriorityLevel;\n\n    try {\n      return callback.apply(this, arguments);\n    } finally {\n      currentPriorityLevel = previousPriorityLevel;\n    }\n  };\n}\n\nfunction unstable_scheduleCallback(priorityLevel, callback, options) {\n  var currentTime = getCurrentTime();\n  var startTime;\n\n  if (typeof options === 'object' && options !== null) {\n    var delay = options.delay;\n\n    if (typeof delay === 'number' && delay > 0) {\n      startTime = currentTime + delay;\n    } else {\n      startTime = currentTime;\n    }\n  } else {\n    startTime = currentTime;\n  }\n\n  var timeout;\n\n  switch (priorityLevel) {\n    case ImmediatePriority:\n      timeout = IMMEDIATE_PRIORITY_TIMEOUT;\n      break;\n\n    case UserBlockingPriority:\n      timeout = USER_BLOCKING_PRIORITY_TIMEOUT;\n      break;\n\n    case IdlePriority:\n      timeout = IDLE_PRIORITY_TIMEOUT;\n      break;\n\n    case LowPriority:\n      timeout = LOW_PRIORITY_TIMEOUT;\n      break;\n\n    case NormalPriority:\n    default:\n      timeout = NORMAL_PRIORITY_TIMEOUT;\n      break;\n  }\n\n  var expirationTime = startTime + timeout;\n  var newTask = {\n    id: taskIdCounter++,\n    callback,\n    priorityLevel,\n    startTime,\n    expirationTime,\n    sortIndex: -1\n  };\n\n  if (enableProfiling) {\n    newTask.isQueued = false;\n  }\n\n  if (startTime > currentTime) {\n    // This is a delayed task.\n    newTask.sortIndex = startTime;\n    push(timerQueue, newTask);\n\n    if (peek(taskQueue) === null && newTask === peek(timerQueue)) {\n      // All tasks are delayed, and this is the task with the earliest delay.\n      if (isHostTimeoutScheduled) {\n        // Cancel an existing timeout.\n        cancelHostTimeout();\n      } else {\n        isHostTimeoutScheduled = true;\n      } // Schedule a timeout.\n\n\n      requestHostTimeout(handleTimeout, startTime - currentTime);\n    }\n  } else {\n    newTask.sortIndex = expirationTime;\n    push(taskQueue, newTask);\n\n    if (enableProfiling) {\n      markTaskStart(newTask, currentTime);\n      newTask.isQueued = true;\n    } // Schedule a host callback, if needed. If we're already performing work,\n    // wait until the next time we yield.\n\n\n    if (!isHostCallbackScheduled && !isPerformingWork) {\n      isHostCallbackScheduled = true;\n      requestHostCallback(flushWork);\n    }\n  }\n\n  return newTask;\n}\n\nfunction unstable_pauseExecution() {\n  isSchedulerPaused = true;\n}\n\nfunction unstable_continueExecution() {\n  isSchedulerPaused = false;\n\n  if (!isHostCallbackScheduled && !isPerformingWork) {\n    isHostCallbackScheduled = true;\n    requestHostCallback(flushWork);\n  }\n}\n\nfunction unstable_getFirstCallbackNode() {\n  return peek(taskQueue);\n}\n\nfunction unstable_cancelCallback(task) {\n  if (enableProfiling) {\n    if (task.isQueued) {\n      const currentTime = getCurrentTime();\n      markTaskCanceled(task, currentTime);\n      task.isQueued = false;\n    }\n  } // Null out the callback to indicate the task has been canceled. (Can't\n  // remove from the queue because you can't remove arbitrary nodes from an\n  // array based heap, only the first one.)\n\n\n  task.callback = null;\n}\n\nfunction unstable_getCurrentPriorityLevel() {\n  return currentPriorityLevel;\n}\n\nlet isMessageLoopRunning = false;\nlet scheduledHostCallback = null;\nlet taskTimeoutID = -1; // Scheduler periodically yields in case there is other work on the main\n// thread, like user events. By default, it yields multiple times per frame.\n// It does not attempt to align with frame boundaries, since most tasks don't\n// need to be frame aligned; for those that do, use requestAnimationFrame.\n\nlet frameInterval = frameYieldMs;\nconst continuousInputInterval = continuousYieldMs;\nconst maxInterval = maxYieldMs;\nlet startTime = -1;\nlet needsPaint = false;\n\nfunction shouldYieldToHost() {\n  const timeElapsed = getCurrentTime() - startTime;\n\n  if (timeElapsed < frameInterval) {\n    // The main thread has only been blocked for a really short amount of time;\n    // smaller than a single frame. Don't yield yet.\n    return false;\n  } // The main thread has been blocked for a non-negligible amount of time. We\n  // may want to yield control of the main thread, so the browser can perform\n  // high priority tasks. The main ones are painting and user input. If there's\n  // a pending paint or a pending input, then we should yield. But if there's\n  // neither, then we can yield less often while remaining responsive. We'll\n  // eventually yield regardless, since there could be a pending paint that\n  // wasn't accompanied by a call to `requestPaint`, or other main thread tasks\n  // like network events.\n\n\n  if (enableIsInputPending) {\n    if (needsPaint) {\n      // There's a pending paint (signaled by `requestPaint`). Yield now.\n      return true;\n    }\n\n    if (timeElapsed < continuousInputInterval) {\n      // We haven't blocked the thread for that long. Only yield if there's a\n      // pending discrete input (e.g. click). It's OK if there's pending\n      // continuous input (e.g. mouseover).\n      if (isInputPending !== null) {\n        return isInputPending();\n      }\n    } else if (timeElapsed < maxInterval) {\n      // Yield if there's either a pending discrete or continuous input.\n      if (isInputPending !== null) {\n        return isInputPending(continuousOptions);\n      }\n    } else {\n      // We've blocked the thread for a long time. Even if there's no pending\n      // input, there may be some other scheduled work that we don't know about,\n      // like a network event. Yield now.\n      return true;\n    }\n  } // `isInputPending` isn't available. Yield now.\n\n\n  return true;\n}\n\nfunction requestPaint() {\n  if (enableIsInputPending && navigator !== undefined && // $FlowFixMe[prop-missing]\n  navigator.scheduling !== undefined && // $FlowFixMe[incompatible-type]\n  navigator.scheduling.isInputPending !== undefined) {\n    needsPaint = true;\n  } // Since we yield every frame regardless, `requestPaint` has no effect.\n\n}\n\nfunction forceFrameRate(fps) {\n  if (fps < 0 || fps > 125) {\n    // Using console['error'] to evade Babel and ESLint\n    console['error']('forceFrameRate takes a positive int between 0 and 125, ' + 'forcing frame rates higher than 125 fps is not supported');\n    return;\n  }\n\n  if (fps > 0) {\n    frameInterval = Math.floor(1000 / fps);\n  } else {\n    // reset the framerate\n    frameInterval = frameYieldMs;\n  }\n}\n\nconst performWorkUntilDeadline = () => {\n  if (scheduledHostCallback !== null) {\n    const currentTime = getCurrentTime(); // Keep track of the start time so we can measure how long the main thread\n    // has been blocked.\n\n    startTime = currentTime;\n    const hasTimeRemaining = true; // If a scheduler task throws, exit the current browser task so the\n    // error can be observed.\n    //\n    // Intentionally not using a try-catch, since that makes some debugging\n    // techniques harder. Instead, if `scheduledHostCallback` errors, then\n    // `hasMoreWork` will remain true, and we'll continue the work loop.\n\n    let hasMoreWork = true;\n\n    try {\n      // $FlowFixMe[not-a-function] found when upgrading Flow\n      hasMoreWork = scheduledHostCallback(hasTimeRemaining, currentTime);\n    } finally {\n      if (hasMoreWork) {\n        // If there's more work, schedule the next message event at the end\n        // of the preceding one.\n        schedulePerformWorkUntilDeadline();\n      } else {\n        isMessageLoopRunning = false;\n        scheduledHostCallback = null;\n      }\n    }\n  } else {\n    isMessageLoopRunning = false;\n  } // Yielding to the browser will give it a chance to paint, so we can\n  // reset this.\n\n\n  needsPaint = false;\n};\n\nlet schedulePerformWorkUntilDeadline;\n\nif (typeof localSetImmediate === 'function') {\n  // Node.js and old IE.\n  // There's a few reasons for why we prefer setImmediate.\n  //\n  // Unlike MessageChannel, it doesn't prevent a Node.js process from exiting.\n  // (Even though this is a DOM fork of the Scheduler, you could get here\n  // with a mix of Node.js 15+, which has a MessageChannel, and jsdom.)\n  // https://github.com/facebook/react/issues/20756\n  //\n  // But also, it runs earlier which is the semantic we want.\n  // If other browsers ever implement it, it's better to use it.\n  // Although both of these would be inferior to native scheduling.\n  schedulePerformWorkUntilDeadline = () => {\n    localSetImmediate(performWorkUntilDeadline);\n  };\n} else if (typeof MessageChannel !== 'undefined') {\n  // DOM and Worker environments.\n  // We prefer MessageChannel because of the 4ms setTimeout clamping.\n  const channel = new MessageChannel();\n  const port = channel.port2;\n  channel.port1.onmessage = performWorkUntilDeadline;\n\n  schedulePerformWorkUntilDeadline = () => {\n    port.postMessage(null);\n  };\n} else {\n  // We should only fallback here in non-browser environments.\n  schedulePerformWorkUntilDeadline = () => {\n    // $FlowFixMe[not-a-function] nullable value\n    localSetTimeout(performWorkUntilDeadline, 0);\n  };\n}\n\nfunction requestHostCallback(callback) {\n  scheduledHostCallback = callback;\n\n  if (!isMessageLoopRunning) {\n    isMessageLoopRunning = true;\n    schedulePerformWorkUntilDeadline();\n  }\n}\n\nfunction requestHostTimeout(callback, ms) {\n  // $FlowFixMe[not-a-function] nullable value\n  taskTimeoutID = localSetTimeout(() => {\n    callback(getCurrentTime());\n  }, ms);\n}\n\nfunction cancelHostTimeout() {\n  // $FlowFixMe[not-a-function] nullable value\n  localClearTimeout(taskTimeoutID);\n  taskTimeoutID = -1;\n}\n\nexport { ImmediatePriority as unstable_ImmediatePriority, UserBlockingPriority as unstable_UserBlockingPriority, NormalPriority as unstable_NormalPriority, IdlePriority as unstable_IdlePriority, LowPriority as unstable_LowPriority, unstable_runWithPriority, unstable_next, unstable_scheduleCallback, unstable_cancelCallback, unstable_wrapCallback, unstable_getCurrentPriorityLevel, shouldYieldToHost as unstable_shouldYield, requestPaint as unstable_requestPaint, unstable_continueExecution, unstable_pauseExecution, unstable_getFirstCallbackNode, getCurrentTime as unstable_now, forceFrameRate as unstable_forceFrameRate };\nexport const unstable_Profiling = enableProfiling ? {\n  startLoggingProfilingEvents,\n  stopLoggingProfilingEvents\n} : null;","map":{"version":3,"sources":["/Users/bytedance/Desktop/sourceCodeReading/react-code/src/react/packages/scheduler/src/forks/Scheduler.js"],"names":["enableSchedulerDebugging","enableProfiling","enableIsInputPending","enableIsInputPendingContinuous","frameYieldMs","continuousYieldMs","maxYieldMs","push","pop","peek","ImmediatePriority","UserBlockingPriority","NormalPriority","LowPriority","IdlePriority","markTaskRun","markTaskYield","markTaskCompleted","markTaskCanceled","markTaskErrored","markSchedulerSuspended","markSchedulerUnsuspended","markTaskStart","stopLoggingProfilingEvents","startLoggingProfilingEvents","getCurrentTime","hasPerformanceNow","performance","now","localPerformance","localDate","Date","initialTime","maxSigned31BitInt","IMMEDIATE_PRIORITY_TIMEOUT","USER_BLOCKING_PRIORITY_TIMEOUT","NORMAL_PRIORITY_TIMEOUT","LOW_PRIORITY_TIMEOUT","IDLE_PRIORITY_TIMEOUT","taskQueue","timerQueue","taskIdCounter","isSchedulerPaused","currentTask","currentPriorityLevel","isPerformingWork","isHostCallbackScheduled","isHostTimeoutScheduled","localSetTimeout","setTimeout","localClearTimeout","clearTimeout","localSetImmediate","setImmediate","isInputPending","navigator","scheduling","undefined","bind","continuousOptions","includeContinuous","advanceTimers","currentTime","timer","callback","startTime","sortIndex","expirationTime","isQueued","handleTimeout","requestHostCallback","flushWork","firstTimer","requestHostTimeout","hasTimeRemaining","cancelHostTimeout","previousPriorityLevel","workLoop","error","shouldYieldToHost","priorityLevel","didUserCallbackTimeout","continuationCallback","unstable_runWithPriority","eventHandler","unstable_next","unstable_wrapCallback","parentPriorityLevel","apply","arguments","unstable_scheduleCallback","options","delay","timeout","newTask","id","unstable_pauseExecution","unstable_continueExecution","unstable_getFirstCallbackNode","unstable_cancelCallback","task","unstable_getCurrentPriorityLevel","isMessageLoopRunning","scheduledHostCallback","taskTimeoutID","frameInterval","continuousInputInterval","maxInterval","needsPaint","timeElapsed","requestPaint","forceFrameRate","fps","console","Math","floor","performWorkUntilDeadline","hasMoreWork","schedulePerformWorkUntilDeadline","MessageChannel","channel","port","port2","port1","onmessage","postMessage","ms","unstable_ImmediatePriority","unstable_UserBlockingPriority","unstable_NormalPriority","unstable_IdlePriority","unstable_LowPriority","unstable_shouldYield","unstable_requestPaint","unstable_now","unstable_forceFrameRate","unstable_Profiling"],"mappings":"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","sourcesContent":["/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\n/* eslint-disable no-var */\n\nimport type {PriorityLevel} from '../SchedulerPriorities';\n\nimport {\n  enableSchedulerDebugging,\n  enableProfiling,\n  enableIsInputPending,\n  enableIsInputPendingContinuous,\n  frameYieldMs,\n  continuousYieldMs,\n  maxYieldMs,\n} from '../SchedulerFeatureFlags';\n\nimport {push, pop, peek} from '../SchedulerMinHeap';\n\n// TODO: Use symbols?\nimport {\n  ImmediatePriority,\n  UserBlockingPriority,\n  NormalPriority,\n  LowPriority,\n  IdlePriority,\n} from '../SchedulerPriorities';\nimport {\n  markTaskRun,\n  markTaskYield,\n  markTaskCompleted,\n  markTaskCanceled,\n  markTaskErrored,\n  markSchedulerSuspended,\n  markSchedulerUnsuspended,\n  markTaskStart,\n  stopLoggingProfilingEvents,\n  startLoggingProfilingEvents,\n} from '../SchedulerProfiling';\n\nexport type Callback = boolean => ?Callback;\n\ntype Task = {\n  id: number,\n  callback: Callback | null,\n  priorityLevel: PriorityLevel,\n  startTime: number,\n  expirationTime: number,\n  sortIndex: number,\n  isQueued?: boolean,\n};\n\nlet getCurrentTime: () => number | DOMHighResTimeStamp;\nconst hasPerformanceNow =\n  // $FlowFixMe[method-unbinding]\n  typeof performance === 'object' && typeof performance.now === 'function';\n\nif (hasPerformanceNow) {\n  const localPerformance = performance;\n  getCurrentTime = () => localPerformance.now();\n} else {\n  const localDate = Date;\n  const initialTime = localDate.now();\n  getCurrentTime = () => localDate.now() - initialTime;\n}\n\n// Max 31 bit integer. The max integer size in V8 for 32-bit systems.\n// Math.pow(2, 30) - 1\n// 0b111111111111111111111111111111\nvar maxSigned31BitInt = 1073741823;\n\n// Times out immediately\nvar IMMEDIATE_PRIORITY_TIMEOUT = -1;\n// Eventually times out\nvar USER_BLOCKING_PRIORITY_TIMEOUT = 250;\nvar NORMAL_PRIORITY_TIMEOUT = 5000;\nvar LOW_PRIORITY_TIMEOUT = 10000;\n// Never times out\nvar IDLE_PRIORITY_TIMEOUT = maxSigned31BitInt;\n\n// Tasks are stored on a min heap\nvar taskQueue: Array<Task> = [];\nvar timerQueue: Array<Task> = [];\n\n// Incrementing id counter. Used to maintain insertion order.\nvar taskIdCounter = 1;\n\n// Pausing the scheduler is useful for debugging.\nvar isSchedulerPaused = false;\n\nvar currentTask = null;\nvar currentPriorityLevel = NormalPriority;\n\n// This is set while performing work, to prevent re-entrance.\nvar isPerformingWork = false;\n\nvar isHostCallbackScheduled = false;\nvar isHostTimeoutScheduled = false;\n\n// Capture local references to native APIs, in case a polyfill overrides them.\nconst localSetTimeout = typeof setTimeout === 'function' ? setTimeout : null;\nconst localClearTimeout =\n  typeof clearTimeout === 'function' ? clearTimeout : null;\nconst localSetImmediate =\n  typeof setImmediate !== 'undefined' ? setImmediate : null; // IE and Node.js + jsdom\n\nconst isInputPending =\n  typeof navigator !== 'undefined' &&\n  // $FlowFixMe[prop-missing]\n  navigator.scheduling !== undefined &&\n  // $FlowFixMe[incompatible-type]\n  navigator.scheduling.isInputPending !== undefined\n    ? navigator.scheduling.isInputPending.bind(navigator.scheduling)\n    : null;\n\nconst continuousOptions = {includeContinuous: enableIsInputPendingContinuous};\n\nfunction advanceTimers(currentTime: number) {\n  // Check for tasks that are no longer delayed and add them to the queue.\n  let timer = peek(timerQueue);\n  while (timer !== null) {\n    if (timer.callback === null) {\n      // Timer was cancelled.\n      pop(timerQueue);\n    } else if (timer.startTime <= currentTime) {\n      // Timer fired. Transfer to the task queue.\n      pop(timerQueue);\n      timer.sortIndex = timer.expirationTime;\n      push(taskQueue, timer);\n      if (enableProfiling) {\n        markTaskStart(timer, currentTime);\n        timer.isQueued = true;\n      }\n    } else {\n      // Remaining timers are pending.\n      return;\n    }\n    timer = peek(timerQueue);\n  }\n}\n\nfunction handleTimeout(currentTime: number) {\n  isHostTimeoutScheduled = false;\n  advanceTimers(currentTime);\n\n  if (!isHostCallbackScheduled) {\n    if (peek(taskQueue) !== null) {\n      isHostCallbackScheduled = true;\n      requestHostCallback(flushWork);\n    } else {\n      const firstTimer = peek(timerQueue);\n      if (firstTimer !== null) {\n        requestHostTimeout(handleTimeout, firstTimer.startTime - currentTime);\n      }\n    }\n  }\n}\n\nfunction flushWork(hasTimeRemaining: boolean, initialTime: number) {\n  if (enableProfiling) {\n    markSchedulerUnsuspended(initialTime);\n  }\n\n  // We'll need a host callback the next time work is scheduled.\n  isHostCallbackScheduled = false;\n  if (isHostTimeoutScheduled) {\n    // We scheduled a timeout but it's no longer needed. Cancel it.\n    isHostTimeoutScheduled = false;\n    cancelHostTimeout();\n  }\n\n  isPerformingWork = true;\n  const previousPriorityLevel = currentPriorityLevel;\n  try {\n    if (enableProfiling) {\n      try {\n        return workLoop(hasTimeRemaining, initialTime);\n      } catch (error) {\n        if (currentTask !== null) {\n          const currentTime = getCurrentTime();\n          // $FlowFixMe[incompatible-call] found when upgrading Flow\n          markTaskErrored(currentTask, currentTime);\n          // $FlowFixMe[incompatible-use] found when upgrading Flow\n          currentTask.isQueued = false;\n        }\n        throw error;\n      }\n    } else {\n      // No catch in prod code path.\n      return workLoop(hasTimeRemaining, initialTime);\n    }\n  } finally {\n    currentTask = null;\n    currentPriorityLevel = previousPriorityLevel;\n    isPerformingWork = false;\n    if (enableProfiling) {\n      const currentTime = getCurrentTime();\n      markSchedulerSuspended(currentTime);\n    }\n  }\n}\n\nfunction workLoop(hasTimeRemaining: boolean, initialTime: number) {\n  let currentTime = initialTime;\n  advanceTimers(currentTime);\n  currentTask = peek(taskQueue);\n  while (\n    currentTask !== null &&\n    !(enableSchedulerDebugging && isSchedulerPaused)\n  ) {\n    if (\n      currentTask.expirationTime > currentTime &&\n      (!hasTimeRemaining || shouldYieldToHost())\n    ) {\n      // This currentTask hasn't expired, and we've reached the deadline.\n      break;\n    }\n    // $FlowFixMe[incompatible-use] found when upgrading Flow\n    const callback = currentTask.callback;\n    if (typeof callback === 'function') {\n      // $FlowFixMe[incompatible-use] found when upgrading Flow\n      currentTask.callback = null;\n      // $FlowFixMe[incompatible-use] found when upgrading Flow\n      currentPriorityLevel = currentTask.priorityLevel;\n      // $FlowFixMe[incompatible-use] found when upgrading Flow\n      const didUserCallbackTimeout = currentTask.expirationTime <= currentTime;\n      if (enableProfiling) {\n        // $FlowFixMe[incompatible-call] found when upgrading Flow\n        markTaskRun(currentTask, currentTime);\n      }\n      const continuationCallback = callback(didUserCallbackTimeout);\n      currentTime = getCurrentTime();\n      if (typeof continuationCallback === 'function') {\n        // If a continuation is returned, immediately yield to the main thread\n        // regardless of how much time is left in the current time slice.\n        // $FlowFixMe[incompatible-use] found when upgrading Flow\n        currentTask.callback = continuationCallback;\n        if (enableProfiling) {\n          // $FlowFixMe[incompatible-call] found when upgrading Flow\n          markTaskYield(currentTask, currentTime);\n        }\n        advanceTimers(currentTime);\n        return true;\n      } else {\n        if (enableProfiling) {\n          // $FlowFixMe[incompatible-call] found when upgrading Flow\n          markTaskCompleted(currentTask, currentTime);\n          // $FlowFixMe[incompatible-use] found when upgrading Flow\n          currentTask.isQueued = false;\n        }\n        if (currentTask === peek(taskQueue)) {\n          pop(taskQueue);\n        }\n        advanceTimers(currentTime);\n      }\n    } else {\n      pop(taskQueue);\n    }\n    currentTask = peek(taskQueue);\n  }\n  // Return whether there's additional work\n  if (currentTask !== null) {\n    return true;\n  } else {\n    const firstTimer = peek(timerQueue);\n    if (firstTimer !== null) {\n      requestHostTimeout(handleTimeout, firstTimer.startTime - currentTime);\n    }\n    return false;\n  }\n}\n\nfunction unstable_runWithPriority<T>(\n  priorityLevel: PriorityLevel,\n  eventHandler: () => T,\n): T {\n  switch (priorityLevel) {\n    case ImmediatePriority:\n    case UserBlockingPriority:\n    case NormalPriority:\n    case LowPriority:\n    case IdlePriority:\n      break;\n    default:\n      priorityLevel = NormalPriority;\n  }\n\n  var previousPriorityLevel = currentPriorityLevel;\n  currentPriorityLevel = priorityLevel;\n\n  try {\n    return eventHandler();\n  } finally {\n    currentPriorityLevel = previousPriorityLevel;\n  }\n}\n\nfunction unstable_next<T>(eventHandler: () => T): T {\n  var priorityLevel;\n  switch (currentPriorityLevel) {\n    case ImmediatePriority:\n    case UserBlockingPriority:\n    case NormalPriority:\n      // Shift down to normal priority\n      priorityLevel = NormalPriority;\n      break;\n    default:\n      // Anything lower than normal priority should remain at the current level.\n      priorityLevel = currentPriorityLevel;\n      break;\n  }\n\n  var previousPriorityLevel = currentPriorityLevel;\n  currentPriorityLevel = priorityLevel;\n\n  try {\n    return eventHandler();\n  } finally {\n    currentPriorityLevel = previousPriorityLevel;\n  }\n}\n\nfunction unstable_wrapCallback<T: (...Array<mixed>) => mixed>(callback: T): T {\n  var parentPriorityLevel = currentPriorityLevel;\n  // $FlowFixMe[incompatible-return]\n  return function() {\n    // This is a fork of runWithPriority, inlined for performance.\n    var previousPriorityLevel = currentPriorityLevel;\n    currentPriorityLevel = parentPriorityLevel;\n\n    try {\n      return callback.apply(this, arguments);\n    } finally {\n      currentPriorityLevel = previousPriorityLevel;\n    }\n  };\n}\n\nfunction unstable_scheduleCallback(\n  priorityLevel: PriorityLevel,\n  callback: Callback,\n  options?: {delay: number},\n): Task {\n  var currentTime = getCurrentTime();\n\n  var startTime;\n  if (typeof options === 'object' && options !== null) {\n    var delay = options.delay;\n    if (typeof delay === 'number' && delay > 0) {\n      startTime = currentTime + delay;\n    } else {\n      startTime = currentTime;\n    }\n  } else {\n    startTime = currentTime;\n  }\n\n  var timeout;\n  switch (priorityLevel) {\n    case ImmediatePriority:\n      timeout = IMMEDIATE_PRIORITY_TIMEOUT;\n      break;\n    case UserBlockingPriority:\n      timeout = USER_BLOCKING_PRIORITY_TIMEOUT;\n      break;\n    case IdlePriority:\n      timeout = IDLE_PRIORITY_TIMEOUT;\n      break;\n    case LowPriority:\n      timeout = LOW_PRIORITY_TIMEOUT;\n      break;\n    case NormalPriority:\n    default:\n      timeout = NORMAL_PRIORITY_TIMEOUT;\n      break;\n  }\n\n  var expirationTime = startTime + timeout;\n\n  var newTask: Task = {\n    id: taskIdCounter++,\n    callback,\n    priorityLevel,\n    startTime,\n    expirationTime,\n    sortIndex: -1,\n  };\n  if (enableProfiling) {\n    newTask.isQueued = false;\n  }\n\n  if (startTime > currentTime) {\n    // This is a delayed task.\n    newTask.sortIndex = startTime;\n    push(timerQueue, newTask);\n    if (peek(taskQueue) === null && newTask === peek(timerQueue)) {\n      // All tasks are delayed, and this is the task with the earliest delay.\n      if (isHostTimeoutScheduled) {\n        // Cancel an existing timeout.\n        cancelHostTimeout();\n      } else {\n        isHostTimeoutScheduled = true;\n      }\n      // Schedule a timeout.\n      requestHostTimeout(handleTimeout, startTime - currentTime);\n    }\n  } else {\n    newTask.sortIndex = expirationTime;\n    push(taskQueue, newTask);\n    if (enableProfiling) {\n      markTaskStart(newTask, currentTime);\n      newTask.isQueued = true;\n    }\n    // Schedule a host callback, if needed. If we're already performing work,\n    // wait until the next time we yield.\n    if (!isHostCallbackScheduled && !isPerformingWork) {\n      isHostCallbackScheduled = true;\n      requestHostCallback(flushWork);\n    }\n  }\n\n  return newTask;\n}\n\nfunction unstable_pauseExecution() {\n  isSchedulerPaused = true;\n}\n\nfunction unstable_continueExecution() {\n  isSchedulerPaused = false;\n  if (!isHostCallbackScheduled && !isPerformingWork) {\n    isHostCallbackScheduled = true;\n    requestHostCallback(flushWork);\n  }\n}\n\nfunction unstable_getFirstCallbackNode(): Task | null {\n  return peek(taskQueue);\n}\n\nfunction unstable_cancelCallback(task: Task) {\n  if (enableProfiling) {\n    if (task.isQueued) {\n      const currentTime = getCurrentTime();\n      markTaskCanceled(task, currentTime);\n      task.isQueued = false;\n    }\n  }\n\n  // Null out the callback to indicate the task has been canceled. (Can't\n  // remove from the queue because you can't remove arbitrary nodes from an\n  // array based heap, only the first one.)\n  task.callback = null;\n}\n\nfunction unstable_getCurrentPriorityLevel(): PriorityLevel {\n  return currentPriorityLevel;\n}\n\nlet isMessageLoopRunning = false;\nlet scheduledHostCallback:\n  | null\n  | ((\n      hasTimeRemaining: boolean,\n      initialTime: DOMHighResTimeStamp | number,\n    ) => boolean) = null;\nlet taskTimeoutID: TimeoutID = (-1: any);\n\n// Scheduler periodically yields in case there is other work on the main\n// thread, like user events. By default, it yields multiple times per frame.\n// It does not attempt to align with frame boundaries, since most tasks don't\n// need to be frame aligned; for those that do, use requestAnimationFrame.\nlet frameInterval = frameYieldMs;\nconst continuousInputInterval = continuousYieldMs;\nconst maxInterval = maxYieldMs;\nlet startTime = -1;\n\nlet needsPaint = false;\n\nfunction shouldYieldToHost(): boolean {\n  const timeElapsed = getCurrentTime() - startTime;\n  if (timeElapsed < frameInterval) {\n    // The main thread has only been blocked for a really short amount of time;\n    // smaller than a single frame. Don't yield yet.\n    return false;\n  }\n\n  // The main thread has been blocked for a non-negligible amount of time. We\n  // may want to yield control of the main thread, so the browser can perform\n  // high priority tasks. The main ones are painting and user input. If there's\n  // a pending paint or a pending input, then we should yield. But if there's\n  // neither, then we can yield less often while remaining responsive. We'll\n  // eventually yield regardless, since there could be a pending paint that\n  // wasn't accompanied by a call to `requestPaint`, or other main thread tasks\n  // like network events.\n  if (enableIsInputPending) {\n    if (needsPaint) {\n      // There's a pending paint (signaled by `requestPaint`). Yield now.\n      return true;\n    }\n    if (timeElapsed < continuousInputInterval) {\n      // We haven't blocked the thread for that long. Only yield if there's a\n      // pending discrete input (e.g. click). It's OK if there's pending\n      // continuous input (e.g. mouseover).\n      if (isInputPending !== null) {\n        return isInputPending();\n      }\n    } else if (timeElapsed < maxInterval) {\n      // Yield if there's either a pending discrete or continuous input.\n      if (isInputPending !== null) {\n        return isInputPending(continuousOptions);\n      }\n    } else {\n      // We've blocked the thread for a long time. Even if there's no pending\n      // input, there may be some other scheduled work that we don't know about,\n      // like a network event. Yield now.\n      return true;\n    }\n  }\n\n  // `isInputPending` isn't available. Yield now.\n  return true;\n}\n\nfunction requestPaint() {\n  if (\n    enableIsInputPending &&\n    navigator !== undefined &&\n    // $FlowFixMe[prop-missing]\n    navigator.scheduling !== undefined &&\n    // $FlowFixMe[incompatible-type]\n    navigator.scheduling.isInputPending !== undefined\n  ) {\n    needsPaint = true;\n  }\n\n  // Since we yield every frame regardless, `requestPaint` has no effect.\n}\n\nfunction forceFrameRate(fps: number) {\n  if (fps < 0 || fps > 125) {\n    // Using console['error'] to evade Babel and ESLint\n    console['error'](\n      'forceFrameRate takes a positive int between 0 and 125, ' +\n        'forcing frame rates higher than 125 fps is not supported',\n    );\n    return;\n  }\n  if (fps > 0) {\n    frameInterval = Math.floor(1000 / fps);\n  } else {\n    // reset the framerate\n    frameInterval = frameYieldMs;\n  }\n}\n\nconst performWorkUntilDeadline = () => {\n  if (scheduledHostCallback !== null) {\n    const currentTime = getCurrentTime();\n    // Keep track of the start time so we can measure how long the main thread\n    // has been blocked.\n    startTime = currentTime;\n    const hasTimeRemaining = true;\n\n    // If a scheduler task throws, exit the current browser task so the\n    // error can be observed.\n    //\n    // Intentionally not using a try-catch, since that makes some debugging\n    // techniques harder. Instead, if `scheduledHostCallback` errors, then\n    // `hasMoreWork` will remain true, and we'll continue the work loop.\n    let hasMoreWork = true;\n    try {\n      // $FlowFixMe[not-a-function] found when upgrading Flow\n      hasMoreWork = scheduledHostCallback(hasTimeRemaining, currentTime);\n    } finally {\n      if (hasMoreWork) {\n        // If there's more work, schedule the next message event at the end\n        // of the preceding one.\n        schedulePerformWorkUntilDeadline();\n      } else {\n        isMessageLoopRunning = false;\n        scheduledHostCallback = null;\n      }\n    }\n  } else {\n    isMessageLoopRunning = false;\n  }\n  // Yielding to the browser will give it a chance to paint, so we can\n  // reset this.\n  needsPaint = false;\n};\n\nlet schedulePerformWorkUntilDeadline;\nif (typeof localSetImmediate === 'function') {\n  // Node.js and old IE.\n  // There's a few reasons for why we prefer setImmediate.\n  //\n  // Unlike MessageChannel, it doesn't prevent a Node.js process from exiting.\n  // (Even though this is a DOM fork of the Scheduler, you could get here\n  // with a mix of Node.js 15+, which has a MessageChannel, and jsdom.)\n  // https://github.com/facebook/react/issues/20756\n  //\n  // But also, it runs earlier which is the semantic we want.\n  // If other browsers ever implement it, it's better to use it.\n  // Although both of these would be inferior to native scheduling.\n  schedulePerformWorkUntilDeadline = () => {\n    localSetImmediate(performWorkUntilDeadline);\n  };\n} else if (typeof MessageChannel !== 'undefined') {\n  // DOM and Worker environments.\n  // We prefer MessageChannel because of the 4ms setTimeout clamping.\n  const channel = new MessageChannel();\n  const port = channel.port2;\n  channel.port1.onmessage = performWorkUntilDeadline;\n  schedulePerformWorkUntilDeadline = () => {\n    port.postMessage(null);\n  };\n} else {\n  // We should only fallback here in non-browser environments.\n  schedulePerformWorkUntilDeadline = () => {\n    // $FlowFixMe[not-a-function] nullable value\n    localSetTimeout(performWorkUntilDeadline, 0);\n  };\n}\n\nfunction requestHostCallback(callback) {\n  scheduledHostCallback = callback;\n  if (!isMessageLoopRunning) {\n    isMessageLoopRunning = true;\n    schedulePerformWorkUntilDeadline();\n  }\n}\n\nfunction requestHostTimeout(callback, ms: number) {\n  // $FlowFixMe[not-a-function] nullable value\n  taskTimeoutID = localSetTimeout(() => {\n    callback(getCurrentTime());\n  }, ms);\n}\n\nfunction cancelHostTimeout() {\n  // $FlowFixMe[not-a-function] nullable value\n  localClearTimeout(taskTimeoutID);\n  taskTimeoutID = ((-1: any): TimeoutID);\n}\n\nexport {\n  ImmediatePriority as unstable_ImmediatePriority,\n  UserBlockingPriority as unstable_UserBlockingPriority,\n  NormalPriority as unstable_NormalPriority,\n  IdlePriority as unstable_IdlePriority,\n  LowPriority as unstable_LowPriority,\n  unstable_runWithPriority,\n  unstable_next,\n  unstable_scheduleCallback,\n  unstable_cancelCallback,\n  unstable_wrapCallback,\n  unstable_getCurrentPriorityLevel,\n  shouldYieldToHost as unstable_shouldYield,\n  requestPaint as unstable_requestPaint,\n  unstable_continueExecution,\n  unstable_pauseExecution,\n  unstable_getFirstCallbackNode,\n  getCurrentTime as unstable_now,\n  forceFrameRate as unstable_forceFrameRate,\n};\n\nexport const unstable_Profiling: {\n  startLoggingProfilingEvents(): void,\n  stopLoggingProfilingEvents(): ArrayBuffer | null,\n} | null = enableProfiling\n  ? {\n      startLoggingProfilingEvents,\n      stopLoggingProfilingEvents,\n    }\n  : null;\n"]},"metadata":{},"sourceType":"module"}