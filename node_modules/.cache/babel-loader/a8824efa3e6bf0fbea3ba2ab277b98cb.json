{"ast":null,"code":"/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n */\nimport { createCursor, push, pop } from './ReactFiberStack';\nimport { getRenderLanes, setRenderLanes } from './ReactFiberWorkLoop';\nimport { NoLanes, mergeLanes } from './ReactFiberLane'; // TODO: Remove `renderLanes` context in favor of hidden context\n\n// TODO: This isn't being used yet, but it's intended to replace the\n// InvisibleParentContext that is currently managed by SuspenseContext.\nexport const currentTreeHiddenStackCursor = createCursor(null);\nexport const prevRenderLanesStackCursor = createCursor(NoLanes);\nexport function pushHiddenContext(fiber, context) {\n  const prevRenderLanes = getRenderLanes();\n  push(prevRenderLanesStackCursor, prevRenderLanes, fiber);\n  push(currentTreeHiddenStackCursor, context, fiber); // When rendering a subtree that's currently hidden, we must include all\n  // lanes that would have rendered if the hidden subtree hadn't been deferred.\n  // That is, in order to reveal content from hidden -> visible, we must commit\n  // all the updates that we skipped when we originally hid the tree.\n\n  setRenderLanes(mergeLanes(prevRenderLanes, context.baseLanes));\n}\nexport function reuseHiddenContextOnStack(fiber) {\n  // This subtree is not currently hidden, so we don't need to add any lanes\n  // to the render lanes. But we still need to push something to avoid a\n  // context mismatch. Reuse the existing context on the stack.\n  push(prevRenderLanesStackCursor, getRenderLanes(), fiber);\n  push(currentTreeHiddenStackCursor, currentTreeHiddenStackCursor.current, fiber);\n}\nexport function popHiddenContext(fiber) {\n  // Restore the previous render lanes from the stack\n  setRenderLanes(prevRenderLanesStackCursor.current);\n  pop(currentTreeHiddenStackCursor, fiber);\n  pop(prevRenderLanesStackCursor, fiber);\n}\nexport function isCurrentTreeHidden() {\n  return currentTreeHiddenStackCursor.current !== null;\n}","map":{"version":3,"sources":["/Users/bytedance/Desktop/sourceCodeReading/react-code/src/react/packages/react-reconciler/src/ReactFiberHiddenContext.js"],"names":["createCursor","push","pop","getRenderLanes","setRenderLanes","NoLanes","mergeLanes","currentTreeHiddenStackCursor","prevRenderLanesStackCursor","pushHiddenContext","fiber","context","prevRenderLanes","baseLanes","reuseHiddenContextOnStack","current","popHiddenContext","isCurrentTreeHidden"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAMA,SAAQA,YAAR,EAAsBC,IAAtB,EAA4BC,GAA5B,QAAsC,mBAAtC;AAEA,SAAQC,cAAR,EAAwBC,cAAxB,QAA6C,sBAA7C;AACA,SAAQC,OAAR,EAAiBC,UAAjB,QAAkC,kBAAlC,C,CAEA;;AASA;AACA;AACA,OAAO,MAAMC,4BAA+D,GAAGP,YAAY,CACzF,IADyF,CAApF;AAGP,OAAO,MAAMQ,0BAA8C,GAAGR,YAAY,CACxEK,OADwE,CAAnE;AAIP,OAAO,SAASI,iBAAT,CAA2BC,KAA3B,EAAyCC,OAAzC,EAAuE;AAC5E,QAAMC,eAAe,GAAGT,cAAc,EAAtC;AACAF,EAAAA,IAAI,CAACO,0BAAD,EAA6BI,eAA7B,EAA8CF,KAA9C,CAAJ;AACAT,EAAAA,IAAI,CAACM,4BAAD,EAA+BI,OAA/B,EAAwCD,KAAxC,CAAJ,CAH4E,CAK5E;AACA;AACA;AACA;;AACAN,EAAAA,cAAc,CAACE,UAAU,CAACM,eAAD,EAAkBD,OAAO,CAACE,SAA1B,CAAX,CAAd;AACD;AAED,OAAO,SAASC,yBAAT,CAAmCJ,KAAnC,EAAuD;AAC5D;AACA;AACA;AACAT,EAAAA,IAAI,CAACO,0BAAD,EAA6BL,cAAc,EAA3C,EAA+CO,KAA/C,CAAJ;AACAT,EAAAA,IAAI,CACFM,4BADE,EAEFA,4BAA4B,CAACQ,OAF3B,EAGFL,KAHE,CAAJ;AAKD;AAED,OAAO,SAASM,gBAAT,CAA0BN,KAA1B,EAA8C;AACnD;AACAN,EAAAA,cAAc,CAACI,0BAA0B,CAACO,OAA5B,CAAd;AAEAb,EAAAA,GAAG,CAACK,4BAAD,EAA+BG,KAA/B,CAAH;AACAR,EAAAA,GAAG,CAACM,0BAAD,EAA6BE,KAA7B,CAAH;AACD;AAED,OAAO,SAASO,mBAAT,GAAwC;AAC7C,SAAOV,4BAA4B,CAACQ,OAA7B,KAAyC,IAAhD;AACD","sourcesContent":["/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nimport type {Fiber} from './ReactInternalTypes';\nimport type {StackCursor} from './ReactFiberStack';\nimport type {Lanes} from './ReactFiberLane';\n\nimport {createCursor, push, pop} from './ReactFiberStack';\n\nimport {getRenderLanes, setRenderLanes} from './ReactFiberWorkLoop';\nimport {NoLanes, mergeLanes} from './ReactFiberLane';\n\n// TODO: Remove `renderLanes` context in favor of hidden context\ntype HiddenContext = {\n  // Represents the lanes that must be included when processing updates in\n  // order to reveal the hidden content.\n  // TODO: Remove `subtreeLanes` context from work loop in favor of this one.\n  baseLanes: number,\n  ...\n};\n\n// TODO: This isn't being used yet, but it's intended to replace the\n// InvisibleParentContext that is currently managed by SuspenseContext.\nexport const currentTreeHiddenStackCursor: StackCursor<HiddenContext | null> = createCursor(\n  null,\n);\nexport const prevRenderLanesStackCursor: StackCursor<Lanes> = createCursor(\n  NoLanes,\n);\n\nexport function pushHiddenContext(fiber: Fiber, context: HiddenContext): void {\n  const prevRenderLanes = getRenderLanes();\n  push(prevRenderLanesStackCursor, prevRenderLanes, fiber);\n  push(currentTreeHiddenStackCursor, context, fiber);\n\n  // When rendering a subtree that's currently hidden, we must include all\n  // lanes that would have rendered if the hidden subtree hadn't been deferred.\n  // That is, in order to reveal content from hidden -> visible, we must commit\n  // all the updates that we skipped when we originally hid the tree.\n  setRenderLanes(mergeLanes(prevRenderLanes, context.baseLanes));\n}\n\nexport function reuseHiddenContextOnStack(fiber: Fiber): void {\n  // This subtree is not currently hidden, so we don't need to add any lanes\n  // to the render lanes. But we still need to push something to avoid a\n  // context mismatch. Reuse the existing context on the stack.\n  push(prevRenderLanesStackCursor, getRenderLanes(), fiber);\n  push(\n    currentTreeHiddenStackCursor,\n    currentTreeHiddenStackCursor.current,\n    fiber,\n  );\n}\n\nexport function popHiddenContext(fiber: Fiber): void {\n  // Restore the previous render lanes from the stack\n  setRenderLanes(prevRenderLanesStackCursor.current);\n\n  pop(currentTreeHiddenStackCursor, fiber);\n  pop(prevRenderLanesStackCursor, fiber);\n}\n\nexport function isCurrentTreeHidden(): boolean {\n  return currentTreeHiddenStackCursor.current !== null;\n}\n"]},"metadata":{},"sourceType":"module"}