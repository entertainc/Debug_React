{"ast":null,"code":"/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n */\nimport { enableCache } from 'shared/ReactFeatureFlags';\nimport { readContext } from './ReactFiberNewContext';\nimport { CacheContext } from './ReactFiberCacheComponent';\n\nfunction getCacheSignal() {\n  if (!enableCache) {\n    throw new Error('Not implemented.');\n  }\n\n  const cache = readContext(CacheContext);\n  return cache.controller.signal;\n}\n\nfunction getCacheForType(resourceType) {\n  if (!enableCache) {\n    throw new Error('Not implemented.');\n  }\n\n  const cache = readContext(CacheContext);\n  let cacheForType = cache.data.get(resourceType);\n\n  if (cacheForType === undefined) {\n    cacheForType = resourceType();\n    cache.data.set(resourceType, cacheForType);\n  }\n\n  return cacheForType;\n}\n\nexport const DefaultCacheDispatcher = {\n  getCacheSignal,\n  getCacheForType\n};","map":{"version":3,"sources":["/Users/bytedance/Desktop/sourceCodeReading/react-code/src/react/packages/react-reconciler/src/ReactFiberCache.js"],"names":["enableCache","readContext","CacheContext","getCacheSignal","Error","cache","controller","signal","getCacheForType","resourceType","cacheForType","data","get","undefined","set","DefaultCacheDispatcher"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAKA,SAAQA,WAAR,QAA0B,0BAA1B;AACA,SAAQC,WAAR,QAA0B,wBAA1B;AACA,SAAQC,YAAR,QAA2B,4BAA3B;;AAEA,SAASC,cAAT,GAAuC;AACrC,MAAI,CAACH,WAAL,EAAkB;AAChB,UAAM,IAAII,KAAJ,CAAU,kBAAV,CAAN;AACD;;AACD,QAAMC,KAAY,GAAGJ,WAAW,CAACC,YAAD,CAAhC;AACA,SAAOG,KAAK,CAACC,UAAN,CAAiBC,MAAxB;AACD;;AAED,SAASC,eAAT,CAA4BC,YAA5B,EAAsD;AACpD,MAAI,CAACT,WAAL,EAAkB;AAChB,UAAM,IAAII,KAAJ,CAAU,kBAAV,CAAN;AACD;;AACD,QAAMC,KAAY,GAAGJ,WAAW,CAACC,YAAD,CAAhC;AACA,MAAIQ,YAAsB,GAAIL,KAAK,CAACM,IAAN,CAAWC,GAAX,CAAeH,YAAf,CAA9B;;AACA,MAAIC,YAAY,KAAKG,SAArB,EAAgC;AAC9BH,IAAAA,YAAY,GAAGD,YAAY,EAA3B;AACAJ,IAAAA,KAAK,CAACM,IAAN,CAAWG,GAAX,CAAeL,YAAf,EAA6BC,YAA7B;AACD;;AACD,SAAOA,YAAP;AACD;;AAED,OAAO,MAAMK,sBAAuC,GAAG;AACrDZ,EAAAA,cADqD;AAErDK,EAAAA;AAFqD,CAAhD","sourcesContent":["/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nimport type {CacheDispatcher} from './ReactInternalTypes';\nimport type {Cache} from './ReactFiberCacheComponent';\n\nimport {enableCache} from 'shared/ReactFeatureFlags';\nimport {readContext} from './ReactFiberNewContext';\nimport {CacheContext} from './ReactFiberCacheComponent';\n\nfunction getCacheSignal(): AbortSignal {\n  if (!enableCache) {\n    throw new Error('Not implemented.');\n  }\n  const cache: Cache = readContext(CacheContext);\n  return cache.controller.signal;\n}\n\nfunction getCacheForType<T>(resourceType: () => T): T {\n  if (!enableCache) {\n    throw new Error('Not implemented.');\n  }\n  const cache: Cache = readContext(CacheContext);\n  let cacheForType: T | void = (cache.data.get(resourceType): any);\n  if (cacheForType === undefined) {\n    cacheForType = resourceType();\n    cache.data.set(resourceType, cacheForType);\n  }\n  return cacheForType;\n}\n\nexport const DefaultCacheDispatcher: CacheDispatcher = {\n  getCacheSignal,\n  getCacheForType,\n};\n"]},"metadata":{},"sourceType":"module"}