{"ast":null,"code":"/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n */\nimport hasOwnProperty from 'shared/hasOwnProperty';\nexport function warnOnMissingHrefAndRel(pendingProps, currentProps) {\n  if (__DEV__) {\n    if (currentProps != null) {\n      const originalResourceName = typeof currentProps.href === 'string' ? `Resource with href \"${currentProps.href}\"` : 'Resource';\n      const originalRelStatement = getValueDescriptorExpectingEnumForWarning(currentProps.rel);\n      const pendingRel = getValueDescriptorExpectingEnumForWarning(pendingProps.rel);\n      const pendingHref = getValueDescriptorExpectingEnumForWarning(pendingProps.href);\n\n      if (typeof pendingProps.rel !== 'string') {\n        console.error('A <link> previously rendered as a %s with rel \"%s\" but was updated with an invalid rel: %s. When a link' + ' does not have a valid rel prop it is not represented in the DOM. If this is intentional, instead' + ' do not render the <link> anymore.', originalResourceName, originalRelStatement, pendingRel);\n      } else if (typeof pendingProps.href !== 'string') {\n        console.error('A <link> previously rendered as a %s but was updated with an invalid href prop: %s. When a link' + ' does not have a valid href prop it is not represented in the DOM. If this is intentional, instead' + ' do not render the <link> anymore.', originalResourceName, pendingHref);\n      }\n    } else {\n      const pendingRel = getValueDescriptorExpectingEnumForWarning(pendingProps.rel);\n      const pendingHref = getValueDescriptorExpectingEnumForWarning(pendingProps.href);\n\n      if (typeof pendingProps.rel !== 'string') {\n        console.error('A <link> is rendering with an invalid rel: %s. When a link' + ' does not have a valid rel prop it is not represented in the DOM. If this is intentional, instead' + ' do not render the <link> anymore.', pendingRel);\n      } else if (typeof pendingProps.href !== 'string') {\n        console.error('A <link> is rendering with an invalid href: %s. When a link' + ' does not have a valid href prop it is not represented in the DOM. If this is intentional, instead' + ' do not render the <link> anymore.', pendingHref);\n      }\n    }\n  }\n}\nexport function validatePreloadResourceDifference(originalProps, originalImplicit, latestProps, latestImplicit) {\n  if (__DEV__) {\n    const {\n      href\n    } = originalProps;\n    const originalWarningName = getResourceNameForWarning('preload', originalProps, originalImplicit);\n    const latestWarningName = getResourceNameForWarning('preload', latestProps, latestImplicit);\n\n    if (latestProps.as !== originalProps.as) {\n      console.error('A %s is using the same href \"%s\" as a %s. This is always an error and React will only keep the first preload' + ' for any given href, discarding subsequent instances. To fix, find where you are using this href in link' + ' tags or in calls to ReactDOM.preload() or ReactDOM.preinit() and either make the Resource types agree or' + ' update the hrefs to be distinct for different Resource types.', latestWarningName, href, originalWarningName);\n    } else {\n      let missingProps = null;\n      let extraProps = null;\n      let differentProps = null;\n\n      if (originalProps.media != null && latestProps.media == null) {\n        missingProps = missingProps || {};\n        missingProps.media = originalProps.media;\n      }\n\n      for (const propName in latestProps) {\n        const propValue = latestProps[propName];\n        const originalValue = originalProps[propName];\n\n        if (propValue != null && propValue !== originalValue) {\n          if (originalValue == null) {\n            extraProps = extraProps || {};\n            extraProps[propName] = propValue;\n          } else {\n            differentProps = differentProps || {};\n            differentProps[propName] = {\n              original: originalValue,\n              latest: propValue\n            };\n          }\n        }\n      }\n\n      if (missingProps || extraProps || differentProps) {\n        warnDifferentProps(href, 'href', originalWarningName, latestWarningName, extraProps, missingProps, differentProps);\n      }\n    }\n  }\n}\nexport function validateStyleResourceDifference(originalProps, latestProps) {\n  if (__DEV__) {\n    const {\n      href\n    } = originalProps; // eslint-disable-next-line no-labels\n\n    const originalWarningName = getResourceNameForWarning('style', originalProps, false);\n    const latestWarningName = getResourceNameForWarning('style', latestProps, false);\n    let missingProps = null;\n    let extraProps = null;\n    let differentProps = null;\n\n    if (originalProps.media != null && latestProps.media == null) {\n      missingProps = missingProps || {};\n      missingProps.media = originalProps.media;\n    }\n\n    for (let propName in latestProps) {\n      const propValue = latestProps[propName];\n      const originalValue = originalProps[propName];\n\n      if (propValue != null && propValue !== originalValue) {\n        propName = propName === 'data-precedence' ? 'precedence' : propName;\n\n        if (originalValue == null) {\n          extraProps = extraProps || {};\n          extraProps[propName] = propValue;\n        } else {\n          differentProps = differentProps || {};\n          differentProps[propName] = {\n            original: originalValue,\n            latest: propValue\n          };\n        }\n      }\n    }\n\n    if (missingProps || extraProps || differentProps) {\n      warnDifferentProps(href, 'href', originalWarningName, latestWarningName, extraProps, missingProps, differentProps);\n    }\n  }\n}\nexport function validateScriptResourceDifference(originalProps, latestProps) {\n  if (__DEV__) {\n    const {\n      src\n    } = originalProps; // eslint-disable-next-line no-labels\n\n    const originalWarningName = getResourceNameForWarning('script', originalProps, false);\n    const latestWarningName = getResourceNameForWarning('script', latestProps, false);\n    let extraProps = null;\n    let differentProps = null;\n\n    for (const propName in latestProps) {\n      const propValue = latestProps[propName];\n      const originalValue = originalProps[propName];\n\n      if (propValue != null && propValue !== originalValue) {\n        if (originalValue == null) {\n          extraProps = extraProps || {};\n          extraProps[propName] = propValue;\n        } else {\n          differentProps = differentProps || {};\n          differentProps[propName] = {\n            original: originalValue,\n            latest: propValue\n          };\n        }\n      }\n    }\n\n    if (extraProps || differentProps) {\n      warnDifferentProps(src, 'src', originalWarningName, latestWarningName, extraProps, null, differentProps);\n    }\n  }\n}\nexport function validateStyleAndHintProps(preloadProps, styleProps, implicitPreload) {\n  if (__DEV__) {\n    const {\n      href\n    } = preloadProps;\n    const originalWarningName = getResourceNameForWarning('preload', preloadProps, implicitPreload);\n    const latestWarningName = getResourceNameForWarning('style', styleProps, false);\n\n    if (preloadProps.as !== 'style') {\n      console.error('While creating a %s for href \"%s\" a %s for this same href was found. When preloading a stylesheet the' + ' \"as\" prop must be of type \"style\". This most likely ocurred by rendering a preload link with an incorrect' + ' \"as\" prop or by calling ReactDOM.preload with an incorrect \"as\" option.', latestWarningName, href, originalWarningName);\n    }\n\n    let missingProps = null;\n    let extraProps = null;\n    let differentProps = null;\n\n    for (const propName in styleProps) {\n      const styleValue = styleProps[propName];\n      const preloadValue = preloadProps[propName];\n\n      switch (propName) {\n        // Check for difference on specific props that cross over or influence\n        // the relationship between the preload and stylesheet\n        case 'crossOrigin':\n        case 'referrerPolicy':\n        case 'media':\n        case 'title':\n          {\n            if (preloadValue !== styleValue && !(preloadValue == null && styleValue == null)) {\n              if (styleValue == null) {\n                missingProps = missingProps || {};\n                missingProps[propName] = preloadValue;\n              } else if (preloadValue == null) {\n                extraProps = extraProps || {};\n                extraProps[propName] = styleValue;\n              } else {\n                differentProps = differentProps || {};\n                differentProps[propName] = {\n                  original: preloadValue,\n                  latest: styleValue\n                };\n              }\n            }\n          }\n      }\n    }\n\n    if (missingProps || extraProps || differentProps) {\n      warnDifferentProps(href, 'href', originalWarningName, latestWarningName, extraProps, missingProps, differentProps);\n    }\n  }\n}\nexport function validateScriptAndHintProps(preloadProps, scriptProps, implicitPreload) {\n  if (__DEV__) {\n    const {\n      href\n    } = preloadProps;\n    const originalWarningName = getResourceNameForWarning('preload', preloadProps, implicitPreload);\n    const latestWarningName = getResourceNameForWarning('script', scriptProps, false);\n\n    if (preloadProps.as !== 'script') {\n      console.error('While creating a %s for href \"%s\" a %s for this same url was found. When preloading a script the' + ' \"as\" prop must be of type \"script\". This most likely ocurred by rendering a preload link with an incorrect' + ' \"as\" prop or by calling ReactDOM.preload with an incorrect \"as\" option.', latestWarningName, href, originalWarningName);\n    }\n\n    let missingProps = null;\n    let extraProps = null;\n    let differentProps = null;\n\n    for (const propName in scriptProps) {\n      const scriptValue = scriptProps[propName];\n      const preloadValue = preloadProps[propName];\n\n      switch (propName) {\n        // Check for difference on specific props that cross over or influence\n        // the relationship between the preload and stylesheet\n        case 'crossOrigin':\n        case 'referrerPolicy':\n        case 'integrity':\n          {\n            if (preloadValue !== scriptValue && !(preloadValue == null && scriptValue == null)) {\n              if (scriptValue == null) {\n                missingProps = missingProps || {};\n                missingProps[propName] = preloadValue;\n              } else if (preloadValue == null) {\n                extraProps = extraProps || {};\n                extraProps[propName] = scriptValue;\n              } else {\n                differentProps = differentProps || {};\n                differentProps[propName] = {\n                  original: preloadValue,\n                  latest: scriptValue\n                };\n              }\n            }\n          }\n      }\n    }\n\n    if (missingProps || extraProps || differentProps) {\n      warnDifferentProps(href, 'href', originalWarningName, latestWarningName, extraProps, missingProps, differentProps);\n    }\n  }\n}\n\nfunction warnDifferentProps(url, urlPropKey, originalName, latestName, extraProps, missingProps, differentProps) {\n  if (__DEV__) {\n    const juxtaposedNameStatement = latestName === originalName ? 'an earlier instance of this Resource' : `a ${originalName} with the same ${urlPropKey}`;\n    let comparisonStatement = '';\n\n    if (missingProps !== null && typeof missingProps === 'object') {\n      for (const propName in missingProps) {\n        comparisonStatement += `\\n  ${propName}: missing or null in latest props, \"${missingProps[propName]}\" in original props`;\n      }\n    }\n\n    if (extraProps !== null && typeof extraProps === 'object') {\n      for (const propName in extraProps) {\n        comparisonStatement += `\\n  ${propName}: \"${extraProps[propName]}\" in latest props, missing or null in original props`;\n      }\n    }\n\n    if (differentProps !== null && typeof differentProps === 'object') {\n      for (const propName in differentProps) {\n        comparisonStatement += `\\n  ${propName}: \"${differentProps[propName].latest}\" in latest props, \"${differentProps[propName].original}\" in original props`;\n      }\n    }\n\n    console.error('A %s with %s \"%s\" has props that disagree with those found on %s. Resources always use the props' + ' that were provided the first time they are encountered so any differences will be ignored. Please' + ' update Resources that share an %s to have props that agree. The differences are described below.%s', latestName, urlPropKey, url, juxtaposedNameStatement, urlPropKey, comparisonStatement);\n  }\n}\n\nfunction getResourceNameForWarning(type, props, implicit) {\n  if (__DEV__) {\n    switch (type) {\n      case 'style':\n        {\n          return 'style Resource';\n        }\n\n      case 'script':\n        {\n          return 'script Resource';\n        }\n\n      case 'preload':\n        {\n          if (implicit) {\n            return `preload for a ${props.as} Resource`;\n          }\n\n          return `preload Resource (as \"${props.as}\")`;\n        }\n    }\n  }\n\n  return 'Resource';\n}\n\nexport function validateURLKeyedUpdatedProps(pendingProps, currentProps, resourceType, urlPropKey) {\n  if (__DEV__) {\n    // This function should never be called if we don't have /srcs so we don't bother considering\n    // Whether they are null or undefined\n    if (pendingProps[urlPropKey] === currentProps[urlPropKey]) {\n      // If we have the same href/src we need all other props to be the same\n      let missingProps;\n      let extraProps;\n      let differentProps;\n      const allProps = Array.from(new Set(Object.keys(currentProps).concat(Object.keys(pendingProps))));\n\n      for (let i = 0; i < allProps.length; i++) {\n        const propName = allProps[i];\n        const pendingValue = pendingProps[propName];\n        const currentValue = currentProps[propName];\n\n        if (pendingValue !== currentValue && !(pendingValue == null && currentValue == null)) {\n          if (pendingValue == null) {\n            missingProps = missingProps || {};\n            missingProps[propName] = currentValue;\n          } else if (currentValue == null) {\n            extraProps = extraProps || {};\n            extraProps[propName] = pendingValue;\n          } else {\n            differentProps = differentProps || {};\n            differentProps[propName] = {\n              original: currentValue,\n              latest: pendingValue\n            };\n          }\n        }\n      }\n\n      if (missingProps || extraProps || differentProps) {\n        const latestWarningName = getResourceNameForWarning(resourceType, currentProps, false);\n        let comparisonStatement = '';\n\n        if (missingProps !== null && typeof missingProps === 'object') {\n          for (const propName in missingProps) {\n            comparisonStatement += `\\n  ${propName}: missing or null in latest props, \"${missingProps[propName]}\" in original props`;\n          }\n        }\n\n        if (extraProps !== null && typeof extraProps === 'object') {\n          for (const propName in extraProps) {\n            comparisonStatement += `\\n  ${propName}: \"${extraProps[propName]}\" in latest props, missing or null in original props`;\n          }\n        }\n\n        if (differentProps !== null && typeof differentProps === 'object') {\n          for (const propName in differentProps) {\n            comparisonStatement += `\\n  ${propName}: \"${differentProps[propName].latest}\" in latest props, \"${differentProps[propName].original}\" in original props`;\n          }\n        }\n\n        console.error('A %s with %s \"%s\" received new props with different values from the props used' + ' when this Resource was first rendered. React will only use the props provided when' + ' this resource was first rendered until a new %s is provided. Unlike conventional' + ' DOM elements, Resources instances do not have a one to one correspondence with Elements' + ' in the DOM and as such, every instance of a Resource for a single Resource identifier' + ' (%s) must have props that agree with each other. The differences are described below.%s', latestWarningName, urlPropKey, currentProps[urlPropKey], urlPropKey, urlPropKey, comparisonStatement);\n        return true;\n      }\n    }\n  }\n\n  return false;\n}\nexport function validateLinkPropsForStyleResource(props) {\n  if (__DEV__) {\n    // This should only be called when we know we are opting into Resource semantics (i.e. precedence is not null)\n    const {\n      href,\n      onLoad,\n      onError,\n      disabled\n    } = props;\n    const allProps = ['onLoad', 'onError', 'disabled'];\n    const includedProps = [];\n    if (onLoad) includedProps.push('onLoad');\n    if (onError) includedProps.push('onError');\n    if (disabled != null) includedProps.push('disabled');\n    const allPropsUnionPhrase = propNamesListJoin(allProps, 'or');\n    let includedPropsPhrase = propNamesListJoin(includedProps, 'and');\n    includedPropsPhrase += includedProps.length === 1 ? ' prop' : ' props';\n\n    if (includedProps.length) {\n      console.error('A link (rel=\"stylesheet\") element with href \"%s\" has the precedence prop but also included the %s.' + ' When using %s React will opt out of Resource behavior. If you meant for this' + ' element to be treated as a Resource remove the %s. Otherwise remove the precedence prop.', href, includedPropsPhrase, allPropsUnionPhrase, includedPropsPhrase);\n      return true;\n    }\n  }\n\n  return false;\n}\n\nfunction propNamesListJoin(list, combinator) {\n  switch (list.length) {\n    case 0:\n      return '';\n\n    case 1:\n      return list[0];\n\n    case 2:\n      return list[0] + ' ' + combinator + ' ' + list[1];\n\n    default:\n      return list.slice(0, -1).join(', ') + ', ' + combinator + ' ' + list[list.length - 1];\n  }\n}\n\nexport function validateLinkPropsForPreloadResource(linkProps) {\n  if (__DEV__) {\n    const {\n      href,\n      as\n    } = linkProps;\n\n    if (as === 'font') {\n      const name = getResourceNameForWarning('preload', linkProps, false);\n\n      if (!hasOwnProperty.call(linkProps, 'crossOrigin')) {\n        console.error('A %s with href \"%s\" did not specify the crossOrigin prop. Font preloads must always use' + ' anonymouse CORS mode. To fix add an empty string, \"anonymous\", or any other string' + ' value except \"use-credentials\" for the crossOrigin prop of all font preloads.', name, href);\n      } else if (linkProps.crossOrigin === 'use-credentials') {\n        console.error('A %s with href \"%s\" specified a crossOrigin value of \"use-credentials\". Font preloads must always use' + ' anonymouse CORS mode. To fix use an empty string, \"anonymous\", or any other string' + ' value except \"use-credentials\" for the crossOrigin prop of all font preloads.', name, href);\n      }\n    }\n  }\n}\nexport function validatePreloadArguments(href, options) {\n  if (__DEV__) {\n    if (!href || typeof href !== 'string') {\n      const typeOfArg = getValueDescriptorExpectingObjectForWarning(href);\n      console.error('ReactDOM.preload() expected the first argument to be a string representing an href but found %s instead.', typeOfArg);\n    } else if (typeof options !== 'object' || options === null) {\n      const typeOfArg = getValueDescriptorExpectingObjectForWarning(options);\n      console.error('ReactDOM.preload() expected the second argument to be an options argument containing at least an \"as\" property' + ' specifying the Resource type. It found %s instead. The href for the preload call where this warning originated is \"%s\".', typeOfArg, href);\n    } else {\n      const as = options.as;\n\n      switch (as) {\n        // Font specific validation of options\n        case 'font':\n          {\n            if (options.crossOrigin === 'use-credentials') {\n              console.error('ReactDOM.preload() was called with an \"as\" type of \"font\" and with a \"crossOrigin\" option of \"use-credentials\".' + ' Fonts preloading must use crossOrigin \"anonymous\" to be functional. Please update your font preload to omit' + ' the crossOrigin option or change it to any other value than \"use-credentials\" (Browsers default all other values' + ' to anonymous mode). The href for the preload call where this warning originated is \"%s\"', href);\n            }\n\n            break;\n          }\n\n        case 'script':\n        case 'style':\n          {\n            break;\n          }\n        // We have an invalid as type and need to warn\n\n        default:\n          {\n            const typeOfAs = getValueDescriptorExpectingEnumForWarning(as);\n            console.error('ReactDOM.preload() expected a valid \"as\" type in the options (second) argument but found %s instead.' + ' Please use one of the following valid values instead: %s. The href for the preload call where this' + ' warning originated is \"%s\".', typeOfAs, '\"style\", \"font\", or \"script\"', href);\n          }\n      }\n    }\n  }\n}\nexport function validatePreinitArguments(href, options) {\n  if (__DEV__) {\n    if (!href || typeof href !== 'string') {\n      const typeOfArg = getValueDescriptorExpectingObjectForWarning(href);\n      console.error('ReactDOM.preinit() expected the first argument to be a string representing an href but found %s instead.', typeOfArg);\n    } else if (typeof options !== 'object' || options === null) {\n      const typeOfArg = getValueDescriptorExpectingObjectForWarning(options);\n      console.error('ReactDOM.preinit() expected the second argument to be an options argument containing at least an \"as\" property' + ' specifying the Resource type. It found %s instead. The href for the preload call where this warning originated is \"%s\".', typeOfArg, href);\n    } else {\n      const as = options.as;\n\n      switch (as) {\n        case 'style':\n        case 'script':\n          {\n            break;\n          }\n        // We have an invalid as type and need to warn\n\n        default:\n          {\n            const typeOfAs = getValueDescriptorExpectingEnumForWarning(as);\n            console.error('ReactDOM.preinit() expected the second argument to be an options argument containing at least an \"as\" property' + ' specifying the Resource type. It found %s instead. Currently, valid resource types for for preinit are \"style\"' + ' and \"script\". The href for the preinit call where this warning originated is \"%s\".', typeOfAs, href);\n          }\n      }\n    }\n  }\n}\n\nfunction getValueDescriptorExpectingObjectForWarning(thing) {\n  return thing === null ? 'null' : thing === undefined ? 'undefined' : thing === '' ? 'an empty string' : `something with type \"${typeof thing}\"`;\n}\n\nfunction getValueDescriptorExpectingEnumForWarning(thing) {\n  return thing === null ? 'null' : thing === undefined ? 'undefined' : thing === '' ? 'an empty string' : typeof thing === 'string' ? JSON.stringify(thing) : `something with type \"${typeof thing}\"`;\n}","map":{"version":3,"sources":["/Users/bytedance/Desktop/sourceCodeReading/react-code/src/react/packages/react-dom-bindings/src/shared/ReactDOMResourceValidation.js"],"names":["hasOwnProperty","warnOnMissingHrefAndRel","pendingProps","currentProps","__DEV__","originalResourceName","href","originalRelStatement","getValueDescriptorExpectingEnumForWarning","rel","pendingRel","pendingHref","console","error","validatePreloadResourceDifference","originalProps","originalImplicit","latestProps","latestImplicit","originalWarningName","getResourceNameForWarning","latestWarningName","as","missingProps","extraProps","differentProps","media","propName","propValue","originalValue","original","latest","warnDifferentProps","validateStyleResourceDifference","validateScriptResourceDifference","src","validateStyleAndHintProps","preloadProps","styleProps","implicitPreload","styleValue","preloadValue","validateScriptAndHintProps","scriptProps","scriptValue","url","urlPropKey","originalName","latestName","juxtaposedNameStatement","comparisonStatement","type","props","implicit","validateURLKeyedUpdatedProps","resourceType","allProps","Array","from","Set","Object","keys","concat","i","length","pendingValue","currentValue","validateLinkPropsForStyleResource","onLoad","onError","disabled","includedProps","push","allPropsUnionPhrase","propNamesListJoin","includedPropsPhrase","list","combinator","slice","join","validateLinkPropsForPreloadResource","linkProps","name","call","crossOrigin","validatePreloadArguments","options","typeOfArg","getValueDescriptorExpectingObjectForWarning","typeOfAs","validatePreinitArguments","thing","undefined","JSON","stringify"],"mappings":"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","sourcesContent":["/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nimport hasOwnProperty from 'shared/hasOwnProperty';\n\ntype Props = {[string]: mixed};\n\nexport function warnOnMissingHrefAndRel(\n  pendingProps: Props,\n  currentProps: ?Props,\n) {\n  if (__DEV__) {\n    if (currentProps != null) {\n      const originalResourceName =\n        typeof currentProps.href === 'string'\n          ? `Resource with href \"${currentProps.href}\"`\n          : 'Resource';\n      const originalRelStatement = getValueDescriptorExpectingEnumForWarning(\n        currentProps.rel,\n      );\n      const pendingRel = getValueDescriptorExpectingEnumForWarning(\n        pendingProps.rel,\n      );\n      const pendingHref = getValueDescriptorExpectingEnumForWarning(\n        pendingProps.href,\n      );\n      if (typeof pendingProps.rel !== 'string') {\n        console.error(\n          'A <link> previously rendered as a %s with rel \"%s\" but was updated with an invalid rel: %s. When a link' +\n            ' does not have a valid rel prop it is not represented in the DOM. If this is intentional, instead' +\n            ' do not render the <link> anymore.',\n          originalResourceName,\n          originalRelStatement,\n          pendingRel,\n        );\n      } else if (typeof pendingProps.href !== 'string') {\n        console.error(\n          'A <link> previously rendered as a %s but was updated with an invalid href prop: %s. When a link' +\n            ' does not have a valid href prop it is not represented in the DOM. If this is intentional, instead' +\n            ' do not render the <link> anymore.',\n          originalResourceName,\n          pendingHref,\n        );\n      }\n    } else {\n      const pendingRel = getValueDescriptorExpectingEnumForWarning(\n        pendingProps.rel,\n      );\n      const pendingHref = getValueDescriptorExpectingEnumForWarning(\n        pendingProps.href,\n      );\n      if (typeof pendingProps.rel !== 'string') {\n        console.error(\n          'A <link> is rendering with an invalid rel: %s. When a link' +\n            ' does not have a valid rel prop it is not represented in the DOM. If this is intentional, instead' +\n            ' do not render the <link> anymore.',\n          pendingRel,\n        );\n      } else if (typeof pendingProps.href !== 'string') {\n        console.error(\n          'A <link> is rendering with an invalid href: %s. When a link' +\n            ' does not have a valid href prop it is not represented in the DOM. If this is intentional, instead' +\n            ' do not render the <link> anymore.',\n          pendingHref,\n        );\n      }\n    }\n  }\n}\n\nexport function validatePreloadResourceDifference(\n  originalProps: any,\n  originalImplicit: boolean,\n  latestProps: any,\n  latestImplicit: boolean,\n) {\n  if (__DEV__) {\n    const {href} = originalProps;\n    const originalWarningName = getResourceNameForWarning(\n      'preload',\n      originalProps,\n      originalImplicit,\n    );\n    const latestWarningName = getResourceNameForWarning(\n      'preload',\n      latestProps,\n      latestImplicit,\n    );\n\n    if (latestProps.as !== originalProps.as) {\n      console.error(\n        'A %s is using the same href \"%s\" as a %s. This is always an error and React will only keep the first preload' +\n          ' for any given href, discarding subsequent instances. To fix, find where you are using this href in link' +\n          ' tags or in calls to ReactDOM.preload() or ReactDOM.preinit() and either make the Resource types agree or' +\n          ' update the hrefs to be distinct for different Resource types.',\n        latestWarningName,\n        href,\n        originalWarningName,\n      );\n    } else {\n      let missingProps = null;\n      let extraProps = null;\n      let differentProps = null;\n      if (originalProps.media != null && latestProps.media == null) {\n        missingProps = missingProps || {};\n        missingProps.media = originalProps.media;\n      }\n\n      for (const propName in latestProps) {\n        const propValue = latestProps[propName];\n        const originalValue = originalProps[propName];\n\n        if (propValue != null && propValue !== originalValue) {\n          if (originalValue == null) {\n            extraProps = extraProps || {};\n            extraProps[propName] = propValue;\n          } else {\n            differentProps = differentProps || {};\n            differentProps[propName] = {\n              original: originalValue,\n              latest: propValue,\n            };\n          }\n        }\n      }\n\n      if (missingProps || extraProps || differentProps) {\n        warnDifferentProps(\n          href,\n          'href',\n          originalWarningName,\n          latestWarningName,\n          extraProps,\n          missingProps,\n          differentProps,\n        );\n      }\n    }\n  }\n}\n\nexport function validateStyleResourceDifference(\n  originalProps: any,\n  latestProps: any,\n) {\n  if (__DEV__) {\n    const {href} = originalProps;\n    // eslint-disable-next-line no-labels\n    const originalWarningName = getResourceNameForWarning(\n      'style',\n      originalProps,\n      false,\n    );\n    const latestWarningName = getResourceNameForWarning(\n      'style',\n      latestProps,\n      false,\n    );\n    let missingProps = null;\n    let extraProps = null;\n    let differentProps = null;\n    if (originalProps.media != null && latestProps.media == null) {\n      missingProps = missingProps || {};\n      missingProps.media = originalProps.media;\n    }\n\n    for (let propName in latestProps) {\n      const propValue = latestProps[propName];\n      const originalValue = originalProps[propName];\n\n      if (propValue != null && propValue !== originalValue) {\n        propName = propName === 'data-precedence' ? 'precedence' : propName;\n        if (originalValue == null) {\n          extraProps = extraProps || {};\n          extraProps[propName] = propValue;\n        } else {\n          differentProps = differentProps || {};\n          differentProps[propName] = {\n            original: originalValue,\n            latest: propValue,\n          };\n        }\n      }\n    }\n\n    if (missingProps || extraProps || differentProps) {\n      warnDifferentProps(\n        href,\n        'href',\n        originalWarningName,\n        latestWarningName,\n        extraProps,\n        missingProps,\n        differentProps,\n      );\n    }\n  }\n}\n\nexport function validateScriptResourceDifference(\n  originalProps: any,\n  latestProps: any,\n) {\n  if (__DEV__) {\n    const {src} = originalProps;\n    // eslint-disable-next-line no-labels\n    const originalWarningName = getResourceNameForWarning(\n      'script',\n      originalProps,\n      false,\n    );\n    const latestWarningName = getResourceNameForWarning(\n      'script',\n      latestProps,\n      false,\n    );\n    let extraProps = null;\n    let differentProps = null;\n\n    for (const propName in latestProps) {\n      const propValue = latestProps[propName];\n      const originalValue = originalProps[propName];\n\n      if (propValue != null && propValue !== originalValue) {\n        if (originalValue == null) {\n          extraProps = extraProps || {};\n          extraProps[propName] = propValue;\n        } else {\n          differentProps = differentProps || {};\n          differentProps[propName] = {\n            original: originalValue,\n            latest: propValue,\n          };\n        }\n      }\n    }\n\n    if (extraProps || differentProps) {\n      warnDifferentProps(\n        src,\n        'src',\n        originalWarningName,\n        latestWarningName,\n        extraProps,\n        null,\n        differentProps,\n      );\n    }\n  }\n}\n\nexport function validateStyleAndHintProps(\n  preloadProps: any,\n  styleProps: any,\n  implicitPreload: boolean,\n) {\n  if (__DEV__) {\n    const {href} = preloadProps;\n\n    const originalWarningName = getResourceNameForWarning(\n      'preload',\n      preloadProps,\n      implicitPreload,\n    );\n    const latestWarningName = getResourceNameForWarning(\n      'style',\n      styleProps,\n      false,\n    );\n\n    if (preloadProps.as !== 'style') {\n      console.error(\n        'While creating a %s for href \"%s\" a %s for this same href was found. When preloading a stylesheet the' +\n          ' \"as\" prop must be of type \"style\". This most likely ocurred by rendering a preload link with an incorrect' +\n          ' \"as\" prop or by calling ReactDOM.preload with an incorrect \"as\" option.',\n        latestWarningName,\n        href,\n        originalWarningName,\n      );\n    }\n\n    let missingProps = null;\n    let extraProps = null;\n    let differentProps = null;\n\n    for (const propName in styleProps) {\n      const styleValue = styleProps[propName];\n      const preloadValue = preloadProps[propName];\n      switch (propName) {\n        // Check for difference on specific props that cross over or influence\n        // the relationship between the preload and stylesheet\n        case 'crossOrigin':\n        case 'referrerPolicy':\n        case 'media':\n        case 'title': {\n          if (\n            preloadValue !== styleValue &&\n            !(preloadValue == null && styleValue == null)\n          ) {\n            if (styleValue == null) {\n              missingProps = missingProps || {};\n              missingProps[propName] = preloadValue;\n            } else if (preloadValue == null) {\n              extraProps = extraProps || {};\n              extraProps[propName] = styleValue;\n            } else {\n              differentProps = differentProps || {};\n              differentProps[propName] = {\n                original: preloadValue,\n                latest: styleValue,\n              };\n            }\n          }\n        }\n      }\n    }\n\n    if (missingProps || extraProps || differentProps) {\n      warnDifferentProps(\n        href,\n        'href',\n        originalWarningName,\n        latestWarningName,\n        extraProps,\n        missingProps,\n        differentProps,\n      );\n    }\n  }\n}\n\nexport function validateScriptAndHintProps(\n  preloadProps: any,\n  scriptProps: any,\n  implicitPreload: boolean,\n) {\n  if (__DEV__) {\n    const {href} = preloadProps;\n\n    const originalWarningName = getResourceNameForWarning(\n      'preload',\n      preloadProps,\n      implicitPreload,\n    );\n    const latestWarningName = getResourceNameForWarning(\n      'script',\n      scriptProps,\n      false,\n    );\n\n    if (preloadProps.as !== 'script') {\n      console.error(\n        'While creating a %s for href \"%s\" a %s for this same url was found. When preloading a script the' +\n          ' \"as\" prop must be of type \"script\". This most likely ocurred by rendering a preload link with an incorrect' +\n          ' \"as\" prop or by calling ReactDOM.preload with an incorrect \"as\" option.',\n        latestWarningName,\n        href,\n        originalWarningName,\n      );\n    }\n\n    let missingProps = null;\n    let extraProps = null;\n    let differentProps = null;\n\n    for (const propName in scriptProps) {\n      const scriptValue = scriptProps[propName];\n      const preloadValue = preloadProps[propName];\n      switch (propName) {\n        // Check for difference on specific props that cross over or influence\n        // the relationship between the preload and stylesheet\n        case 'crossOrigin':\n        case 'referrerPolicy':\n        case 'integrity': {\n          if (\n            preloadValue !== scriptValue &&\n            !(preloadValue == null && scriptValue == null)\n          ) {\n            if (scriptValue == null) {\n              missingProps = missingProps || {};\n              missingProps[propName] = preloadValue;\n            } else if (preloadValue == null) {\n              extraProps = extraProps || {};\n              extraProps[propName] = scriptValue;\n            } else {\n              differentProps = differentProps || {};\n              differentProps[propName] = {\n                original: preloadValue,\n                latest: scriptValue,\n              };\n            }\n          }\n        }\n      }\n    }\n\n    if (missingProps || extraProps || differentProps) {\n      warnDifferentProps(\n        href,\n        'href',\n        originalWarningName,\n        latestWarningName,\n        extraProps,\n        missingProps,\n        differentProps,\n      );\n    }\n  }\n}\n\nfunction warnDifferentProps(\n  url: string,\n  urlPropKey: string,\n  originalName: string,\n  latestName: string,\n  extraProps: ?{[string]: any},\n  missingProps: ?{[string]: any},\n  differentProps: ?{[string]: {original: any, latest: any}},\n): void {\n  if (__DEV__) {\n    const juxtaposedNameStatement =\n      latestName === originalName\n        ? 'an earlier instance of this Resource'\n        : `a ${originalName} with the same ${urlPropKey}`;\n\n    let comparisonStatement = '';\n    if (missingProps !== null && typeof missingProps === 'object') {\n      for (const propName in missingProps) {\n        comparisonStatement += `\\n  ${propName}: missing or null in latest props, \"${missingProps[propName]}\" in original props`;\n      }\n    }\n    if (extraProps !== null && typeof extraProps === 'object') {\n      for (const propName in extraProps) {\n        comparisonStatement += `\\n  ${propName}: \"${extraProps[propName]}\" in latest props, missing or null in original props`;\n      }\n    }\n    if (differentProps !== null && typeof differentProps === 'object') {\n      for (const propName in differentProps) {\n        comparisonStatement += `\\n  ${propName}: \"${differentProps[propName].latest}\" in latest props, \"${differentProps[propName].original}\" in original props`;\n      }\n    }\n\n    console.error(\n      'A %s with %s \"%s\" has props that disagree with those found on %s. Resources always use the props' +\n        ' that were provided the first time they are encountered so any differences will be ignored. Please' +\n        ' update Resources that share an %s to have props that agree. The differences are described below.%s',\n      latestName,\n      urlPropKey,\n      url,\n      juxtaposedNameStatement,\n      urlPropKey,\n      comparisonStatement,\n    );\n  }\n}\n\nfunction getResourceNameForWarning(\n  type: string,\n  props: Object,\n  implicit: boolean,\n) {\n  if (__DEV__) {\n    switch (type) {\n      case 'style': {\n        return 'style Resource';\n      }\n      case 'script': {\n        return 'script Resource';\n      }\n      case 'preload': {\n        if (implicit) {\n          return `preload for a ${props.as} Resource`;\n        }\n        return `preload Resource (as \"${props.as}\")`;\n      }\n    }\n  }\n  return 'Resource';\n}\n\nexport function validateURLKeyedUpdatedProps(\n  pendingProps: Props,\n  currentProps: Props,\n  resourceType: 'style' | 'script' | 'href',\n  urlPropKey: 'href' | 'src',\n): boolean {\n  if (__DEV__) {\n    // This function should never be called if we don't have /srcs so we don't bother considering\n    // Whether they are null or undefined\n    if (pendingProps[urlPropKey] === currentProps[urlPropKey]) {\n      // If we have the same href/src we need all other props to be the same\n      let missingProps;\n      let extraProps;\n      let differentProps;\n      const allProps = Array.from(\n        new Set(Object.keys(currentProps).concat(Object.keys(pendingProps))),\n      );\n      for (let i = 0; i < allProps.length; i++) {\n        const propName = allProps[i];\n        const pendingValue = pendingProps[propName];\n        const currentValue = currentProps[propName];\n        if (\n          pendingValue !== currentValue &&\n          !(pendingValue == null && currentValue == null)\n        ) {\n          if (pendingValue == null) {\n            missingProps = missingProps || {};\n            missingProps[propName] = currentValue;\n          } else if (currentValue == null) {\n            extraProps = extraProps || {};\n            extraProps[propName] = pendingValue;\n          } else {\n            differentProps = differentProps || {};\n            differentProps[propName] = {\n              original: currentValue,\n              latest: pendingValue,\n            };\n          }\n        }\n      }\n      if (missingProps || extraProps || differentProps) {\n        const latestWarningName = getResourceNameForWarning(\n          resourceType,\n          currentProps,\n          false,\n        );\n\n        let comparisonStatement = '';\n        if (missingProps !== null && typeof missingProps === 'object') {\n          for (const propName in missingProps) {\n            comparisonStatement += `\\n  ${propName}: missing or null in latest props, \"${missingProps[propName]}\" in original props`;\n          }\n        }\n        if (extraProps !== null && typeof extraProps === 'object') {\n          for (const propName in extraProps) {\n            comparisonStatement += `\\n  ${propName}: \"${extraProps[propName]}\" in latest props, missing or null in original props`;\n          }\n        }\n        if (differentProps !== null && typeof differentProps === 'object') {\n          for (const propName in differentProps) {\n            comparisonStatement += `\\n  ${propName}: \"${differentProps[propName].latest}\" in latest props, \"${differentProps[propName].original}\" in original props`;\n          }\n        }\n        console.error(\n          'A %s with %s \"%s\" received new props with different values from the props used' +\n            ' when this Resource was first rendered. React will only use the props provided when' +\n            ' this resource was first rendered until a new %s is provided. Unlike conventional' +\n            ' DOM elements, Resources instances do not have a one to one correspondence with Elements' +\n            ' in the DOM and as such, every instance of a Resource for a single Resource identifier' +\n            ' (%s) must have props that agree with each other. The differences are described below.%s',\n          latestWarningName,\n          urlPropKey,\n          currentProps[urlPropKey],\n          urlPropKey,\n          urlPropKey,\n          comparisonStatement,\n        );\n        return true;\n      }\n    }\n  }\n  return false;\n}\n\nexport function validateLinkPropsForStyleResource(props: Props): boolean {\n  if (__DEV__) {\n    // This should only be called when we know we are opting into Resource semantics (i.e. precedence is not null)\n    const {href, onLoad, onError, disabled} = props;\n    const allProps = ['onLoad', 'onError', 'disabled'];\n    const includedProps = [];\n    if (onLoad) includedProps.push('onLoad');\n    if (onError) includedProps.push('onError');\n    if (disabled != null) includedProps.push('disabled');\n\n    const allPropsUnionPhrase = propNamesListJoin(allProps, 'or');\n    let includedPropsPhrase = propNamesListJoin(includedProps, 'and');\n    includedPropsPhrase += includedProps.length === 1 ? ' prop' : ' props';\n\n    if (includedProps.length) {\n      console.error(\n        'A link (rel=\"stylesheet\") element with href \"%s\" has the precedence prop but also included the %s.' +\n          ' When using %s React will opt out of Resource behavior. If you meant for this' +\n          ' element to be treated as a Resource remove the %s. Otherwise remove the precedence prop.',\n        href,\n        includedPropsPhrase,\n        allPropsUnionPhrase,\n        includedPropsPhrase,\n      );\n      return true;\n    }\n  }\n  return false;\n}\n\nfunction propNamesListJoin(\n  list: Array<string>,\n  combinator: 'and' | 'or',\n): string {\n  switch (list.length) {\n    case 0:\n      return '';\n    case 1:\n      return list[0];\n    case 2:\n      return list[0] + ' ' + combinator + ' ' + list[1];\n    default:\n      return (\n        list.slice(0, -1).join(', ') +\n        ', ' +\n        combinator +\n        ' ' +\n        list[list.length - 1]\n      );\n  }\n}\n\nexport function validateLinkPropsForPreloadResource(linkProps: any) {\n  if (__DEV__) {\n    const {href, as} = linkProps;\n    if (as === 'font') {\n      const name = getResourceNameForWarning('preload', linkProps, false);\n      if (!hasOwnProperty.call(linkProps, 'crossOrigin')) {\n        console.error(\n          'A %s with href \"%s\" did not specify the crossOrigin prop. Font preloads must always use' +\n            ' anonymouse CORS mode. To fix add an empty string, \"anonymous\", or any other string' +\n            ' value except \"use-credentials\" for the crossOrigin prop of all font preloads.',\n          name,\n          href,\n        );\n      } else if (linkProps.crossOrigin === 'use-credentials') {\n        console.error(\n          'A %s with href \"%s\" specified a crossOrigin value of \"use-credentials\". Font preloads must always use' +\n            ' anonymouse CORS mode. To fix use an empty string, \"anonymous\", or any other string' +\n            ' value except \"use-credentials\" for the crossOrigin prop of all font preloads.',\n          name,\n          href,\n        );\n      }\n    }\n  }\n}\n\nexport function validatePreloadArguments(href: mixed, options: mixed) {\n  if (__DEV__) {\n    if (!href || typeof href !== 'string') {\n      const typeOfArg = getValueDescriptorExpectingObjectForWarning(href);\n      console.error(\n        'ReactDOM.preload() expected the first argument to be a string representing an href but found %s instead.',\n        typeOfArg,\n      );\n    } else if (typeof options !== 'object' || options === null) {\n      const typeOfArg = getValueDescriptorExpectingObjectForWarning(options);\n      console.error(\n        'ReactDOM.preload() expected the second argument to be an options argument containing at least an \"as\" property' +\n          ' specifying the Resource type. It found %s instead. The href for the preload call where this warning originated is \"%s\".',\n        typeOfArg,\n        href,\n      );\n    } else {\n      const as = options.as;\n      switch (as) {\n        // Font specific validation of options\n        case 'font': {\n          if (options.crossOrigin === 'use-credentials') {\n            console.error(\n              'ReactDOM.preload() was called with an \"as\" type of \"font\" and with a \"crossOrigin\" option of \"use-credentials\".' +\n                ' Fonts preloading must use crossOrigin \"anonymous\" to be functional. Please update your font preload to omit' +\n                ' the crossOrigin option or change it to any other value than \"use-credentials\" (Browsers default all other values' +\n                ' to anonymous mode). The href for the preload call where this warning originated is \"%s\"',\n              href,\n            );\n          }\n          break;\n        }\n        case 'script':\n        case 'style': {\n          break;\n        }\n\n        // We have an invalid as type and need to warn\n        default: {\n          const typeOfAs = getValueDescriptorExpectingEnumForWarning(as);\n          console.error(\n            'ReactDOM.preload() expected a valid \"as\" type in the options (second) argument but found %s instead.' +\n              ' Please use one of the following valid values instead: %s. The href for the preload call where this' +\n              ' warning originated is \"%s\".',\n            typeOfAs,\n            '\"style\", \"font\", or \"script\"',\n            href,\n          );\n        }\n      }\n    }\n  }\n}\n\nexport function validatePreinitArguments(href: mixed, options: mixed) {\n  if (__DEV__) {\n    if (!href || typeof href !== 'string') {\n      const typeOfArg = getValueDescriptorExpectingObjectForWarning(href);\n      console.error(\n        'ReactDOM.preinit() expected the first argument to be a string representing an href but found %s instead.',\n        typeOfArg,\n      );\n    } else if (typeof options !== 'object' || options === null) {\n      const typeOfArg = getValueDescriptorExpectingObjectForWarning(options);\n      console.error(\n        'ReactDOM.preinit() expected the second argument to be an options argument containing at least an \"as\" property' +\n          ' specifying the Resource type. It found %s instead. The href for the preload call where this warning originated is \"%s\".',\n        typeOfArg,\n        href,\n      );\n    } else {\n      const as = options.as;\n      switch (as) {\n        case 'style':\n        case 'script': {\n          break;\n        }\n\n        // We have an invalid as type and need to warn\n        default: {\n          const typeOfAs = getValueDescriptorExpectingEnumForWarning(as);\n          console.error(\n            'ReactDOM.preinit() expected the second argument to be an options argument containing at least an \"as\" property' +\n              ' specifying the Resource type. It found %s instead. Currently, valid resource types for for preinit are \"style\"' +\n              ' and \"script\". The href for the preinit call where this warning originated is \"%s\".',\n            typeOfAs,\n            href,\n          );\n        }\n      }\n    }\n  }\n}\n\nfunction getValueDescriptorExpectingObjectForWarning(thing: any): string {\n  return thing === null\n    ? 'null'\n    : thing === undefined\n    ? 'undefined'\n    : thing === ''\n    ? 'an empty string'\n    : `something with type \"${typeof thing}\"`;\n}\n\nfunction getValueDescriptorExpectingEnumForWarning(thing: any): string {\n  return thing === null\n    ? 'null'\n    : thing === undefined\n    ? 'undefined'\n    : thing === ''\n    ? 'an empty string'\n    : typeof thing === 'string'\n    ? JSON.stringify(thing)\n    : `something with type \"${typeof thing}\"`;\n}\n"]},"metadata":{},"sourceType":"module"}