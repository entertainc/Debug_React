{"ast":null,"code":"/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n */\n// -----------------------------------------------------------------------------\n// Land or remove (zero effort)\n//\n// Flags that can likely be deleted or landed without consequences\n// -----------------------------------------------------------------------------\nexport const warnAboutDeprecatedLifecycles = true;\nexport const enableComponentStackLocations = true;\nexport const disableSchedulerTimeoutBasedOnReactExpirationTime = false; // -----------------------------------------------------------------------------\n// Land or remove (moderate effort)\n//\n// Flags that can be probably deleted or landed, but might require extra effort\n// like migrating internal callers or performance testing.\n// -----------------------------------------------------------------------------\n// This rolled out to 10% public in www, so we should be able to land, but some\n// internal tests need to be updated. The open source behavior is correct.\n\nexport const skipUnmountedBoundaries = true; // TODO: Finish rolling out in www\n\nexport const enableClientRenderFallbackOnTextMismatch = true; // TODO: Need to review this code one more time before landing\n\nexport const enableCapturePhaseSelectiveHydrationWithoutDiscreteEventReplay = true; // Recoil still uses useMutableSource in www, need to delete\n\nexport const enableUseMutableSource = false; // Not sure if www still uses this. We don't have a replacement but whatever we\n// replace it with will likely be different than what's already there, so we\n// probably should just delete it as long as nothing in www relies on it.\n\nexport const enableSchedulerDebugging = false; // Need to remove didTimeout argument from Scheduler before landing\n\nexport const disableSchedulerTimeoutInWorkLoop = false; // -----------------------------------------------------------------------------\n// Slated for removal in the future (significant effort)\n//\n// These are experiments that didn't work out, and never shipped, but we can't\n// delete from the codebase until we migrate internal callers.\n// -----------------------------------------------------------------------------\n// Add a callback property to suspense to notify which promises are currently\n// in the update queue. This allows reporting and tracing of what is causing\n// the user to see a loading state.\n//\n// Also allows hydration callbacks to fire when a dehydrated boundary gets\n// hydrated or deleted.\n//\n// This will eventually be replaced by the Transition Tracing proposal.\n\nexport const enableSuspenseCallback = false; // Experimental Scope support.\n\nexport const enableScopeAPI = false; // Experimental Create Event Handle API.\n\nexport const enableCreateEventHandleAPI = false; // Support legacy Primer support on internal FB www\n\nexport const enableLegacyFBSupport = false; // -----------------------------------------------------------------------------\n// Ongoing experiments\n//\n// These are features that we're either actively exploring or are reasonably\n// likely to include in an upcoming release.\n// -----------------------------------------------------------------------------\n\nexport const enableCache = true;\nexport const enableLegacyCache = __EXPERIMENTAL__;\nexport const enableCacheElement = __EXPERIMENTAL__;\nexport const enableFetchInstrumentation = true;\nexport const enableTransitionTracing = false; // No known bugs, but needs performance testing\n\nexport const enableLazyContextPropagation = false; // FB-only usage. The new API has different semantics.\n\nexport const enableLegacyHidden = false; // Enables unstable_avoidThisFallback feature in Fiber\n\nexport const enableSuspenseAvoidThisFallback = false; // Enables unstable_avoidThisFallback feature in Fizz\n\nexport const enableSuspenseAvoidThisFallbackFizz = false;\nexport const enableCPUSuspense = __EXPERIMENTAL__;\nexport const enableHostSingletons = true;\nexport const enableFloat = true; // When a node is unmounted, recurse into the Fiber subtree and clean out\n// references. Each level cleans up more fiber fields than the previous level.\n// As far as we know, React itself doesn't leak, but because the Fiber contains\n// cycles, even a single leak in product code can cause us to retain large\n// amounts of memory.\n//\n// The long term plan is to remove the cycles, but in the meantime, we clear\n// additional fields to mitigate.\n//\n// It's an enum so that we can experiment with different levels of\n// aggressiveness.\n\nexport const deletedTreeCleanUpLevel = 3;\nexport const enableUseHook = true; // Enables unstable_useMemoCache hook, intended as a compilation target for\n// auto-memoization.\n\nexport const enableUseMemoCacheHook = __EXPERIMENTAL__;\nexport const enableUseEffectEventHook = __EXPERIMENTAL__; // Test in www before enabling in open source.\n// Enables DOM-server to stream its instruction set as data-attributes\n// (handled with an MutationObserver) instead of inline-scripts\n\nexport const enableFizzExternalRuntime = false; // -----------------------------------------------------------------------------\n// Chopping Block\n//\n// Planned feature deprecations and breaking changes. Sorted roughly in order of\n// when we plan to enable them.\n// -----------------------------------------------------------------------------\n// This flag enables Strict Effects by default. We're not turning this on until\n// after 18 because it requires migration work. Recommendation is to use\n// <StrictMode /> to gradually upgrade components.\n// If TRUE, trees rendered with createRoot will be StrictEffectsMode.\n// If FALSE, these trees will be StrictLegacyMode.\n\nexport const createRootStrictEffectsByDefault = false;\nexport const disableModulePatternComponents = false;\nexport const disableLegacyContext = false;\nexport const enableUseRefAccessWarning = false; // Enables time slicing for updates that aren't wrapped in startTransition.\n\nexport const enableSyncDefaultUpdates = true; // Adds an opt-in to time slicing for updates that aren't wrapped in\n// startTransition. Only relevant when enableSyncDefaultUpdates is disabled.\n\nexport const allowConcurrentByDefault = false; // Updates that occur in the render phase are not officially supported. But when\n// they do occur, we defer them to a subsequent render by picking a lane that's\n// not currently rendering. We treat them the same as if they came from an\n// interleaved event. Remove this flag once we have migrated to the\n// new behavior.\n// NOTE: Not sure if we'll end up doing this or not.\n\nexport const deferRenderPhaseUpdateToNextBatch = false; // -----------------------------------------------------------------------------\n// React DOM Chopping Block\n//\n// Similar to main Chopping Block but only flags related to React DOM. These are\n// grouped because we will likely batch all of them into a single major release.\n// -----------------------------------------------------------------------------\n// Disable support for comment nodes as React DOM containers. Already disabled\n// in open source, but www codebase still relies on it. Need to remove.\n\nexport const disableCommentsAsDOMContainers = true; // Disable javascript: URL strings in href for XSS protection.\n\nexport const disableJavaScriptURLs = false;\nexport const enableTrustedTypesIntegration = false; // Prevent the value and checked attributes from syncing with their related\n// DOM properties\n\nexport const disableInputAttributeSyncing = false; // Filter certain DOM attributes (e.g. src, href) if their values are empty\n// strings. This prevents e.g. <img src=\"\"> from making an unnecessary HTTP\n// request for certain browsers.\n\nexport const enableFilterEmptyStringAttributesDOM = false; // Changes the behavior for rendering custom elements in both server rendering\n// and client rendering, mostly to allow JSX attributes to apply to the custom\n// element's object properties instead of only HTML attributes.\n// https://github.com/facebook/react/issues/11347\n\nexport const enableCustomElementPropertySupport = __EXPERIMENTAL__; // Disables children for <textarea> elements\n\nexport const disableTextareaChildren = false; // -----------------------------------------------------------------------------\n// JSX Chopping Block\n//\n// Similar to main Chopping Block but only flags related to JSX. These are\n// grouped because we will likely batch all of them into a single major release.\n// -----------------------------------------------------------------------------\n// New API for JSX transforms to target - https://github.com/reactjs/rfcs/pull/107\n// Part of the simplification of React.createElement so we can eventually move\n// from React.createElement to React.jsx\n// https://github.com/reactjs/rfcs/blob/createlement-rfc/text/0000-create-element-changes.md\n\nexport const warnAboutDefaultPropsOnFunctionComponents = true; // deprecate later, not 18.0\n// Enables a warning when trying to spread a 'key' to an element;\n// a deprecated pattern we want to get rid of in the future\n\nexport const warnAboutSpreadingKeyToJSX = true;\nexport const warnAboutStringRefs = true; // -----------------------------------------------------------------------------\n// Debugging and DevTools\n// -----------------------------------------------------------------------------\n// Adds user timing marks for e.g. state updates, suspense, and work loop stuff,\n// for an experimental timeline tool.\n\nexport const enableSchedulingProfiler = __PROFILE__; // Helps identify side effects in render-phase lifecycle hooks and setState\n// reducers by double invoking them in StrictLegacyMode.\n\nexport const debugRenderPhaseSideEffectsForStrictMode = __DEV__; // To preserve the \"Pause on caught exceptions\" behavior of the debugger, we\n// replay the begin phase of a failed component inside invokeGuardedCallback.\n\nexport const replayFailedUnitOfWorkWithInvokeGuardedCallback = __DEV__; // Gather advanced timing metrics for Profiler subtrees.\n\nexport const enableProfilerTimer = __PROFILE__; // Record durations for commit and passive effects phases.\n\nexport const enableProfilerCommitHooks = __PROFILE__; // Phase param passed to onRender callback differentiates between an \"update\" and a \"cascading-update\".\n\nexport const enableProfilerNestedUpdatePhase = __PROFILE__; // Adds verbose console logging for e.g. state updates, suspense, and work loop\n// stuff. Intended to enable React core members to more easily debug scheduling\n// issues in DEV builds.\n\nexport const enableDebugTracing = false; // Track which Fiber(s) schedule render work.\n\nexport const enableUpdaterTracking = __PROFILE__; // Only enabled in RN, related to enableComponentStackLocations\n\nexport const disableNativeComponentFrames = false;\nexport const enableServerContext = true; // Internal only.\n\nexport const enableGetInspectorDataForInstanceInProduction = false; // Profiler API accepts a function to be called when a nested update is scheduled.\n// This callback accepts the component type (class instance or function) the update is scheduled for.\n\nexport const enableProfilerNestedUpdateScheduledHook = false;\nexport const consoleManagedByDevToolsDuringStrictMode = true; // Modern <StrictMode /> behaviour aligns more with what components\n// components will encounter in production, especially when used With <Offscreen />.\n// TODO: clean up legacy <StrictMode /> once tests pass WWW.\n\nexport const useModernStrictMode = false;","map":{"version":3,"sources":["/Users/bytedance/Desktop/sourceCodeReading/react-code/src/react/packages/shared/ReactFeatureFlags.js"],"names":["warnAboutDeprecatedLifecycles","enableComponentStackLocations","disableSchedulerTimeoutBasedOnReactExpirationTime","skipUnmountedBoundaries","enableClientRenderFallbackOnTextMismatch","enableCapturePhaseSelectiveHydrationWithoutDiscreteEventReplay","enableUseMutableSource","enableSchedulerDebugging","disableSchedulerTimeoutInWorkLoop","enableSuspenseCallback","enableScopeAPI","enableCreateEventHandleAPI","enableLegacyFBSupport","enableCache","enableLegacyCache","__EXPERIMENTAL__","enableCacheElement","enableFetchInstrumentation","enableTransitionTracing","enableLazyContextPropagation","enableLegacyHidden","enableSuspenseAvoidThisFallback","enableSuspenseAvoidThisFallbackFizz","enableCPUSuspense","enableHostSingletons","enableFloat","deletedTreeCleanUpLevel","enableUseHook","enableUseMemoCacheHook","enableUseEffectEventHook","enableFizzExternalRuntime","createRootStrictEffectsByDefault","disableModulePatternComponents","disableLegacyContext","enableUseRefAccessWarning","enableSyncDefaultUpdates","allowConcurrentByDefault","deferRenderPhaseUpdateToNextBatch","disableCommentsAsDOMContainers","disableJavaScriptURLs","enableTrustedTypesIntegration","disableInputAttributeSyncing","enableFilterEmptyStringAttributesDOM","enableCustomElementPropertySupport","disableTextareaChildren","warnAboutDefaultPropsOnFunctionComponents","warnAboutSpreadingKeyToJSX","warnAboutStringRefs","enableSchedulingProfiler","__PROFILE__","debugRenderPhaseSideEffectsForStrictMode","__DEV__","replayFailedUnitOfWorkWithInvokeGuardedCallback","enableProfilerTimer","enableProfilerCommitHooks","enableProfilerNestedUpdatePhase","enableDebugTracing","enableUpdaterTracking","disableNativeComponentFrames","enableServerContext","enableGetInspectorDataForInstanceInProduction","enableProfilerNestedUpdateScheduledHook","consoleManagedByDevToolsDuringStrictMode","useModernStrictMode"],"mappings":"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","sourcesContent":["/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow strict\n */\n\n// -----------------------------------------------------------------------------\n// Land or remove (zero effort)\n//\n// Flags that can likely be deleted or landed without consequences\n// -----------------------------------------------------------------------------\n\nexport const warnAboutDeprecatedLifecycles = true;\nexport const enableComponentStackLocations = true;\nexport const disableSchedulerTimeoutBasedOnReactExpirationTime = false;\n\n// -----------------------------------------------------------------------------\n// Land or remove (moderate effort)\n//\n// Flags that can be probably deleted or landed, but might require extra effort\n// like migrating internal callers or performance testing.\n// -----------------------------------------------------------------------------\n\n// This rolled out to 10% public in www, so we should be able to land, but some\n// internal tests need to be updated. The open source behavior is correct.\nexport const skipUnmountedBoundaries = true;\n\n// TODO: Finish rolling out in www\nexport const enableClientRenderFallbackOnTextMismatch = true;\n\n// TODO: Need to review this code one more time before landing\nexport const enableCapturePhaseSelectiveHydrationWithoutDiscreteEventReplay = true;\n\n// Recoil still uses useMutableSource in www, need to delete\nexport const enableUseMutableSource = false;\n\n// Not sure if www still uses this. We don't have a replacement but whatever we\n// replace it with will likely be different than what's already there, so we\n// probably should just delete it as long as nothing in www relies on it.\nexport const enableSchedulerDebugging = false;\n\n// Need to remove didTimeout argument from Scheduler before landing\nexport const disableSchedulerTimeoutInWorkLoop = false;\n\n// -----------------------------------------------------------------------------\n// Slated for removal in the future (significant effort)\n//\n// These are experiments that didn't work out, and never shipped, but we can't\n// delete from the codebase until we migrate internal callers.\n// -----------------------------------------------------------------------------\n\n// Add a callback property to suspense to notify which promises are currently\n// in the update queue. This allows reporting and tracing of what is causing\n// the user to see a loading state.\n//\n// Also allows hydration callbacks to fire when a dehydrated boundary gets\n// hydrated or deleted.\n//\n// This will eventually be replaced by the Transition Tracing proposal.\nexport const enableSuspenseCallback = false;\n\n// Experimental Scope support.\nexport const enableScopeAPI = false;\n\n// Experimental Create Event Handle API.\nexport const enableCreateEventHandleAPI = false;\n\n// Support legacy Primer support on internal FB www\nexport const enableLegacyFBSupport = false;\n\n// -----------------------------------------------------------------------------\n// Ongoing experiments\n//\n// These are features that we're either actively exploring or are reasonably\n// likely to include in an upcoming release.\n// -----------------------------------------------------------------------------\n\nexport const enableCache = true;\nexport const enableLegacyCache = __EXPERIMENTAL__;\nexport const enableCacheElement = __EXPERIMENTAL__;\nexport const enableFetchInstrumentation = true;\n\nexport const enableTransitionTracing = false;\n\n// No known bugs, but needs performance testing\nexport const enableLazyContextPropagation = false;\n\n// FB-only usage. The new API has different semantics.\nexport const enableLegacyHidden = false;\n\n// Enables unstable_avoidThisFallback feature in Fiber\nexport const enableSuspenseAvoidThisFallback = false;\n// Enables unstable_avoidThisFallback feature in Fizz\nexport const enableSuspenseAvoidThisFallbackFizz = false;\n\nexport const enableCPUSuspense = __EXPERIMENTAL__;\n\nexport const enableHostSingletons = true;\n\nexport const enableFloat = true;\n\n// When a node is unmounted, recurse into the Fiber subtree and clean out\n// references. Each level cleans up more fiber fields than the previous level.\n// As far as we know, React itself doesn't leak, but because the Fiber contains\n// cycles, even a single leak in product code can cause us to retain large\n// amounts of memory.\n//\n// The long term plan is to remove the cycles, but in the meantime, we clear\n// additional fields to mitigate.\n//\n// It's an enum so that we can experiment with different levels of\n// aggressiveness.\nexport const deletedTreeCleanUpLevel = 3;\n\nexport const enableUseHook = true;\n\n// Enables unstable_useMemoCache hook, intended as a compilation target for\n// auto-memoization.\nexport const enableUseMemoCacheHook = __EXPERIMENTAL__;\n\nexport const enableUseEffectEventHook = __EXPERIMENTAL__;\n\n// Test in www before enabling in open source.\n// Enables DOM-server to stream its instruction set as data-attributes\n// (handled with an MutationObserver) instead of inline-scripts\nexport const enableFizzExternalRuntime = false;\n\n// -----------------------------------------------------------------------------\n// Chopping Block\n//\n// Planned feature deprecations and breaking changes. Sorted roughly in order of\n// when we plan to enable them.\n// -----------------------------------------------------------------------------\n\n// This flag enables Strict Effects by default. We're not turning this on until\n// after 18 because it requires migration work. Recommendation is to use\n// <StrictMode /> to gradually upgrade components.\n// If TRUE, trees rendered with createRoot will be StrictEffectsMode.\n// If FALSE, these trees will be StrictLegacyMode.\nexport const createRootStrictEffectsByDefault = false;\n\nexport const disableModulePatternComponents = false;\n\nexport const disableLegacyContext = false;\n\nexport const enableUseRefAccessWarning = false;\n\n// Enables time slicing for updates that aren't wrapped in startTransition.\nexport const enableSyncDefaultUpdates = true;\n\n// Adds an opt-in to time slicing for updates that aren't wrapped in\n// startTransition. Only relevant when enableSyncDefaultUpdates is disabled.\nexport const allowConcurrentByDefault = false;\n\n// Updates that occur in the render phase are not officially supported. But when\n// they do occur, we defer them to a subsequent render by picking a lane that's\n// not currently rendering. We treat them the same as if they came from an\n// interleaved event. Remove this flag once we have migrated to the\n// new behavior.\n// NOTE: Not sure if we'll end up doing this or not.\nexport const deferRenderPhaseUpdateToNextBatch = false;\n\n// -----------------------------------------------------------------------------\n// React DOM Chopping Block\n//\n// Similar to main Chopping Block but only flags related to React DOM. These are\n// grouped because we will likely batch all of them into a single major release.\n// -----------------------------------------------------------------------------\n\n// Disable support for comment nodes as React DOM containers. Already disabled\n// in open source, but www codebase still relies on it. Need to remove.\nexport const disableCommentsAsDOMContainers = true;\n\n// Disable javascript: URL strings in href for XSS protection.\nexport const disableJavaScriptURLs = false;\n\nexport const enableTrustedTypesIntegration = false;\n\n// Prevent the value and checked attributes from syncing with their related\n// DOM properties\nexport const disableInputAttributeSyncing = false;\n\n// Filter certain DOM attributes (e.g. src, href) if their values are empty\n// strings. This prevents e.g. <img src=\"\"> from making an unnecessary HTTP\n// request for certain browsers.\nexport const enableFilterEmptyStringAttributesDOM = false;\n\n// Changes the behavior for rendering custom elements in both server rendering\n// and client rendering, mostly to allow JSX attributes to apply to the custom\n// element's object properties instead of only HTML attributes.\n// https://github.com/facebook/react/issues/11347\nexport const enableCustomElementPropertySupport = __EXPERIMENTAL__;\n\n// Disables children for <textarea> elements\nexport const disableTextareaChildren = false;\n\n// -----------------------------------------------------------------------------\n// JSX Chopping Block\n//\n// Similar to main Chopping Block but only flags related to JSX. These are\n// grouped because we will likely batch all of them into a single major release.\n// -----------------------------------------------------------------------------\n\n// New API for JSX transforms to target - https://github.com/reactjs/rfcs/pull/107\n\n// Part of the simplification of React.createElement so we can eventually move\n// from React.createElement to React.jsx\n// https://github.com/reactjs/rfcs/blob/createlement-rfc/text/0000-create-element-changes.md\nexport const warnAboutDefaultPropsOnFunctionComponents = true; // deprecate later, not 18.0\n\n// Enables a warning when trying to spread a 'key' to an element;\n// a deprecated pattern we want to get rid of in the future\nexport const warnAboutSpreadingKeyToJSX = true;\n\nexport const warnAboutStringRefs = true;\n\n// -----------------------------------------------------------------------------\n// Debugging and DevTools\n// -----------------------------------------------------------------------------\n\n// Adds user timing marks for e.g. state updates, suspense, and work loop stuff,\n// for an experimental timeline tool.\nexport const enableSchedulingProfiler = __PROFILE__;\n\n// Helps identify side effects in render-phase lifecycle hooks and setState\n// reducers by double invoking them in StrictLegacyMode.\nexport const debugRenderPhaseSideEffectsForStrictMode = __DEV__;\n\n// To preserve the \"Pause on caught exceptions\" behavior of the debugger, we\n// replay the begin phase of a failed component inside invokeGuardedCallback.\nexport const replayFailedUnitOfWorkWithInvokeGuardedCallback = __DEV__;\n\n// Gather advanced timing metrics for Profiler subtrees.\nexport const enableProfilerTimer = __PROFILE__;\n\n// Record durations for commit and passive effects phases.\nexport const enableProfilerCommitHooks = __PROFILE__;\n\n// Phase param passed to onRender callback differentiates between an \"update\" and a \"cascading-update\".\nexport const enableProfilerNestedUpdatePhase = __PROFILE__;\n\n// Adds verbose console logging for e.g. state updates, suspense, and work loop\n// stuff. Intended to enable React core members to more easily debug scheduling\n// issues in DEV builds.\nexport const enableDebugTracing = false;\n\n// Track which Fiber(s) schedule render work.\nexport const enableUpdaterTracking = __PROFILE__;\n\n// Only enabled in RN, related to enableComponentStackLocations\nexport const disableNativeComponentFrames = false;\nexport const enableServerContext = true;\n\n// Internal only.\nexport const enableGetInspectorDataForInstanceInProduction = false;\n\n// Profiler API accepts a function to be called when a nested update is scheduled.\n// This callback accepts the component type (class instance or function) the update is scheduled for.\nexport const enableProfilerNestedUpdateScheduledHook = false;\n\nexport const consoleManagedByDevToolsDuringStrictMode = true;\n\n// Modern <StrictMode /> behaviour aligns more with what components\n// components will encounter in production, especially when used With <Offscreen />.\n// TODO: clean up legacy <StrictMode /> once tests pass WWW.\nexport const useModernStrictMode = false;\n"]},"metadata":{},"sourceType":"module"}