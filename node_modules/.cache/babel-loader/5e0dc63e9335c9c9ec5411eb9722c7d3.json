{"ast":null,"code":"/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n */\n\n/* eslint-disable no-var */\n\n/* eslint-disable react-internal/prod-error-codes */\nimport { enableSchedulerDebugging, enableProfiling } from '../SchedulerFeatureFlags';\nimport { push, pop, peek } from '../SchedulerMinHeap'; // TODO: Use symbols?\n\nimport { ImmediatePriority, UserBlockingPriority, NormalPriority, LowPriority, IdlePriority } from '../SchedulerPriorities';\nimport { markTaskRun, markTaskYield, markTaskCompleted, markTaskCanceled, markTaskErrored, markSchedulerSuspended, markSchedulerUnsuspended, markTaskStart, stopLoggingProfilingEvents, startLoggingProfilingEvents } from '../SchedulerProfiling';\n// Max 31 bit integer. The max integer size in V8 for 32-bit systems.\n// Math.pow(2, 30) - 1\n// 0b111111111111111111111111111111\nvar maxSigned31BitInt = 1073741823; // Times out immediately\n\nvar IMMEDIATE_PRIORITY_TIMEOUT = -1; // Eventually times out\n\nvar USER_BLOCKING_PRIORITY_TIMEOUT = 250;\nvar NORMAL_PRIORITY_TIMEOUT = 5000;\nvar LOW_PRIORITY_TIMEOUT = 10000; // Never times out\n\nvar IDLE_PRIORITY_TIMEOUT = maxSigned31BitInt; // Tasks are stored on a min heap\n\nvar taskQueue = [];\nvar timerQueue = []; // Incrementing id counter. Used to maintain insertion order.\n\nvar taskIdCounter = 1; // Pausing the scheduler is useful for debugging.\n\nvar isSchedulerPaused = false;\nvar currentTask = null;\nvar currentPriorityLevel = NormalPriority; // This is set while performing work, to prevent re-entrance.\n\nvar isPerformingWork = false;\nvar isHostCallbackScheduled = false;\nvar isHostTimeoutScheduled = false;\nlet currentMockTime = 0;\nlet scheduledCallback = null;\nlet scheduledTimeout = null;\nlet timeoutTime = -1;\nlet yieldedValues = null;\nlet expectedNumberOfYields = -1;\nlet didStop = false;\nlet isFlushing = false;\nlet needsPaint = false;\nlet shouldYieldForPaint = false;\nvar disableYieldValue = false;\n\nfunction setDisableYieldValue(newValue) {\n  disableYieldValue = newValue;\n}\n\nfunction advanceTimers(currentTime) {\n  // Check for tasks that are no longer delayed and add them to the queue.\n  let timer = peek(timerQueue);\n\n  while (timer !== null) {\n    if (timer.callback === null) {\n      // Timer was cancelled.\n      pop(timerQueue);\n    } else if (timer.startTime <= currentTime) {\n      // Timer fired. Transfer to the task queue.\n      pop(timerQueue);\n      timer.sortIndex = timer.expirationTime;\n      push(taskQueue, timer);\n\n      if (enableProfiling) {\n        markTaskStart(timer, currentTime);\n        timer.isQueued = true;\n      }\n    } else {\n      // Remaining timers are pending.\n      return;\n    }\n\n    timer = peek(timerQueue);\n  }\n}\n\nfunction handleTimeout(currentTime) {\n  isHostTimeoutScheduled = false;\n  advanceTimers(currentTime);\n\n  if (!isHostCallbackScheduled) {\n    if (peek(taskQueue) !== null) {\n      isHostCallbackScheduled = true;\n      requestHostCallback(flushWork);\n    } else {\n      const firstTimer = peek(timerQueue);\n\n      if (firstTimer !== null) {\n        requestHostTimeout(handleTimeout, firstTimer.startTime - currentTime);\n      }\n    }\n  }\n}\n\nfunction flushWork(hasTimeRemaining, initialTime) {\n  if (enableProfiling) {\n    markSchedulerUnsuspended(initialTime);\n  } // We'll need a host callback the next time work is scheduled.\n\n\n  isHostCallbackScheduled = false;\n\n  if (isHostTimeoutScheduled) {\n    // We scheduled a timeout but it's no longer needed. Cancel it.\n    isHostTimeoutScheduled = false;\n    cancelHostTimeout();\n  }\n\n  isPerformingWork = true;\n  const previousPriorityLevel = currentPriorityLevel;\n\n  try {\n    if (enableProfiling) {\n      try {\n        return workLoop(hasTimeRemaining, initialTime);\n      } catch (error) {\n        if (currentTask !== null) {\n          const currentTime = getCurrentTime(); // $FlowFixMe[incompatible-call] found when upgrading Flow\n\n          markTaskErrored(currentTask, currentTime); // $FlowFixMe[incompatible-use] found when upgrading Flow\n\n          currentTask.isQueued = false;\n        }\n\n        throw error;\n      }\n    } else {\n      // No catch in prod code path.\n      return workLoop(hasTimeRemaining, initialTime);\n    }\n  } finally {\n    currentTask = null;\n    currentPriorityLevel = previousPriorityLevel;\n    isPerformingWork = false;\n\n    if (enableProfiling) {\n      const currentTime = getCurrentTime();\n      markSchedulerSuspended(currentTime);\n    }\n  }\n}\n\nfunction workLoop(hasTimeRemaining, initialTime) {\n  let currentTime = initialTime;\n  advanceTimers(currentTime);\n  currentTask = peek(taskQueue);\n\n  while (currentTask !== null && !(enableSchedulerDebugging && isSchedulerPaused)) {\n    if (currentTask.expirationTime > currentTime && (!hasTimeRemaining || shouldYieldToHost())) {\n      // This currentTask hasn't expired, and we've reached the deadline.\n      break;\n    } // $FlowFixMe[incompatible-use] found when upgrading Flow\n\n\n    const callback = currentTask.callback;\n\n    if (typeof callback === 'function') {\n      // $FlowFixMe[incompatible-use] found when upgrading Flow\n      currentTask.callback = null; // $FlowFixMe[incompatible-use] found when upgrading Flow\n\n      currentPriorityLevel = currentTask.priorityLevel; // $FlowFixMe[incompatible-use] found when upgrading Flow\n\n      const didUserCallbackTimeout = currentTask.expirationTime <= currentTime;\n\n      if (enableProfiling) {\n        // $FlowFixMe[incompatible-call] found when upgrading Flow\n        markTaskRun(currentTask, currentTime);\n      }\n\n      const continuationCallback = callback(didUserCallbackTimeout);\n      currentTime = getCurrentTime();\n\n      if (typeof continuationCallback === 'function') {\n        // If a continuation is returned, immediately yield to the main thread\n        // regardless of how much time is left in the current time slice.\n        // $FlowFixMe[incompatible-use] found when upgrading Flow\n        currentTask.callback = continuationCallback;\n\n        if (enableProfiling) {\n          // $FlowFixMe[incompatible-call] found when upgrading Flow\n          markTaskYield(currentTask, currentTime);\n        }\n\n        advanceTimers(currentTime);\n\n        if (shouldYieldForPaint) {\n          needsPaint = true;\n          return true;\n        } else {// If `shouldYieldForPaint` is false, we keep flushing synchronously\n          // without yielding to the main thread. This is the behavior of the\n          // `toFlushAndYield` and `toFlushAndYieldThrough` testing helpers .\n        }\n      } else {\n        if (enableProfiling) {\n          // $FlowFixMe[incompatible-call] found when upgrading Flow\n          markTaskCompleted(currentTask, currentTime); // $FlowFixMe[incompatible-use] found when upgrading Flow\n\n          currentTask.isQueued = false;\n        }\n\n        if (currentTask === peek(taskQueue)) {\n          pop(taskQueue);\n        }\n\n        advanceTimers(currentTime);\n      }\n    } else {\n      pop(taskQueue);\n    }\n\n    currentTask = peek(taskQueue);\n  } // Return whether there's additional work\n\n\n  if (currentTask !== null) {\n    return true;\n  } else {\n    const firstTimer = peek(timerQueue);\n\n    if (firstTimer !== null) {\n      requestHostTimeout(handleTimeout, firstTimer.startTime - currentTime);\n    }\n\n    return false;\n  }\n}\n\nfunction unstable_runWithPriority(priorityLevel, eventHandler) {\n  switch (priorityLevel) {\n    case ImmediatePriority:\n    case UserBlockingPriority:\n    case NormalPriority:\n    case LowPriority:\n    case IdlePriority:\n      break;\n\n    default:\n      priorityLevel = NormalPriority;\n  }\n\n  var previousPriorityLevel = currentPriorityLevel;\n  currentPriorityLevel = priorityLevel;\n\n  try {\n    return eventHandler();\n  } finally {\n    currentPriorityLevel = previousPriorityLevel;\n  }\n}\n\nfunction unstable_next(eventHandler) {\n  var priorityLevel;\n\n  switch (currentPriorityLevel) {\n    case ImmediatePriority:\n    case UserBlockingPriority:\n    case NormalPriority:\n      // Shift down to normal priority\n      priorityLevel = NormalPriority;\n      break;\n\n    default:\n      // Anything lower than normal priority should remain at the current level.\n      priorityLevel = currentPriorityLevel;\n      break;\n  }\n\n  var previousPriorityLevel = currentPriorityLevel;\n  currentPriorityLevel = priorityLevel;\n\n  try {\n    return eventHandler();\n  } finally {\n    currentPriorityLevel = previousPriorityLevel;\n  }\n}\n\nfunction unstable_wrapCallback(callback) {\n  var parentPriorityLevel = currentPriorityLevel; // $FlowFixMe[incompatible-return]\n\n  return function () {\n    // This is a fork of runWithPriority, inlined for performance.\n    var previousPriorityLevel = currentPriorityLevel;\n    currentPriorityLevel = parentPriorityLevel;\n\n    try {\n      return callback.apply(this, arguments);\n    } finally {\n      currentPriorityLevel = previousPriorityLevel;\n    }\n  };\n}\n\nfunction unstable_scheduleCallback(priorityLevel, callback, options) {\n  var currentTime = getCurrentTime();\n  var startTime;\n\n  if (typeof options === 'object' && options !== null) {\n    var delay = options.delay;\n\n    if (typeof delay === 'number' && delay > 0) {\n      startTime = currentTime + delay;\n    } else {\n      startTime = currentTime;\n    }\n  } else {\n    startTime = currentTime;\n  }\n\n  var timeout;\n\n  switch (priorityLevel) {\n    case ImmediatePriority:\n      timeout = IMMEDIATE_PRIORITY_TIMEOUT;\n      break;\n\n    case UserBlockingPriority:\n      timeout = USER_BLOCKING_PRIORITY_TIMEOUT;\n      break;\n\n    case IdlePriority:\n      timeout = IDLE_PRIORITY_TIMEOUT;\n      break;\n\n    case LowPriority:\n      timeout = LOW_PRIORITY_TIMEOUT;\n      break;\n\n    case NormalPriority:\n    default:\n      timeout = NORMAL_PRIORITY_TIMEOUT;\n      break;\n  }\n\n  var expirationTime = startTime + timeout;\n  var newTask = {\n    id: taskIdCounter++,\n    callback,\n    priorityLevel,\n    startTime,\n    expirationTime,\n    sortIndex: -1\n  };\n\n  if (enableProfiling) {\n    newTask.isQueued = false;\n  }\n\n  if (startTime > currentTime) {\n    // This is a delayed task.\n    newTask.sortIndex = startTime;\n    push(timerQueue, newTask);\n\n    if (peek(taskQueue) === null && newTask === peek(timerQueue)) {\n      // All tasks are delayed, and this is the task with the earliest delay.\n      if (isHostTimeoutScheduled) {\n        // Cancel an existing timeout.\n        cancelHostTimeout();\n      } else {\n        isHostTimeoutScheduled = true;\n      } // Schedule a timeout.\n\n\n      requestHostTimeout(handleTimeout, startTime - currentTime);\n    }\n  } else {\n    newTask.sortIndex = expirationTime;\n    push(taskQueue, newTask);\n\n    if (enableProfiling) {\n      markTaskStart(newTask, currentTime);\n      newTask.isQueued = true;\n    } // Schedule a host callback, if needed. If we're already performing work,\n    // wait until the next time we yield.\n\n\n    if (!isHostCallbackScheduled && !isPerformingWork) {\n      isHostCallbackScheduled = true;\n      requestHostCallback(flushWork);\n    }\n  }\n\n  return newTask;\n}\n\nfunction unstable_pauseExecution() {\n  isSchedulerPaused = true;\n}\n\nfunction unstable_continueExecution() {\n  isSchedulerPaused = false;\n\n  if (!isHostCallbackScheduled && !isPerformingWork) {\n    isHostCallbackScheduled = true;\n    requestHostCallback(flushWork);\n  }\n}\n\nfunction unstable_getFirstCallbackNode() {\n  return peek(taskQueue);\n}\n\nfunction unstable_cancelCallback(task) {\n  if (enableProfiling) {\n    if (task.isQueued) {\n      const currentTime = getCurrentTime();\n      markTaskCanceled(task, currentTime);\n      task.isQueued = false;\n    }\n  } // Null out the callback to indicate the task has been canceled. (Can't\n  // remove from the queue because you can't remove arbitrary nodes from an\n  // array based heap, only the first one.)\n\n\n  task.callback = null;\n}\n\nfunction unstable_getCurrentPriorityLevel() {\n  return currentPriorityLevel;\n}\n\nfunction requestHostCallback(callback) {\n  scheduledCallback = callback;\n}\n\nfunction requestHostTimeout(callback, ms) {\n  scheduledTimeout = callback;\n  timeoutTime = currentMockTime + ms;\n}\n\nfunction cancelHostTimeout() {\n  scheduledTimeout = null;\n  timeoutTime = -1;\n}\n\nfunction shouldYieldToHost() {\n  if (expectedNumberOfYields === 0 && yieldedValues === null || expectedNumberOfYields !== -1 && yieldedValues !== null && yieldedValues.length >= expectedNumberOfYields || shouldYieldForPaint && needsPaint) {\n    // We yielded at least as many values as expected. Stop flushing.\n    didStop = true;\n    return true;\n  }\n\n  return false;\n}\n\nfunction getCurrentTime() {\n  return currentMockTime;\n}\n\nfunction forceFrameRate() {// No-op\n}\n\nfunction reset() {\n  if (isFlushing) {\n    throw new Error('Cannot reset while already flushing work.');\n  }\n\n  currentMockTime = 0;\n  scheduledCallback = null;\n  scheduledTimeout = null;\n  timeoutTime = -1;\n  yieldedValues = null;\n  expectedNumberOfYields = -1;\n  didStop = false;\n  isFlushing = false;\n  needsPaint = false;\n} // Should only be used via an assertion helper that inspects the yielded values.\n\n\nfunction unstable_flushNumberOfYields(count) {\n  if (isFlushing) {\n    throw new Error('Already flushing work.');\n  }\n\n  if (scheduledCallback !== null) {\n    const cb = scheduledCallback;\n    expectedNumberOfYields = count;\n    isFlushing = true;\n\n    try {\n      let hasMoreWork = true;\n\n      do {\n        hasMoreWork = cb(true, currentMockTime);\n      } while (hasMoreWork && !didStop);\n\n      if (!hasMoreWork) {\n        scheduledCallback = null;\n      }\n    } finally {\n      expectedNumberOfYields = -1;\n      didStop = false;\n      isFlushing = false;\n    }\n  }\n}\n\nfunction unstable_flushUntilNextPaint() {\n  if (isFlushing) {\n    throw new Error('Already flushing work.');\n  }\n\n  if (scheduledCallback !== null) {\n    const cb = scheduledCallback;\n    shouldYieldForPaint = true;\n    needsPaint = false;\n    isFlushing = true;\n\n    try {\n      let hasMoreWork = true;\n\n      do {\n        hasMoreWork = cb(true, currentMockTime);\n      } while (hasMoreWork && !didStop);\n\n      if (!hasMoreWork) {\n        scheduledCallback = null;\n      }\n    } finally {\n      shouldYieldForPaint = false;\n      didStop = false;\n      isFlushing = false;\n    }\n  }\n\n  return false;\n}\n\nfunction unstable_hasPendingWork() {\n  return scheduledCallback !== null;\n}\n\nfunction unstable_flushExpired() {\n  if (isFlushing) {\n    throw new Error('Already flushing work.');\n  }\n\n  if (scheduledCallback !== null) {\n    isFlushing = true;\n\n    try {\n      const hasMoreWork = scheduledCallback(false, currentMockTime);\n\n      if (!hasMoreWork) {\n        scheduledCallback = null;\n      }\n    } finally {\n      isFlushing = false;\n    }\n  }\n}\n\nfunction unstable_flushAllWithoutAsserting() {\n  // Returns false if no work was flushed.\n  if (isFlushing) {\n    throw new Error('Already flushing work.');\n  }\n\n  if (scheduledCallback !== null) {\n    const cb = scheduledCallback;\n    isFlushing = true;\n\n    try {\n      let hasMoreWork = true;\n\n      do {\n        hasMoreWork = cb(true, currentMockTime);\n      } while (hasMoreWork);\n\n      if (!hasMoreWork) {\n        scheduledCallback = null;\n      }\n\n      return true;\n    } finally {\n      isFlushing = false;\n    }\n  } else {\n    return false;\n  }\n}\n\nfunction unstable_clearYields() {\n  if (yieldedValues === null) {\n    return [];\n  }\n\n  const values = yieldedValues;\n  yieldedValues = null;\n  return values;\n}\n\nfunction unstable_flushAll() {\n  if (yieldedValues !== null) {\n    throw new Error('Log is not empty. Assert on the log of yielded values before ' + 'flushing additional work.');\n  }\n\n  unstable_flushAllWithoutAsserting();\n\n  if (yieldedValues !== null) {\n    throw new Error('While flushing work, something yielded a value. Use an ' + 'assertion helper to assert on the log of yielded values, e.g. ' + 'expect(Scheduler).toFlushAndYield([...])');\n  }\n}\n\nfunction unstable_yieldValue(value) {\n  // eslint-disable-next-line react-internal/no-production-logging\n  if (console.log.name === 'disabledLog' || disableYieldValue) {\n    // If console.log has been patched, we assume we're in render\n    // replaying and we ignore any values yielding in the second pass.\n    return;\n  }\n\n  if (yieldedValues === null) {\n    yieldedValues = [value];\n  } else {\n    yieldedValues.push(value);\n  }\n}\n\nfunction unstable_advanceTime(ms) {\n  // eslint-disable-next-line react-internal/no-production-logging\n  if (console.log.name === 'disabledLog' || disableYieldValue) {\n    // If console.log has been patched, we assume we're in render\n    // replaying and we ignore any time advancing in the second pass.\n    return;\n  }\n\n  currentMockTime += ms;\n\n  if (scheduledTimeout !== null && timeoutTime <= currentMockTime) {\n    scheduledTimeout(currentMockTime);\n    timeoutTime = -1;\n    scheduledTimeout = null;\n  }\n}\n\nfunction requestPaint() {\n  needsPaint = true;\n}\n\nexport { ImmediatePriority as unstable_ImmediatePriority, UserBlockingPriority as unstable_UserBlockingPriority, NormalPriority as unstable_NormalPriority, IdlePriority as unstable_IdlePriority, LowPriority as unstable_LowPriority, unstable_runWithPriority, unstable_next, unstable_scheduleCallback, unstable_cancelCallback, unstable_wrapCallback, unstable_getCurrentPriorityLevel, shouldYieldToHost as unstable_shouldYield, requestPaint as unstable_requestPaint, unstable_continueExecution, unstable_pauseExecution, unstable_getFirstCallbackNode, getCurrentTime as unstable_now, forceFrameRate as unstable_forceFrameRate, unstable_flushAllWithoutAsserting, unstable_flushNumberOfYields, unstable_flushExpired, unstable_clearYields, unstable_flushUntilNextPaint, unstable_hasPendingWork, unstable_flushAll, unstable_yieldValue, unstable_advanceTime, reset, setDisableYieldValue as unstable_setDisableYieldValue };\nexport const unstable_Profiling = enableProfiling ? {\n  startLoggingProfilingEvents,\n  stopLoggingProfilingEvents\n} : null;","map":{"version":3,"sources":["/Users/bytedance/Desktop/sourceCodeReading/react-code/src/react/packages/scheduler/src/forks/SchedulerMock.js"],"names":["enableSchedulerDebugging","enableProfiling","push","pop","peek","ImmediatePriority","UserBlockingPriority","NormalPriority","LowPriority","IdlePriority","markTaskRun","markTaskYield","markTaskCompleted","markTaskCanceled","markTaskErrored","markSchedulerSuspended","markSchedulerUnsuspended","markTaskStart","stopLoggingProfilingEvents","startLoggingProfilingEvents","maxSigned31BitInt","IMMEDIATE_PRIORITY_TIMEOUT","USER_BLOCKING_PRIORITY_TIMEOUT","NORMAL_PRIORITY_TIMEOUT","LOW_PRIORITY_TIMEOUT","IDLE_PRIORITY_TIMEOUT","taskQueue","timerQueue","taskIdCounter","isSchedulerPaused","currentTask","currentPriorityLevel","isPerformingWork","isHostCallbackScheduled","isHostTimeoutScheduled","currentMockTime","scheduledCallback","scheduledTimeout","timeoutTime","yieldedValues","expectedNumberOfYields","didStop","isFlushing","needsPaint","shouldYieldForPaint","disableYieldValue","setDisableYieldValue","newValue","advanceTimers","currentTime","timer","callback","startTime","sortIndex","expirationTime","isQueued","handleTimeout","requestHostCallback","flushWork","firstTimer","requestHostTimeout","hasTimeRemaining","initialTime","cancelHostTimeout","previousPriorityLevel","workLoop","error","getCurrentTime","shouldYieldToHost","priorityLevel","didUserCallbackTimeout","continuationCallback","unstable_runWithPriority","eventHandler","unstable_next","unstable_wrapCallback","parentPriorityLevel","apply","arguments","unstable_scheduleCallback","options","delay","timeout","newTask","id","unstable_pauseExecution","unstable_continueExecution","unstable_getFirstCallbackNode","unstable_cancelCallback","task","unstable_getCurrentPriorityLevel","ms","length","forceFrameRate","reset","Error","unstable_flushNumberOfYields","count","cb","hasMoreWork","unstable_flushUntilNextPaint","unstable_hasPendingWork","unstable_flushExpired","unstable_flushAllWithoutAsserting","unstable_clearYields","values","unstable_flushAll","unstable_yieldValue","value","console","log","name","unstable_advanceTime","requestPaint","unstable_ImmediatePriority","unstable_UserBlockingPriority","unstable_NormalPriority","unstable_IdlePriority","unstable_LowPriority","unstable_shouldYield","unstable_requestPaint","unstable_now","unstable_forceFrameRate","unstable_setDisableYieldValue","unstable_Profiling"],"mappings":"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","sourcesContent":["/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\n/* eslint-disable no-var */\n/* eslint-disable react-internal/prod-error-codes */\n\nimport type {PriorityLevel} from '../SchedulerPriorities';\n\nimport {\n  enableSchedulerDebugging,\n  enableProfiling,\n} from '../SchedulerFeatureFlags';\nimport {push, pop, peek} from '../SchedulerMinHeap';\n\n// TODO: Use symbols?\nimport {\n  ImmediatePriority,\n  UserBlockingPriority,\n  NormalPriority,\n  LowPriority,\n  IdlePriority,\n} from '../SchedulerPriorities';\nimport {\n  markTaskRun,\n  markTaskYield,\n  markTaskCompleted,\n  markTaskCanceled,\n  markTaskErrored,\n  markSchedulerSuspended,\n  markSchedulerUnsuspended,\n  markTaskStart,\n  stopLoggingProfilingEvents,\n  startLoggingProfilingEvents,\n} from '../SchedulerProfiling';\n\ntype Callback = boolean => ?Callback;\n\ntype Task = {\n  id: number,\n  callback: Callback | null,\n  priorityLevel: PriorityLevel,\n  startTime: number,\n  expirationTime: number,\n  sortIndex: number,\n  isQueued?: boolean,\n};\n\n// Max 31 bit integer. The max integer size in V8 for 32-bit systems.\n// Math.pow(2, 30) - 1\n// 0b111111111111111111111111111111\nvar maxSigned31BitInt = 1073741823;\n\n// Times out immediately\nvar IMMEDIATE_PRIORITY_TIMEOUT = -1;\n// Eventually times out\nvar USER_BLOCKING_PRIORITY_TIMEOUT = 250;\nvar NORMAL_PRIORITY_TIMEOUT = 5000;\nvar LOW_PRIORITY_TIMEOUT = 10000;\n// Never times out\nvar IDLE_PRIORITY_TIMEOUT = maxSigned31BitInt;\n\n// Tasks are stored on a min heap\nvar taskQueue = [];\nvar timerQueue: Array<Task> = [];\n\n// Incrementing id counter. Used to maintain insertion order.\nvar taskIdCounter = 1;\n\n// Pausing the scheduler is useful for debugging.\nvar isSchedulerPaused = false;\n\nvar currentTask = null;\nvar currentPriorityLevel = NormalPriority;\n\n// This is set while performing work, to prevent re-entrance.\nvar isPerformingWork = false;\n\nvar isHostCallbackScheduled = false;\nvar isHostTimeoutScheduled = false;\n\nlet currentMockTime: number = 0;\nlet scheduledCallback:\n  | null\n  | ((\n      hasTimeRemaining: boolean,\n      initialTime: DOMHighResTimeStamp | number,\n    ) => boolean) = null;\nlet scheduledTimeout: (number => void) | null = null;\nlet timeoutTime: number = -1;\nlet yieldedValues: Array<mixed> | null = null;\nlet expectedNumberOfYields: number = -1;\nlet didStop: boolean = false;\nlet isFlushing: boolean = false;\nlet needsPaint: boolean = false;\nlet shouldYieldForPaint: boolean = false;\n\nvar disableYieldValue = false;\n\nfunction setDisableYieldValue(newValue: boolean) {\n  disableYieldValue = newValue;\n}\n\nfunction advanceTimers(currentTime: number) {\n  // Check for tasks that are no longer delayed and add them to the queue.\n  let timer = peek(timerQueue);\n  while (timer !== null) {\n    if (timer.callback === null) {\n      // Timer was cancelled.\n      pop(timerQueue);\n    } else if (timer.startTime <= currentTime) {\n      // Timer fired. Transfer to the task queue.\n      pop(timerQueue);\n      timer.sortIndex = timer.expirationTime;\n      push(taskQueue, timer);\n      if (enableProfiling) {\n        markTaskStart(timer, currentTime);\n        timer.isQueued = true;\n      }\n    } else {\n      // Remaining timers are pending.\n      return;\n    }\n    timer = peek(timerQueue);\n  }\n}\n\nfunction handleTimeout(currentTime: number) {\n  isHostTimeoutScheduled = false;\n  advanceTimers(currentTime);\n\n  if (!isHostCallbackScheduled) {\n    if (peek(taskQueue) !== null) {\n      isHostCallbackScheduled = true;\n      requestHostCallback(flushWork);\n    } else {\n      const firstTimer = peek(timerQueue);\n      if (firstTimer !== null) {\n        requestHostTimeout(handleTimeout, firstTimer.startTime - currentTime);\n      }\n    }\n  }\n}\n\nfunction flushWork(hasTimeRemaining: boolean, initialTime: number) {\n  if (enableProfiling) {\n    markSchedulerUnsuspended(initialTime);\n  }\n\n  // We'll need a host callback the next time work is scheduled.\n  isHostCallbackScheduled = false;\n  if (isHostTimeoutScheduled) {\n    // We scheduled a timeout but it's no longer needed. Cancel it.\n    isHostTimeoutScheduled = false;\n    cancelHostTimeout();\n  }\n\n  isPerformingWork = true;\n  const previousPriorityLevel = currentPriorityLevel;\n  try {\n    if (enableProfiling) {\n      try {\n        return workLoop(hasTimeRemaining, initialTime);\n      } catch (error) {\n        if (currentTask !== null) {\n          const currentTime = getCurrentTime();\n          // $FlowFixMe[incompatible-call] found when upgrading Flow\n          markTaskErrored(currentTask, currentTime);\n          // $FlowFixMe[incompatible-use] found when upgrading Flow\n          currentTask.isQueued = false;\n        }\n        throw error;\n      }\n    } else {\n      // No catch in prod code path.\n      return workLoop(hasTimeRemaining, initialTime);\n    }\n  } finally {\n    currentTask = null;\n    currentPriorityLevel = previousPriorityLevel;\n    isPerformingWork = false;\n    if (enableProfiling) {\n      const currentTime = getCurrentTime();\n      markSchedulerSuspended(currentTime);\n    }\n  }\n}\n\nfunction workLoop(hasTimeRemaining: boolean, initialTime: number): boolean {\n  let currentTime = initialTime;\n  advanceTimers(currentTime);\n  currentTask = peek(taskQueue);\n  while (\n    currentTask !== null &&\n    !(enableSchedulerDebugging && isSchedulerPaused)\n  ) {\n    if (\n      currentTask.expirationTime > currentTime &&\n      (!hasTimeRemaining || shouldYieldToHost())\n    ) {\n      // This currentTask hasn't expired, and we've reached the deadline.\n      break;\n    }\n    // $FlowFixMe[incompatible-use] found when upgrading Flow\n    const callback = currentTask.callback;\n    if (typeof callback === 'function') {\n      // $FlowFixMe[incompatible-use] found when upgrading Flow\n      currentTask.callback = null;\n      // $FlowFixMe[incompatible-use] found when upgrading Flow\n      currentPriorityLevel = currentTask.priorityLevel;\n      // $FlowFixMe[incompatible-use] found when upgrading Flow\n      const didUserCallbackTimeout = currentTask.expirationTime <= currentTime;\n      if (enableProfiling) {\n        // $FlowFixMe[incompatible-call] found when upgrading Flow\n        markTaskRun(currentTask, currentTime);\n      }\n      const continuationCallback = callback(didUserCallbackTimeout);\n      currentTime = getCurrentTime();\n      if (typeof continuationCallback === 'function') {\n        // If a continuation is returned, immediately yield to the main thread\n        // regardless of how much time is left in the current time slice.\n        // $FlowFixMe[incompatible-use] found when upgrading Flow\n        currentTask.callback = continuationCallback;\n        if (enableProfiling) {\n          // $FlowFixMe[incompatible-call] found when upgrading Flow\n          markTaskYield(currentTask, currentTime);\n        }\n        advanceTimers(currentTime);\n\n        if (shouldYieldForPaint) {\n          needsPaint = true;\n          return true;\n        } else {\n          // If `shouldYieldForPaint` is false, we keep flushing synchronously\n          // without yielding to the main thread. This is the behavior of the\n          // `toFlushAndYield` and `toFlushAndYieldThrough` testing helpers .\n        }\n      } else {\n        if (enableProfiling) {\n          // $FlowFixMe[incompatible-call] found when upgrading Flow\n          markTaskCompleted(currentTask, currentTime);\n          // $FlowFixMe[incompatible-use] found when upgrading Flow\n          currentTask.isQueued = false;\n        }\n        if (currentTask === peek(taskQueue)) {\n          pop(taskQueue);\n        }\n        advanceTimers(currentTime);\n      }\n    } else {\n      pop(taskQueue);\n    }\n    currentTask = peek(taskQueue);\n  }\n  // Return whether there's additional work\n  if (currentTask !== null) {\n    return true;\n  } else {\n    const firstTimer = peek(timerQueue);\n    if (firstTimer !== null) {\n      requestHostTimeout(handleTimeout, firstTimer.startTime - currentTime);\n    }\n    return false;\n  }\n}\n\nfunction unstable_runWithPriority<T>(\n  priorityLevel: PriorityLevel,\n  eventHandler: () => T,\n): T {\n  switch (priorityLevel) {\n    case ImmediatePriority:\n    case UserBlockingPriority:\n    case NormalPriority:\n    case LowPriority:\n    case IdlePriority:\n      break;\n    default:\n      priorityLevel = NormalPriority;\n  }\n\n  var previousPriorityLevel = currentPriorityLevel;\n  currentPriorityLevel = priorityLevel;\n\n  try {\n    return eventHandler();\n  } finally {\n    currentPriorityLevel = previousPriorityLevel;\n  }\n}\n\nfunction unstable_next<T>(eventHandler: () => T): T {\n  var priorityLevel;\n  switch (currentPriorityLevel) {\n    case ImmediatePriority:\n    case UserBlockingPriority:\n    case NormalPriority:\n      // Shift down to normal priority\n      priorityLevel = NormalPriority;\n      break;\n    default:\n      // Anything lower than normal priority should remain at the current level.\n      priorityLevel = currentPriorityLevel;\n      break;\n  }\n\n  var previousPriorityLevel = currentPriorityLevel;\n  currentPriorityLevel = priorityLevel;\n\n  try {\n    return eventHandler();\n  } finally {\n    currentPriorityLevel = previousPriorityLevel;\n  }\n}\n\nfunction unstable_wrapCallback<T: (...Array<mixed>) => mixed>(callback: T): T {\n  var parentPriorityLevel = currentPriorityLevel;\n  // $FlowFixMe[incompatible-return]\n  return function() {\n    // This is a fork of runWithPriority, inlined for performance.\n    var previousPriorityLevel = currentPriorityLevel;\n    currentPriorityLevel = parentPriorityLevel;\n\n    try {\n      return callback.apply(this, arguments);\n    } finally {\n      currentPriorityLevel = previousPriorityLevel;\n    }\n  };\n}\n\nfunction unstable_scheduleCallback(\n  priorityLevel: PriorityLevel,\n  callback: Callback,\n  options?: {delay: number},\n): Task {\n  var currentTime = getCurrentTime();\n\n  var startTime;\n  if (typeof options === 'object' && options !== null) {\n    var delay = options.delay;\n    if (typeof delay === 'number' && delay > 0) {\n      startTime = currentTime + delay;\n    } else {\n      startTime = currentTime;\n    }\n  } else {\n    startTime = currentTime;\n  }\n\n  var timeout;\n  switch (priorityLevel) {\n    case ImmediatePriority:\n      timeout = IMMEDIATE_PRIORITY_TIMEOUT;\n      break;\n    case UserBlockingPriority:\n      timeout = USER_BLOCKING_PRIORITY_TIMEOUT;\n      break;\n    case IdlePriority:\n      timeout = IDLE_PRIORITY_TIMEOUT;\n      break;\n    case LowPriority:\n      timeout = LOW_PRIORITY_TIMEOUT;\n      break;\n    case NormalPriority:\n    default:\n      timeout = NORMAL_PRIORITY_TIMEOUT;\n      break;\n  }\n\n  var expirationTime = startTime + timeout;\n\n  var newTask: Task = {\n    id: taskIdCounter++,\n    callback,\n    priorityLevel,\n    startTime,\n    expirationTime,\n    sortIndex: -1,\n  };\n  if (enableProfiling) {\n    newTask.isQueued = false;\n  }\n\n  if (startTime > currentTime) {\n    // This is a delayed task.\n    newTask.sortIndex = startTime;\n    push(timerQueue, newTask);\n    if (peek(taskQueue) === null && newTask === peek(timerQueue)) {\n      // All tasks are delayed, and this is the task with the earliest delay.\n      if (isHostTimeoutScheduled) {\n        // Cancel an existing timeout.\n        cancelHostTimeout();\n      } else {\n        isHostTimeoutScheduled = true;\n      }\n      // Schedule a timeout.\n      requestHostTimeout(handleTimeout, startTime - currentTime);\n    }\n  } else {\n    newTask.sortIndex = expirationTime;\n    push(taskQueue, newTask);\n    if (enableProfiling) {\n      markTaskStart(newTask, currentTime);\n      newTask.isQueued = true;\n    }\n    // Schedule a host callback, if needed. If we're already performing work,\n    // wait until the next time we yield.\n    if (!isHostCallbackScheduled && !isPerformingWork) {\n      isHostCallbackScheduled = true;\n      requestHostCallback(flushWork);\n    }\n  }\n\n  return newTask;\n}\n\nfunction unstable_pauseExecution() {\n  isSchedulerPaused = true;\n}\n\nfunction unstable_continueExecution() {\n  isSchedulerPaused = false;\n  if (!isHostCallbackScheduled && !isPerformingWork) {\n    isHostCallbackScheduled = true;\n    requestHostCallback(flushWork);\n  }\n}\n\nfunction unstable_getFirstCallbackNode(): Task | null {\n  return peek(taskQueue);\n}\n\nfunction unstable_cancelCallback(task: Task) {\n  if (enableProfiling) {\n    if (task.isQueued) {\n      const currentTime = getCurrentTime();\n      markTaskCanceled(task, currentTime);\n      task.isQueued = false;\n    }\n  }\n\n  // Null out the callback to indicate the task has been canceled. (Can't\n  // remove from the queue because you can't remove arbitrary nodes from an\n  // array based heap, only the first one.)\n  task.callback = null;\n}\n\nfunction unstable_getCurrentPriorityLevel(): PriorityLevel {\n  return currentPriorityLevel;\n}\n\nfunction requestHostCallback(callback: (boolean, number) => boolean) {\n  scheduledCallback = callback;\n}\n\nfunction requestHostTimeout(callback: number => void, ms: number) {\n  scheduledTimeout = callback;\n  timeoutTime = currentMockTime + ms;\n}\n\nfunction cancelHostTimeout(): void {\n  scheduledTimeout = null;\n  timeoutTime = -1;\n}\n\nfunction shouldYieldToHost(): boolean {\n  if (\n    (expectedNumberOfYields === 0 && yieldedValues === null) ||\n    (expectedNumberOfYields !== -1 &&\n      yieldedValues !== null &&\n      yieldedValues.length >= expectedNumberOfYields) ||\n    (shouldYieldForPaint && needsPaint)\n  ) {\n    // We yielded at least as many values as expected. Stop flushing.\n    didStop = true;\n    return true;\n  }\n  return false;\n}\n\nfunction getCurrentTime(): number {\n  return currentMockTime;\n}\n\nfunction forceFrameRate() {\n  // No-op\n}\n\nfunction reset() {\n  if (isFlushing) {\n    throw new Error('Cannot reset while already flushing work.');\n  }\n  currentMockTime = 0;\n  scheduledCallback = null;\n  scheduledTimeout = null;\n  timeoutTime = -1;\n  yieldedValues = null;\n  expectedNumberOfYields = -1;\n  didStop = false;\n  isFlushing = false;\n  needsPaint = false;\n}\n\n// Should only be used via an assertion helper that inspects the yielded values.\nfunction unstable_flushNumberOfYields(count: number): void {\n  if (isFlushing) {\n    throw new Error('Already flushing work.');\n  }\n  if (scheduledCallback !== null) {\n    const cb = scheduledCallback;\n    expectedNumberOfYields = count;\n    isFlushing = true;\n    try {\n      let hasMoreWork = true;\n      do {\n        hasMoreWork = cb(true, currentMockTime);\n      } while (hasMoreWork && !didStop);\n      if (!hasMoreWork) {\n        scheduledCallback = null;\n      }\n    } finally {\n      expectedNumberOfYields = -1;\n      didStop = false;\n      isFlushing = false;\n    }\n  }\n}\n\nfunction unstable_flushUntilNextPaint(): false {\n  if (isFlushing) {\n    throw new Error('Already flushing work.');\n  }\n  if (scheduledCallback !== null) {\n    const cb = scheduledCallback;\n    shouldYieldForPaint = true;\n    needsPaint = false;\n    isFlushing = true;\n    try {\n      let hasMoreWork = true;\n      do {\n        hasMoreWork = cb(true, currentMockTime);\n      } while (hasMoreWork && !didStop);\n      if (!hasMoreWork) {\n        scheduledCallback = null;\n      }\n    } finally {\n      shouldYieldForPaint = false;\n      didStop = false;\n      isFlushing = false;\n    }\n  }\n  return false;\n}\n\nfunction unstable_hasPendingWork(): boolean {\n  return scheduledCallback !== null;\n}\n\nfunction unstable_flushExpired() {\n  if (isFlushing) {\n    throw new Error('Already flushing work.');\n  }\n  if (scheduledCallback !== null) {\n    isFlushing = true;\n    try {\n      const hasMoreWork = scheduledCallback(false, currentMockTime);\n      if (!hasMoreWork) {\n        scheduledCallback = null;\n      }\n    } finally {\n      isFlushing = false;\n    }\n  }\n}\n\nfunction unstable_flushAllWithoutAsserting(): boolean {\n  // Returns false if no work was flushed.\n  if (isFlushing) {\n    throw new Error('Already flushing work.');\n  }\n  if (scheduledCallback !== null) {\n    const cb = scheduledCallback;\n    isFlushing = true;\n    try {\n      let hasMoreWork = true;\n      do {\n        hasMoreWork = cb(true, currentMockTime);\n      } while (hasMoreWork);\n      if (!hasMoreWork) {\n        scheduledCallback = null;\n      }\n      return true;\n    } finally {\n      isFlushing = false;\n    }\n  } else {\n    return false;\n  }\n}\n\nfunction unstable_clearYields(): Array<mixed> {\n  if (yieldedValues === null) {\n    return [];\n  }\n  const values = yieldedValues;\n  yieldedValues = null;\n  return values;\n}\n\nfunction unstable_flushAll(): void {\n  if (yieldedValues !== null) {\n    throw new Error(\n      'Log is not empty. Assert on the log of yielded values before ' +\n        'flushing additional work.',\n    );\n  }\n  unstable_flushAllWithoutAsserting();\n  if (yieldedValues !== null) {\n    throw new Error(\n      'While flushing work, something yielded a value. Use an ' +\n        'assertion helper to assert on the log of yielded values, e.g. ' +\n        'expect(Scheduler).toFlushAndYield([...])',\n    );\n  }\n}\n\nfunction unstable_yieldValue(value: mixed): void {\n  // eslint-disable-next-line react-internal/no-production-logging\n  if (console.log.name === 'disabledLog' || disableYieldValue) {\n    // If console.log has been patched, we assume we're in render\n    // replaying and we ignore any values yielding in the second pass.\n    return;\n  }\n  if (yieldedValues === null) {\n    yieldedValues = [value];\n  } else {\n    yieldedValues.push(value);\n  }\n}\n\nfunction unstable_advanceTime(ms: number) {\n  // eslint-disable-next-line react-internal/no-production-logging\n  if (console.log.name === 'disabledLog' || disableYieldValue) {\n    // If console.log has been patched, we assume we're in render\n    // replaying and we ignore any time advancing in the second pass.\n    return;\n  }\n  currentMockTime += ms;\n  if (scheduledTimeout !== null && timeoutTime <= currentMockTime) {\n    scheduledTimeout(currentMockTime);\n    timeoutTime = -1;\n    scheduledTimeout = null;\n  }\n}\n\nfunction requestPaint() {\n  needsPaint = true;\n}\n\nexport {\n  ImmediatePriority as unstable_ImmediatePriority,\n  UserBlockingPriority as unstable_UserBlockingPriority,\n  NormalPriority as unstable_NormalPriority,\n  IdlePriority as unstable_IdlePriority,\n  LowPriority as unstable_LowPriority,\n  unstable_runWithPriority,\n  unstable_next,\n  unstable_scheduleCallback,\n  unstable_cancelCallback,\n  unstable_wrapCallback,\n  unstable_getCurrentPriorityLevel,\n  shouldYieldToHost as unstable_shouldYield,\n  requestPaint as unstable_requestPaint,\n  unstable_continueExecution,\n  unstable_pauseExecution,\n  unstable_getFirstCallbackNode,\n  getCurrentTime as unstable_now,\n  forceFrameRate as unstable_forceFrameRate,\n  unstable_flushAllWithoutAsserting,\n  unstable_flushNumberOfYields,\n  unstable_flushExpired,\n  unstable_clearYields,\n  unstable_flushUntilNextPaint,\n  unstable_hasPendingWork,\n  unstable_flushAll,\n  unstable_yieldValue,\n  unstable_advanceTime,\n  reset,\n  setDisableYieldValue as unstable_setDisableYieldValue,\n};\n\nexport const unstable_Profiling: {\n  startLoggingProfilingEvents(): void,\n  stopLoggingProfilingEvents(): ArrayBuffer | null,\n} | null = enableProfiling\n  ? {\n      startLoggingProfilingEvents,\n      stopLoggingProfilingEvents,\n    }\n  : null;\n"]},"metadata":{},"sourceType":"module"}