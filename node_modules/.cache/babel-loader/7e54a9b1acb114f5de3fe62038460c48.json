{"ast":null,"code":"/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n */\nimport { HostComponent, HostResource, HostSingleton, LazyComponent, SuspenseComponent, SuspenseListComponent, FunctionComponent, IndeterminateComponent, ForwardRef, SimpleMemoComponent, ClassComponent } from './ReactWorkTags';\nimport { describeBuiltInComponentFrame, describeFunctionComponentFrame, describeClassComponentFrame } from 'shared/ReactComponentStackFrame';\n\nfunction describeFiber(fiber) {\n  const owner = __DEV__ ? fiber._debugOwner ? fiber._debugOwner.type : null : null;\n  const source = __DEV__ ? fiber._debugSource : null;\n\n  switch (fiber.tag) {\n    case HostResource:\n    case HostSingleton:\n    case HostComponent:\n      return describeBuiltInComponentFrame(fiber.type, source, owner);\n\n    case LazyComponent:\n      return describeBuiltInComponentFrame('Lazy', source, owner);\n\n    case SuspenseComponent:\n      return describeBuiltInComponentFrame('Suspense', source, owner);\n\n    case SuspenseListComponent:\n      return describeBuiltInComponentFrame('SuspenseList', source, owner);\n\n    case FunctionComponent:\n    case IndeterminateComponent:\n    case SimpleMemoComponent:\n      return describeFunctionComponentFrame(fiber.type, source, owner);\n\n    case ForwardRef:\n      return describeFunctionComponentFrame(fiber.type.render, source, owner);\n\n    case ClassComponent:\n      return describeClassComponentFrame(fiber.type, source, owner);\n\n    default:\n      return '';\n  }\n}\n\nexport function getStackByFiberInDevAndProd(workInProgress) {\n  try {\n    let info = '';\n    let node = workInProgress;\n\n    do {\n      info += describeFiber(node); // $FlowFixMe[incompatible-type] we bail out when we get a null\n\n      node = node.return;\n    } while (node);\n\n    return info;\n  } catch (x) {\n    return '\\nError generating stack: ' + x.message + '\\n' + x.stack;\n  }\n}","map":{"version":3,"sources":["/Users/bytedance/Desktop/sourceCodeReading/react-code/src/react/packages/react-reconciler/src/ReactFiberComponentStack.js"],"names":["HostComponent","HostResource","HostSingleton","LazyComponent","SuspenseComponent","SuspenseListComponent","FunctionComponent","IndeterminateComponent","ForwardRef","SimpleMemoComponent","ClassComponent","describeBuiltInComponentFrame","describeFunctionComponentFrame","describeClassComponentFrame","describeFiber","fiber","owner","__DEV__","_debugOwner","type","source","_debugSource","tag","render","getStackByFiberInDevAndProd","workInProgress","info","node","return","x","message","stack"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA,SACEA,aADF,EAEEC,YAFF,EAGEC,aAHF,EAIEC,aAJF,EAKEC,iBALF,EAMEC,qBANF,EAOEC,iBAPF,EAQEC,sBARF,EASEC,UATF,EAUEC,mBAVF,EAWEC,cAXF,QAYO,iBAZP;AAaA,SACEC,6BADF,EAEEC,8BAFF,EAGEC,2BAHF,QAIO,iCAJP;;AAMA,SAASC,aAAT,CAAuBC,KAAvB,EAA6C;AAC3C,QAAMC,KAAsB,GAAGC,OAAO,GAClCF,KAAK,CAACG,WAAN,GACEH,KAAK,CAACG,WAAN,CAAkBC,IADpB,GAEE,IAHgC,GAIlC,IAJJ;AAKA,QAAMC,MAAM,GAAGH,OAAO,GAAGF,KAAK,CAACM,YAAT,GAAwB,IAA9C;;AACA,UAAQN,KAAK,CAACO,GAAd;AACE,SAAKrB,YAAL;AACA,SAAKC,aAAL;AACA,SAAKF,aAAL;AACE,aAAOW,6BAA6B,CAACI,KAAK,CAACI,IAAP,EAAaC,MAAb,EAAqBJ,KAArB,CAApC;;AACF,SAAKb,aAAL;AACE,aAAOQ,6BAA6B,CAAC,MAAD,EAASS,MAAT,EAAiBJ,KAAjB,CAApC;;AACF,SAAKZ,iBAAL;AACE,aAAOO,6BAA6B,CAAC,UAAD,EAAaS,MAAb,EAAqBJ,KAArB,CAApC;;AACF,SAAKX,qBAAL;AACE,aAAOM,6BAA6B,CAAC,cAAD,EAAiBS,MAAjB,EAAyBJ,KAAzB,CAApC;;AACF,SAAKV,iBAAL;AACA,SAAKC,sBAAL;AACA,SAAKE,mBAAL;AACE,aAAOG,8BAA8B,CAACG,KAAK,CAACI,IAAP,EAAaC,MAAb,EAAqBJ,KAArB,CAArC;;AACF,SAAKR,UAAL;AACE,aAAOI,8BAA8B,CAACG,KAAK,CAACI,IAAN,CAAWI,MAAZ,EAAoBH,MAApB,EAA4BJ,KAA5B,CAArC;;AACF,SAAKN,cAAL;AACE,aAAOG,2BAA2B,CAACE,KAAK,CAACI,IAAP,EAAaC,MAAb,EAAqBJ,KAArB,CAAlC;;AACF;AACE,aAAO,EAAP;AApBJ;AAsBD;;AAED,OAAO,SAASQ,2BAAT,CAAqCC,cAArC,EAAoE;AACzE,MAAI;AACF,QAAIC,IAAI,GAAG,EAAX;AACA,QAAIC,IAAW,GAAGF,cAAlB;;AACA,OAAG;AACDC,MAAAA,IAAI,IAAIZ,aAAa,CAACa,IAAD,CAArB,CADC,CAED;;AACAA,MAAAA,IAAI,GAAGA,IAAI,CAACC,MAAZ;AACD,KAJD,QAISD,IAJT;;AAKA,WAAOD,IAAP;AACD,GATD,CASE,OAAOG,CAAP,EAAU;AACV,WAAO,+BAA+BA,CAAC,CAACC,OAAjC,GAA2C,IAA3C,GAAkDD,CAAC,CAACE,KAA3D;AACD;AACF","sourcesContent":["/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nimport type {Fiber} from './ReactInternalTypes';\n\nimport {\n  HostComponent,\n  HostResource,\n  HostSingleton,\n  LazyComponent,\n  SuspenseComponent,\n  SuspenseListComponent,\n  FunctionComponent,\n  IndeterminateComponent,\n  ForwardRef,\n  SimpleMemoComponent,\n  ClassComponent,\n} from './ReactWorkTags';\nimport {\n  describeBuiltInComponentFrame,\n  describeFunctionComponentFrame,\n  describeClassComponentFrame,\n} from 'shared/ReactComponentStackFrame';\n\nfunction describeFiber(fiber: Fiber): string {\n  const owner: null | Function = __DEV__\n    ? fiber._debugOwner\n      ? fiber._debugOwner.type\n      : null\n    : null;\n  const source = __DEV__ ? fiber._debugSource : null;\n  switch (fiber.tag) {\n    case HostResource:\n    case HostSingleton:\n    case HostComponent:\n      return describeBuiltInComponentFrame(fiber.type, source, owner);\n    case LazyComponent:\n      return describeBuiltInComponentFrame('Lazy', source, owner);\n    case SuspenseComponent:\n      return describeBuiltInComponentFrame('Suspense', source, owner);\n    case SuspenseListComponent:\n      return describeBuiltInComponentFrame('SuspenseList', source, owner);\n    case FunctionComponent:\n    case IndeterminateComponent:\n    case SimpleMemoComponent:\n      return describeFunctionComponentFrame(fiber.type, source, owner);\n    case ForwardRef:\n      return describeFunctionComponentFrame(fiber.type.render, source, owner);\n    case ClassComponent:\n      return describeClassComponentFrame(fiber.type, source, owner);\n    default:\n      return '';\n  }\n}\n\nexport function getStackByFiberInDevAndProd(workInProgress: Fiber): string {\n  try {\n    let info = '';\n    let node: Fiber = workInProgress;\n    do {\n      info += describeFiber(node);\n      // $FlowFixMe[incompatible-type] we bail out when we get a null\n      node = node.return;\n    } while (node);\n    return info;\n  } catch (x) {\n    return '\\nError generating stack: ' + x.message + '\\n' + x.stack;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}